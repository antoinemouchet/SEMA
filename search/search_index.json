{"config":{"lang":["en"],"separator":"[\\s\\-,:!=\\[\\]()\"/]+|(?!\\b)(?=[A-Z][a-z])|\\.(?!\\d)|&[lg]t;","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"\u2620\ufe0f SEMA \u2620\ufe0f","text":""},{"location":"index.html#toolchain-using-symbolic-execution-for-malware-analysis","title":"ToolChain using Symbolic Execution for Malware Analysis.","text":"<pre><code>  \u2588\u2588\u2588\u2588\u2588\u2588 \u2593\u2588\u2588\u2588\u2588\u2588  \u2588\u2588\u2588\u2584 \u2584\u2588\u2588\u2588\u2593 \u2584\u2584\u2584\n\u2592\u2588\u2588    \u2592 \u2593\u2588   \u2580 \u2593\u2588\u2588\u2592\u2580\u2588\u2580 \u2588\u2588\u2592\u2592\u2588\u2588\u2588\u2588\u2584\n\u2591 \u2593\u2588\u2588\u2584   \u2592\u2588\u2588\u2588   \u2593\u2588\u2588    \u2593\u2588\u2588\u2591\u2592\u2588\u2588  \u2580\u2588\u2584\n  \u2592   \u2588\u2588\u2592\u2592\u2593\u2588  \u2584 \u2592\u2588\u2588    \u2592\u2588\u2588 \u2591\u2588\u2588\u2584\u2584\u2584\u2584\u2588\u2588\n\u2592\u2588\u2588\u2588\u2588\u2588\u2588\u2592\u2592\u2591\u2592\u2588\u2588\u2588\u2588\u2592\u2592\u2588\u2588\u2592   \u2591\u2588\u2588\u2592 \u2593\u2588   \u2593\u2588\u2588\u2592\n\u2592 \u2592\u2593\u2592 \u2592 \u2591\u2591\u2591 \u2592\u2591 \u2591\u2591 \u2592\u2591   \u2591  \u2591 \u2592\u2592   \u2593\u2592\u2588\u2591\n\u2591 \u2591\u2592  \u2591 \u2591 \u2591 \u2591  \u2591\u2591  \u2591      \u2591  \u2592   \u2592\u2592 \u2591\n\u2591  \u2591  \u2591     \u2591   \u2591      \u2591     \u2591   \u2592\n      \u2591     \u2591  \u2591       \u2591         \u2591  \u2591\n</code></pre>"},{"location":"index.html#toolchain-architecture","title":"Toolchain architecture","text":"<p>Our toolchain is represented in the following figure and works as follows:</p> <ul> <li>A collection of labelled binaries from different malware families is collected and used as the input of the toolchain.</li> <li>Angr, a framework for symbolic execution, is used to execute binaries symbolically and extract execution traces. For this purpose, different heuristics have been developed to optimize symbolic execution.</li> <li>Several execution traces (i.e., API calls used and their arguments) corresponding to one binary are extracted with Angr and gathered together using several graph heuristics to construct a SCDG.</li> <li>These resulting SCDGs are then used as input to graph mining to extract common graphs between SCDGs of the same family and create a signature.</li> <li>Finally, when a new sample has to be classified, its SCDG is built and compared with SCDGs of known families using a simple similarity metric.</li> </ul> <p></p> <p>This repository contains a first version of a SCDG extractor. During the symbolic analysis of a binary, all system calls and their arguments found are recorded. After some stop conditions for symbolic analysis, a graph is built as follows: Nodes are system calls recorded, edges show that some arguments are shared between calls.</p> <p>When a new sample has to be evaluated, its SCDG is first built as described previously. Then, <code>gspan</code> is applied to extract the biggest common subgraph and a similarity score is evaluated to decide if the graph is considered as part of the family or not. The similarity score <code>S</code> between graph <code>G'</code> and <code>G''</code> is computed as follows: Since <code>G''</code> is a subgraph of <code>G'</code>, this is calculating how much <code>G'</code> appears in <code>G''</code>. Another classifier we use is the Support Vector Machine (<code>SVM</code>) with INRIA graph kernel or the Weisfeiler-Lehman extension graph kernel.</p> <p>A web application is available and is called SemaWebApp. It allows to manage the launch of experiments on SemaSCDG and/or SemaClassifier.</p>"},{"location":"index.html#documentation","title":"Documentation","text":"<ul> <li> <p>Complete README of the entire toolchain : </p> </li> <li> <p>SCDG README : </p> </li> <li> <p>Classifier README : </p> </li> <li> <p>Web app README : </p> </li> <li> <p>A Makefile is provided to ease the usage of the toolchain, run <code>make help</code> for more information about the available commands</p> </li> </ul>"},{"location":"index.html#credentials","title":"Credentials","text":"<p>Main authors of the projects:</p> <ul> <li> <p>Charles-Henry Bertrand Van Ouytsel (UCLouvain)</p> </li> <li> <p>Christophe Crochet (UCLouvain)</p> </li> <li> <p>Khanh Huu The Dam (UCLouvain)</p> </li> <li> <p>Oreins Manon (UCLouvain)</p> </li> </ul> <p>Under the supervision and with the support of Fabrizio Biondi (Avast)</p> <p>Under the supervision and with the support of our professor Axel Legay (UCLouvain) (\u2764\ufe0f)</p>"},{"location":"index.html#linked-papers","title":"Linked papers","text":"<ul> <li> <p>Analysis and classification of malware based on symbolic execution and machine learning</p> </li> <li> <p>Tool Paper - SEMA: Symbolic Execution Toolchain for Malware Analysis</p> </li> <li> <p>On Exploiting Symbolic Execution to Improve the Analysis of RAT Samples with angr</p> </li> </ul>"},{"location":"CHANGELOG.html","title":"Changelog","text":""},{"location":"CONTRIBUTING.html","title":"Contributing","text":""},{"location":"automate_mkdocs.html","title":"Automate mkdocs","text":""},{"location":"automate_mkdocs.html#add_val","title":"add_val","text":"<p>source <pre><code>.add_val(\n   indices, value, data\n)\n</code></pre></p>"},{"location":"automate_mkdocs.html#automate_mkdocs_from_docstring","title":"automate_mkdocs_from_docstring","text":"<p>source <pre><code>.automate_mkdocs_from_docstring(\n   mkdocs_dir: Union[str, Path], mkgendocs_f: str, repo_dir: Path,\n   match_string: str\n)\n</code></pre></p> <p>Automates the -pages for mkgendocs package by adding all Python functions in a directory to the mkgendocs config.</p> <p>Args</p> <ul> <li>mkdocs_dir (typing.Union[str, pathlib.Path]) : textual directory for the hierarchical directory &amp; navigation in Mkdocs</li> <li>mkgendocs_f (str) : The configurations file for the mkgendocs package</li> <li>repo_dir (pathlib.Path) : textual directory to search for Python functions in</li> <li>match_string (str) : the text to be matches, after which the functions will be added in mkgendocs format</li> </ul> <p>Example</p> <pre><code>&gt;&gt;&gt; automate_mkdocs_from_docstring('scripts', repo_dir=Path.cwd(), match_string='pages:')\n</code></pre> <p>Returns</p> <ul> <li>list  : list of created markdown files and their relative paths</li> </ul>"},{"location":"automate_mkdocs.html#automate_nav_structure","title":"automate_nav_structure","text":"<p>source <pre><code>.automate_nav_structure(\n   mkdocs_dir: Union[str, Path], mkdocs_f: str, repo_dir: Path, match_string: str,\n   structure: dict\n)\n</code></pre></p> <p>Automates the -pages for mkgendocs package by adding all Python functions in a directory to the mkgendocs config.</p> <p>Args</p> <ul> <li>mkdocs_dir (typing.Union[str, pathlib.Path]) : textual directory for the hierarchical directory &amp; navigation in Mkdocs</li> <li>mkgendocs_f (str) : The configurations file for the mkgendocs package</li> <li>repo_dir (pathlib.Path) : textual directory to search for Python functions in</li> <li>match_string (str) : the text to be matches, after which the functions will be added in mkgendocs format</li> </ul> <p>Example</p> <pre><code>&gt;&gt;&gt; automate_mkdocs_from_docstring('scripts', repo_dir=Path.cwd(), match_string='pages:')\n</code></pre> <p>Returns</p> <ul> <li>str  : feedback message</li> </ul>"},{"location":"automate_mkdocs.html#fix","title":"fix","text":"<p>source <pre><code>.fix(\n   f\n)\n</code></pre></p> <p>Allows creation of arbitrary length dict item</p> <p>Args</p> <ul> <li>f (type) : Description of parameter <code>f</code>.</li> </ul> <p>Returns</p> <ul> <li>type  : Description of returned object.</li> </ul>"},{"location":"automate_mkdocs.html#indent","title":"indent","text":"<p>source <pre><code>.indent(\n   string: str\n)\n</code></pre></p> <p>Count the indentation in whitespace characters.</p> <p>Args</p> <ul> <li>string (str) : text with indents</li> </ul> <p>Returns</p> <ul> <li>int  : Number of whitespace indentations</li> </ul>"},{"location":"contributing.html","title":"Contributing","text":""},{"location":"home.html","title":"\u2620\ufe0f SEMA \u2620\ufe0f","text":""},{"location":"home.html#toolchain-using-symbolic-execution-for-malware-analysis","title":"ToolChain using Symbolic Execution for Malware Analysis.","text":"<pre><code>  \u2588\u2588\u2588\u2588\u2588\u2588 \u2593\u2588\u2588\u2588\u2588\u2588  \u2588\u2588\u2588\u2584 \u2584\u2588\u2588\u2588\u2593 \u2584\u2584\u2584\n\u2592\u2588\u2588    \u2592 \u2593\u2588   \u2580 \u2593\u2588\u2588\u2592\u2580\u2588\u2580 \u2588\u2588\u2592\u2592\u2588\u2588\u2588\u2588\u2584\n\u2591 \u2593\u2588\u2588\u2584   \u2592\u2588\u2588\u2588   \u2593\u2588\u2588    \u2593\u2588\u2588\u2591\u2592\u2588\u2588  \u2580\u2588\u2584\n  \u2592   \u2588\u2588\u2592\u2592\u2593\u2588  \u2584 \u2592\u2588\u2588    \u2592\u2588\u2588 \u2591\u2588\u2588\u2584\u2584\u2584\u2584\u2588\u2588\n\u2592\u2588\u2588\u2588\u2588\u2588\u2588\u2592\u2592\u2591\u2592\u2588\u2588\u2588\u2588\u2592\u2592\u2588\u2588\u2592   \u2591\u2588\u2588\u2592 \u2593\u2588   \u2593\u2588\u2588\u2592\n\u2592 \u2592\u2593\u2592 \u2592 \u2591\u2591\u2591 \u2592\u2591 \u2591\u2591 \u2592\u2591   \u2591  \u2591 \u2592\u2592   \u2593\u2592\u2588\u2591\n\u2591 \u2591\u2592  \u2591 \u2591 \u2591 \u2591  \u2591\u2591  \u2591      \u2591  \u2592   \u2592\u2592 \u2591\n\u2591  \u2591  \u2591     \u2591   \u2591      \u2591     \u2591   \u2592\n      \u2591     \u2591  \u2591       \u2591         \u2591  \u2591\n</code></pre>"},{"location":"home.html#toolchain-architecture","title":"Toolchain architecture","text":"<p>Our toolchain is represented in the following figure and works as follows:</p> <ul> <li>A collection of labelled binaries from different malware families is collected and used as the input of the toolchain.</li> <li>Angr, a framework for symbolic execution, is used to execute binaries symbolically and extract execution traces. For this purpose, different heuristics have been developed to optimize symbolic execution.</li> <li>Several execution traces (i.e., API calls used and their arguments) corresponding to one binary are extracted with Angr and gathered together using several graph heuristics to construct a SCDG.</li> <li>These resulting SCDGs are then used as input to graph mining to extract common graphs between SCDGs of the same family and create a signature.</li> <li>Finally, when a new sample has to be classified, its SCDG is built and compared with SCDGs of known families using a simple similarity metric.</li> </ul> <p></p> <p>This repository contains a first version of a SCDG extractor. During the symbolic analysis of a binary, all system calls and their arguments found are recorded. After some stop conditions for symbolic analysis, a graph is built as follows: Nodes are system calls recorded, edges show that some arguments are shared between calls.</p> <p>When a new sample has to be evaluated, its SCDG is first built as described previously. Then, <code>gspan</code> is applied to extract the biggest common subgraph and a similarity score is evaluated to decide if the graph is considered as part of the family or not. The similarity score <code>S</code> between graph <code>G'</code> and <code>G''</code> is computed as follows: Since <code>G''</code> is a subgraph of <code>G'</code>, this is calculating how much <code>G'</code> appears in <code>G''</code>. Another classifier we use is the Support Vector Machine (<code>SVM</code>) with INRIA graph kernel or the Weisfeiler-Lehman extension graph kernel.</p> <p>A web application is available and is called SemaWebApp. It allows to manage the launch of experiments on SemaSCDG and/or SemaClassifier.</p>"},{"location":"home.html#documentation","title":"Documentation","text":"<ul> <li> <p>Complete README of the entire toolchain : </p> </li> <li> <p>SCDG README : </p> </li> <li> <p>Classifier README : </p> </li> <li> <p>Web app README : </p> </li> <li> <p>A Makefile is provided to ease the usage of the toolchain, run <code>make help</code> for more information about the available commands</p> </li> </ul>"},{"location":"home.html#credentials","title":"Credentials","text":"<p>Main authors of the projects:</p> <ul> <li> <p>Charles-Henry Bertrand Van Ouytsel (UCLouvain)</p> </li> <li> <p>Christophe Crochet (UCLouvain)</p> </li> <li> <p>Khanh Huu The Dam (UCLouvain)</p> </li> <li> <p>Oreins Manon (UCLouvain)</p> </li> </ul> <p>Under the supervision and with the support of Fabrizio Biondi (Avast)</p> <p>Under the supervision and with the support of our professor Axel Legay (UCLouvain) (\u2764\ufe0f)</p>"},{"location":"home.html#linked-papers","title":"Linked papers","text":"<ul> <li> <p>Analysis and classification of malware based on symbolic execution and machine learning</p> </li> <li> <p>Tool Paper - SEMA: Symbolic Execution Toolchain for Malware Analysis</p> </li> <li> <p>On Exploiting Symbolic Execution to Improve the Analysis of RAT Samples with angr</p> </li> </ul>"},{"location":"sema_classifier.html","title":"\ud83d\udcc3 Model &amp; Classification extractor (<code>SemaClassifier</code>)","text":"<p>When a new sample has to be evaluated, its SCDG is first build as described in the README of the SCDG. Then, <code>gspan</code> is applied to extract the biggest common subgraph and a similarity score is evaluated to decide if the graph is considered as part of the family or not.</p> <p>The similarity score <code>S</code> between graph <code>G'</code> and <code>G''</code> is computed as follow:</p> <p>Since <code>G''</code> is a subgraph of <code>G'</code>, this is calculating how much <code>G'</code> appears in <code>G''</code>.</p> <p>Another classifier we use is the Support Vector Machine (<code>SVM</code>) with INRIA graph kernel or the Weisfeiler-Lehman extension graph kernel.</p>"},{"location":"sema_classifier.html#how-to-use","title":"How to use ?","text":"<p>Launch the container: <pre><code>docker run --rm --name=\"sema-classifier\" -v ${PWD}/InputFolder:/sema-classifier/application/database -it sema-classifier ../docker_startup.sh 1\n</code></pre></p> <p>Where the volume correspond to the folder containings the inputs that will be accessible by the container.</p> <p>Then just run the script : <pre><code>python3 SemaClassifier.py FOLDER/FILE\n\nusage: update_readme_usage.py [-h] [--threshold THRESHOLD] [--biggest_subgraph BIGGEST_SUBGRAPH] [--support SUPPORT] [--ctimeout CTIMEOUT] [--epoch EPOCH] [--sepoch SEPOCH]\n                              [--data_scale DATA_SCALE] [--vector_size VECTOR_SIZE] [--batch_size BATCH_SIZE] (--classification | --detection) (--wl | --inria | --dl | --gspan)\n                              [--bancteian] [--delf] [--FeakerStealer] [--gandcrab] [--ircbot] [--lamer] [--nitol] [--RedLineStealer] [--sfone] [--sillyp2p] [--simbot]\n                              [--Sodinokibi] [--sytro] [--upatre] [--wabot] [--RemcosRAT] [--verbose_classifier] [--train] [--nthread NTHREAD]\n                              binaries\n\nClassification module arguments\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --classification      By malware family\n  --detection           Cleanware vs Malware\n  --wl                  TODO\n  --inria               TODO\n  --dl                  TODO\n  --gspan               TODOe\n\nGlobal classifiers parameters:\n  --threshold THRESHOLD\n                        Threshold used for the classifier [0..1] (default : 0.45)\n\nGspan options:\n  --biggest_subgraph BIGGEST_SUBGRAPH\n                        Biggest subgraph consider for Gspan (default: 5)\n  --support SUPPORT     Support used for the gpsan classifier [0..1] (default : 0.75)\n  --ctimeout CTIMEOUT   Timeout for gspan classifier (default : 3sec)\n\nDeep Learning options:\n  --epoch EPOCH         Only for deep learning model: number of epoch (default: 5) Always 1 for FL model\n  --sepoch SEPOCH       Only for deep learning model: starting epoch (default: 1)\n  --data_scale DATA_SCALE\n                        Only for deep learning model: data scale value (default: 0.9)\n  --vector_size VECTOR_SIZE\n                        Only for deep learning model: Size of the vector used (default: 4)\n  --batch_size BATCH_SIZE\n                        Only for deep learning model: Batch size for the model (default: 1)\n\nMalware familly:\n  --bancteian\n  --delf\n  --FeakerStealer\n  --gandcrab\n  --ircbot\n  --lamer\n  --nitol\n  --RedLineStealer\n  --sfone\n  --sillyp2p\n  --simbot\n  --Sodinokibi\n  --sytro\n  --upatre\n  --wabot\n  --RemcosRAT\n\nGlobal parameter:\n  --verbose_classifier  Verbose output during train/classification (default : False)\n  --train               Launch training process, else classify/detect new sample with previously computed model\n  --nthread NTHREAD     Number of thread used (default: max)\n  binaries              Name of the folder containing binary'signatures to analyze (Default: output/save-SCDG/, only that for ToolChain)\n</code></pre></p>"},{"location":"sema_classifier.html#example","title":"Example","text":"<p>This will train models for input dataset</p> <pre><code>python3 SemaClassifier.py --train test-set/autoit\n</code></pre> <p>This will classify input dataset based on previously computed models</p> <pre><code>python3 SemaClassifier.py test-set/autoit\n</code></pre>"},{"location":"sema_classifier.html#tests","title":"Tests","text":"<p>To run the classifier tests, run inside the docker container: <pre><code>python3 classifier_tests.py configs/config_test.ini\n</code></pre></p>"},{"location":"sema_scdg.html","title":"\ud83d\udcc3 System Call Dependy Graph extractor (<code>SemaSCDG</code>)","text":"<p>This repository contains a first version of a SCDG extractor. During symbolic analysis of a binary, all system calls and their arguments found are recorded. After some stop conditions for symbolic analysis, a graph is build as follow : Nodes are systems Calls recorded, edges show that some arguments are shared between calls.</p>"},{"location":"sema_scdg.html#how-to-use","title":"How to use ?","text":"<p>First run the SCDG container with volumes like this : <pre><code>docker run --rm --name=\"sema-scdg\" -v ${PWD}/OutputFolder:/sema-scdg/application/database/SCDG -v ${PWD}/ConfigFolder:/sema-scdg/application/configs -v ${PWD}/InputFolder:/sema-scdg/application/database/Binaries -p 5001:5001 -it sema-scdg bash\n</code></pre> In this command:</p> <ul> <li>The first volume corresponds to the output folder where the results will be put.</li> <li>The second volume corresponds to the folder containing the configuration files that will be passed to the docker.</li> <li>The third matches the folder containing the binaries that are going to be passed to the container.</li> </ul> <p>Example taking the files already provided, being inside the sema_toolchain folder, run : <pre><code>docker run --rm --name=\"sema-scdg\" -v ${PWD}/database/SCDG:/sema-scdg/application/database/SCDG -v ${PWD}/sema_scdg/application/configs:/sema-scdg/application/configs -v ${PWD}/database/Binaries:/sema-scdg/application/database/Binaries -p 5001:5001 -it sema-scdg bash\n</code></pre></p> <p>If you want to be able to modify the code when the container is running, use <pre><code>docker run --rm --name=\"sema-scdg\" -v ${PWD}/database:/sema-scdg/application/database -v ${PWD}/sema_scdg/application:/sema-scdg/application -p 5001:5001 -it sema-scdg bash\n</code></pre></p> <p>To run experiments, run inside the container : <pre><code>python3 SemaSCDG.py configs/config.ini\n</code></pre> Or if you want to use pypy3: <pre><code>pypy3 SemaSCDG.py configs/config.ini\n</code></pre></p>"},{"location":"sema_scdg.html#configuration-files","title":"Configuration files","text":"<p>The parameters are put in a configuration file : <code>configs/config.ini</code>. Feel free to modify it or create new configuration files to run different experiments.</p> <p>The output of the SCDG are put into <code>database/SCDG/runs/</code> by default. If you are not using volumes and want to save some runs from the container to your host machine, use : <pre><code>make save-scdg-runs ARGS=PATH\n</code></pre></p>"},{"location":"sema_scdg.html#parameters-description","title":"Parameters description","text":"<p>SCDG module arguments</p> <pre><code>expl_method:\n  DFS                 Depth First Search\n  BFS                 Breadth First Search\n  CDFS                Coverage Depth-First Search Strategy (Default)\n  CBFS                Coverage Breadth First Search\n\ngraph_output:\n  gs                  .GS format\n  json                .JSON format\n  EMPTY               if left empty then build on all available format\n\npacking_type:\n  symbion             Concolic unpacking method (linux | windows [in progress])\n  unipacker           Emulation unpacking method (windows only)\n\nSCDG exploration techniques parameters:\n  jump_it              Number of iteration allowed for a symbolic loop (default : 3)\n  max_in_pause_stach   Number of states allowed in pause stash (default : 200)\n  max_step             Maximum number of steps allowed for a state (default : 50 000)\n  max_end_state        Number of deadended state required to stop (default : 600)\n  max_simul_state      Number of simultaneous states we explore with simulation manager (default : 5)\n\nBinary parameters:\n  n_args                  Number of symbolic arguments given to the binary (default : 0)\n  loop_counter_concrete   How many times a loop can loop (default : 10240)\n  count_block_enable      Enable the count of visited blocks and instructions\n  sim_file                Create SimFile\n  entry_addr              Entry address of the binary\n\nSCDG creation parameter:\n  min_size             Minimum size required for a trace to be used in SCDG (default : 3)\n  disjoint_union       Do we merge traces or use disjoint union ? (default : merge)\n  not_comp_args        Do we compare arguments to add new nodes when building graph ? (default : comparison enabled)\n  three_edges          Do we use the three-edges strategy ? (default : False)\n  not_ignore_zero      Do we ignore zero when building graph ? (default : Discard zero)\n  keep_inter_SCDG      Keep intermediate SCDG in file (default : False)\n  eval_time            TODO\n\nGlobal parameter:\n  concrete_target_is_local      Use a local GDB server instead of using cuckoo (default : False)\n  print_syscall                 Print the syscall found\n  csv_file                      Name of the csv to save the experiment data\n  plugin_enable                 Enable the plugins set to true in the config.ini file\n  approximate                   Symbolic approximation\n  is_packed                     Is the binary packed ? (default : False, not yet supported)\n  timeout                       Timeout in seconds before ending extraction (default : 600)\n  string_resolve                Do we try to resolv references of string (default : True)\n  log_level_sema                Level of log of sema, can be INFO, DEBUG, WARNING, ERROR (default : INFO)\n  log_level_angr                Level of log of angr, can be INFO, DEBUG, WARNING, ERROR (default : ERROR)\n  log_level_claripy             Level of log of claripy, can be INFO, DEBUG, WARNING, ERROR (default : ERROR)\n  family                        Family of the malware (default : Unknown)\n  exp_dir                       Name of the directory to save SCDG extracted (default : Default)\n  binary_path                   Relative path to the binary or directory (has to be in the database folder)\n  fast_main                     Jump directly into the main function\n\nPlugins:\n  plugin_env_var          Enable the env_var plugin\n  plugin_locale_info      Enable the locale_info plugin\n  plugin_resources        Enable the resources plugin\n  plugin_widechar         Enable the widechar plugin\n  plugin_registry        Enable the registry plugin\n  plugin_atom             Enable the atom plugin\n  plugin_thread           Enable the thread plugin\n  plugin_track_command    Enable the track_command plugin\n  plugin_ioc_report       Enable the ioc_report plugin\n  plugin_hooks            Enable the hooks plugin\n</code></pre> <p>The binary path has to be a relative path to a binary beeing into the <code>database</code> directory</p> <p>To know the details of the angr options see Angr documentation</p> <p>You also have a script <code>MergeGspan.py</code> in <code>sema_scdg/application/helper</code> which could merge all <code>.gs</code> from a directory into only one file.</p>"},{"location":"sema_scdg.html#run-multiple-experiments-automatically","title":"Run multiple experiments automatically","text":"<p>If you wish to run multiple experiments with different configuration files, the script <code>multiple_experiments.sh</code> is available and can be used inside the scdg container: <pre><code># To show usage\n./multiple_experiments.sh -h\n\n# Run example\n./multiple_experiments.sh -m python3 -c configs/config1 configs/config2\n</code></pre></p>"},{"location":"sema_scdg.html#tests","title":"Tests","text":"<p>To run the test, inside the docker container : <pre><code>python3 scdg_tests.py test_data/config_test.ini\n</code></pre></p>"},{"location":"sema_scdg.html#tutorial","title":"Tutorial","text":"<p>There is a jupyter notebook providing a tutorial on how to use the scdg. To launch it, inside the docker, run <pre><code>jupyter notebook --ip=0.0.0.0 --port=5001 --no-browser --allow-root --IdentityProvider.token=''\n</code></pre> and visit <code>http://127.0.0.1:5001/tree</code> on your browser. Go to <code>/Tutorial</code> and open the jupyter notebook.</p>"},{"location":"sema_web_app.html","title":"\ud83d\udcc3 Sema web application (<code>SemaWebApp</code>)","text":"<p>This module contains a web application allowing to manage runs on SemaSCDG and SemaClassifier by entering parameters value on a graphical interface. The web application is built with Flask and communicates with the docker containers of SemaSCDG and SemaClassifier via a REST API.</p>"},{"location":"sema_web_app.html#how-to-use","title":"How to use ?","text":"<p>First launch the containers : <pre><code>make run-toolchain\n</code></pre></p> <p>This will start the SCDG, the classifier, and the web app services. Wait for the containers to be up, then visit 127.0.0.1:5000 on your browser</p> <p>For details on how SemaSCDG and SemaClassifier work, check their README :</p> <ul> <li> <p>SCDG README : </p> </li> <li> <p>Classifier README : </p> </li> </ul>"},{"location":"reference/SUMMARY.html","title":"SUMMARY","text":"<ul> <li>sema_toolchain<ul> <li>sema_classifier<ul> <li>application<ul> <li>ClassifierApp</li> <li>SemaClassifier</li> <li>classifier<ul> <li>Classifier</li> <li>DL<ul> <li>DLClassifier</li> <li>DLDataset</li> <li>DLTrainerClassifier</li> </ul> </li> <li>GM<ul> <li>GSpanClassifier</li> </ul> </li> <li>SVM<ul> <li>SVMClassifier</li> <li>SVMInriaClassifier</li> <li>SVMWLClassifier</li> <li>dico</li> </ul> </li> <li>saved_model<ul> <li>PluginAtom</li> </ul> </li> </ul> </li> <li>classifier_tests</li> <li>clogging<ul> <li>CustomFormatter</li> <li>LogBookFormatter</li> </ul> </li> <li>helper<ul> <li>ArgumentParserClassifier</li> </ul> </li> </ul> </li> </ul> </li> <li>sema_cli</li> <li>sema_scdg<ul> <li>application<ul> <li>SCDGApp</li> <li>SemaSCDG</li> <li>clogging<ul> <li>CustomFormatter</li> <li>DataManager</li> <li>LogBookFormatter</li> </ul> </li> <li>explorer<ul> <li>SemaExplorer</li> <li>SemaExplorerBFS</li> <li>SemaExplorerCBFS</li> <li>SemaExplorerCDFS</li> <li>SemaExplorerDFS</li> <li>SemaExplorerManager</li> </ul> </li> <li>helper<ul> <li>ArgumentParserSCDG</li> <li>Debugger</li> <li>Graph</li> <li>GraphBuilder</li> <li>MergeGspan</li> <li>PlotResults</li> <li>SyscallToSCDG</li> </ul> </li> <li>plugin<ul> <li>PluginAtom</li> <li>PluginCommands</li> <li>PluginEnvVar</li> <li>PluginEvasion</li> <li>PluginHooks</li> <li>PluginIoC</li> <li>PluginLocaleInfo</li> <li>PluginManager</li> <li>PluginPacking</li> <li>PluginRegistry</li> <li>PluginResources</li> <li>PluginThread</li> <li>PluginWideChar</li> <li>win32</li> </ul> </li> <li>procedures<ul> <li>CustomSimProcedure</li> <li>DDLLoader</li> <li>LinuxSimProcedure</li> <li>LinuxTableLoader</li> <li>WindowsSimProcedure</li> <li>calls</li> <li>linux<ul> <li>custom_package<ul> <li>chdir</li> <li>clock</li> <li>clock_gettime</li> <li>clone</li> <li>connect</li> <li>exit</li> <li>fstat</li> <li>futex</li> <li>gen_simproc0</li> <li>gen_simproc1</li> <li>gen_simproc1v</li> <li>gen_simproc2</li> <li>gen_simproc2v</li> <li>gen_simproc3</li> <li>gen_simproc3v</li> <li>gen_simproc4</li> <li>gen_simproc4v</li> <li>gen_simproc5</li> <li>gen_simproc5v</li> <li>gen_simproc6</li> <li>gen_simproc6v</li> <li>gen_simproc7</li> <li>getgid</li> <li>getpwuid</li> <li>getsockname</li> <li>gettimeofday</li> <li>getuid</li> <li>nanosleep</li> <li>open</li> <li>openat</li> <li>prctl</li> <li>read</li> <li>readdir</li> <li>readlink</li> <li>readv</li> <li>rt_sigaction</li> <li>rt_sigprocmask</li> <li>select</li> <li>sendto</li> <li>set_thread_area</li> <li>setsid</li> <li>sigprocmask</li> <li>socket</li> <li>socketcall</li> <li>socketpair</li> <li>stat</li> <li>time</li> <li>times</li> <li>unlink</li> <li>write</li> <li>writev</li> </ul> </li> </ul> </li> <li>windows<ul> <li>custom_hook<ul> <li>AddAtomA</li> <li>CPUIDHook</li> <li>CldHook</li> <li>ClearStackHook</li> <li>Copy3Hook</li> <li>CopyHook</li> <li>Crc32Hook</li> <li>Crc32Hook2</li> <li>FindAtomA</li> <li>FindStartHook</li> <li>LAB_00cafb11</li> <li>MagicRATForceHook</li> <li>MagicRATSSE3Hook</li> <li>MagicRATTrapHook</li> <li>MagicRATTrapHook2</li> <li>MagicRATTrapHook3</li> <li>MagicRATTrapHook4</li> <li>MurmurHash2Hook</li> <li>MurmurHashHook</li> <li>RepMovsbHook</li> <li>RepMovsdHook</li> <li>RepStosdHook</li> <li>RewritingHook</li> <li>StdHook</li> <li>WeedLeaf2Hook</li> <li>WeedLeaf3Hook</li> <li>WeedLeafHook</li> <li>memcpy</li> </ul> </li> <li>custom_package<ul> <li>??2@YAPAXI@Z</li> <li>AddVectoredExceptionHandler</li> <li>AdjustTokenPrivileges</li> <li>AfxWinMain</li> <li>BlockInput</li> <li>CheckRemoteDebuggerPresent</li> <li>CloseHandle</li> <li>CoCreateInstance</li> <li>CommandLineToArgvW</li> <li>CopyFileA</li> <li>CreateEventA</li> <li>CreateEventW</li> <li>CreateFileA</li> <li>CreateFileMappingW</li> <li>CreateFileW</li> <li>CreateMutexA</li> <li>CreateProcessA</li> <li>CreateProcessW</li> <li>CreateRemoteThread</li> <li>CreateSemaphoreA</li> <li>CreateSemaphoreW</li> <li>CreateServiceA</li> <li>CreateThread</li> <li>CreateToolhelp32Snapshot</li> <li>CreateWindowExA</li> <li>CryptAcquireContextW</li> <li>CryptCreateHash</li> <li>CryptDestroyHash</li> <li>CryptGetHashParam</li> <li>CryptHashData</li> <li>DecodePointer</li> <li>DeleteFileW</li> <li>DispatchMessageA</li> <li>DuplicateHandle</li> <li>EncodePointer</li> <li>EnumCalendarInfoW</li> <li>ExpandEnvironmentStringsW</li> <li>FileTimeToSystemTime</li> <li>FindClose</li> <li>FindFirstFile</li> <li>FindFirstFileA</li> <li>FindFirstFileW</li> <li>FindNextFileA</li> <li>FindNextFileW</li> <li>FindResourceA</li> <li>FindResourceW</li> <li>FindWindowW</li> <li>FlsAlloc</li> <li>FlsFree</li> <li>FlsGetValue</li> <li>FlsSetValue</li> <li>FlushFileBuffers</li> <li>FormatMessageA</li> <li>FormatMessageW</li> <li>FreeLibrary</li> <li>GetACP</li> <li>GetAdaptersInfo</li> <li>GetBinaryTypeW</li> <li>GetCPInfo</li> <li>GetCommandLineA</li> <li>GetCommandLineW</li> <li>GetComputerNameA</li> <li>GetComputerNameW</li> <li>GetConsoleWindow</li> <li>GetCurrentDirectoryW</li> <li>GetCurrentProcess</li> <li>GetCurrentProcessId</li> <li>GetCurrentThreadId</li> <li>GetDriveTypeA</li> <li>GetDriveTypeW</li> <li>GetEnvironmentStrings</li> <li>GetEnvironmentStringsW</li> <li>GetEnvironmentVariableA</li> <li>GetEnvironmentVariableW</li> <li>GetFileAttributesA</li> <li>GetFileAttributesExW</li> <li>GetFileInformationByHandle</li> <li>GetFileSize</li> <li>GetFileType</li> <li>GetFileVersionInfoSizeW</li> <li>GetFileVersionInfoW</li> <li>GetFullPathNameW</li> <li>GetIfTable</li> <li>GetKeyboardType</li> <li>GetLastError</li> <li>GetLocaleInfoA</li> <li>GetLocaleInfoW</li> <li>GetLogicalDrives</li> <li>GetLongPathNameW</li> <li>GetMessageA</li> <li>GetModuleFileNameA</li> <li>GetModuleFileNameExA</li> <li>GetModuleFileNameExW</li> <li>GetModuleFileNameW</li> <li>GetModuleHandleA</li> <li>GetModuleHandleExA</li> <li>GetModuleHandleExW</li> <li>GetModuleHandleW</li> <li>GetNativeSystemInfo</li> <li>GetProcAddress</li> <li>GetSecurityInfo</li> <li>GetShortPathNameA</li> <li>GetStartupInfoA</li> <li>GetStringTypeA</li> <li>GetStringTypeW</li> <li>GetSystemDirectoryA</li> <li>GetSystemDirectoryW</li> <li>GetSystemInfo</li> <li>GetSystemTimeAsFileTime</li> <li>GetTempFileNameA</li> <li>GetTempFileNameW</li> <li>GetThreadContext</li> <li>GetThreadLocaleW</li> <li>GetThreadPriority</li> <li>GetThreadUILanguage</li> <li>GetTickCount</li> <li>GetTickCount64</li> <li>GetTokenInformation</li> <li>GetUserDefaultLCID</li> <li>GetUserDefaultUILanguage</li> <li>GetUserNameA</li> <li>GetUserNameW</li> <li>GetVersion</li> <li>GetVersionExA</li> <li>GetWindowsDirectoryW</li> <li>GlobalAddAtomA</li> <li>Handler</li> <li>HeapAlloc</li> <li>HeapReAlloc</li> <li>HeapSetInformation</li> <li>HeapSize</li> <li>HttpEndRequestA</li> <li>HttpOpenRequestA</li> <li>HttpOpenRequestW</li> <li>HttpQueryInfoW</li> <li>HttpSendRequestA</li> <li>HttpSendRequestW</li> <li>ImageList_AddMasked</li> <li>InitCommonControls</li> <li>InitCommonControlsEx</li> <li>InitializeCriticalSection</li> <li>InitializeCriticalSectionEx</li> <li>InterlockedDecrement</li> <li>InterlockedExchange</li> <li>InterlockedIncrement</li> <li>InternetCloseHandle</li> <li>InternetConnectA</li> <li>InternetConnectW</li> <li>InternetOpenA</li> <li>InternetOpenUrlA</li> <li>InternetQueryOptionW</li> <li>InternetReadFile</li> <li>InternetSetOptionW</li> <li>IsDebuggerPresent</li> <li>IsValidLocale</li> <li>IsWow64Process</li> <li>KiUserExceptionDispatcher</li> <li>LCMapStringA</li> <li>LCMapStringW</li> <li>LoadLibraryA</li> <li>LoadLibraryExA</li> <li>LoadLibraryExW</li> <li>LoadLibraryW</li> <li>LoadResource</li> <li>LoadStringA</li> <li>LoadStringW</li> <li>LockResource</li> <li>LookupPrivilegeValueA</li> <li>MapViewOfFile</li> <li>MoveFileExW</li> <li>MultiByteToWideChar</li> <li>Netbios</li> <li>NtGetContextThread</li> <li>NtQueryInformationProcess</li> <li>NtQuerySystemInformation</li> <li>NtReadVirtualMemory</li> <li>NtResumeThread</li> <li>NtSetContextThread</li> <li>NtTerminateProcess</li> <li>NtUnmapViewOfSection</li> <li>NtWriteVirtualMemory</li> <li>OleInitialize</li> <li>OpenProcess</li> <li>OpenProcessToken</li> <li>OpenSCManagerA</li> <li>OpenServiceA</li> <li>OutputDebugStringW</li> <li>PathFileExistsA</li> <li>Process32First</li> <li>Process32FirstW</li> <li>Process32Next</li> <li>Process32NextW</li> <li>QueryPerformanceCounter</li> <li>QueryPerformanceFrequency</li> <li>RaiseException</li> <li>ReadFile</li> <li>RegCloseKey</li> <li>RegCreateKeyExA</li> <li>RegCreateKeyExW</li> <li>RegOpenKeyExA</li> <li>RegOpenKeyExW</li> <li>RegQueryValueExA</li> <li>RegQueryValueExW</li> <li>RegSetKeyValueW</li> <li>RegSetValueExA</li> <li>RegSetValueExW</li> <li>RegisterClassA</li> <li>RegisterClassExA</li> <li>RegisterClassW</li> <li>ReleaseSemaphore</li> <li>ResumeThread</li> <li>RtlAddFunctionTable</li> <li>RtlCompareUnicodeString</li> <li>RtlGetNtVersionNumbers</li> <li>RtlGetVersion</li> <li>RtlMoveMemory</li> <li>SHBrowseForFolder</li> <li>SHGetFolderPathW</li> <li>SHGetPathFromIDList</li> <li>SHGetSpecialFolderPathA</li> <li>SHGetSpecialFolderPathW</li> <li>SetEndOfFile</li> <li>SetErrorMode</li> <li>SetEvent</li> <li>SetFilePointer</li> <li>SetFilePointerEx</li> <li>SetLastError</li> <li>SetLocaleInfoW</li> <li>SetSecurityInfo</li> <li>SetThreadLocale</li> <li>SetThreadPriority</li> <li>SetUnhandledExceptionFilter</li> <li>ShellExecuteExW</li> <li>ShellExecuteW</li> <li>ShellMessageBoxA</li> <li>ShellMessageBoxW</li> <li>SizeofResource</li> <li>StartServiceA</li> <li>StartServiceCtrlDispatcherA</li> <li>SysAllocString</li> <li>SysAllocStringLen</li> <li>SysFreeString</li> <li>TerminateProcess</li> <li>ThunRTMain</li> <li>TlsAlloc</li> <li>TlsFree</li> <li>TlsGetValue</li> <li>TlsSetValue</li> <li>URLDownloadToFileA</li> <li>URLDownloadToFileW</li> <li>VarBoolFromStr</li> <li>VarBstrFromBool</li> <li>VarBstrFromCy</li> <li>VarBstrFromDate</li> <li>VerQueryValueW</li> <li>VirtualAlloc</li> <li>VirtualAllocEx</li> <li>VirtualFree</li> <li>VirtualProtect</li> <li>VirtualQuery</li> <li>WNetGetConnectionA</li> <li>WNetGetConnectionW</li> <li>WSAConnect</li> <li>WaitForMultipleObjects</li> <li>WaitForSingleObject</li> <li>WaitForSingleObjectEx</li> <li>WideCharToMultiByte</li> <li>WinExec</li> <li>WinHttpAddRequestHeaders</li> <li>WriteFile</li> <li>WritePrivateProfileStringA</li> <li>WriteProcessMemory</li> <li>__getmainargs</li> <li>__iob_func</li> <li>__set_app_type</li> <li>_endthreadex</li> <li>_get_output_format</li> <li>_getenv_s</li> <li>_initterm</li> <li>_ismbblead</li> <li>_strdup</li> <li>_waccess</li> <li>_wchmod</li> <li>_wgetenv_s</li> <li>atoi</li> <li>free</li> <li>ftell</li> <li>getaddrinfo</li> <li>getenv</li> <li>gethostbyname</li> <li>getsockname</li> <li>htonl</li> <li>htons</li> <li>inet_addr</li> <li>inet_ntoa</li> <li>lstrcatA</li> <li>lstrcatW</li> <li>lstrcmpA</li> <li>lstrcmpW</li> <li>lstrcpyA</li> <li>lstrcpyW</li> <li>lstrcpynA</li> <li>lstrcpynW</li> <li>lstrlenA</li> <li>lstrlenW</li> <li>malloc</li> <li>memcmp</li> <li>memcpy</li> <li>memmove</li> <li>memset</li> <li>ntohs</li> <li>rand</li> <li>realloc</li> <li>recv</li> <li>recvcc</li> <li>select</li> <li>send</li> <li>sendcc</li> <li>setsockopt</li> <li>socket</li> <li>sprintf</li> <li>srand</li> <li>strcat</li> <li>strchr</li> <li>strncmp</li> <li>strrchr</li> <li>strstr</li> <li>test</li> <li>wcslen</li> <li>wsprintfA</li> <li>wsprintfW</li> </ul> </li> </ul> </li> </ul> </li> <li>sandboxes<ul> <li>CuckooInterface</li> <li>SandBoxInterface</li> <li>main</li> <li>vm<ul> <li>VMInterface</li> <li>kvm<ul> <li>KVMInterface</li> <li>main</li> </ul> </li> <li>virtualbox<ul> <li>VirtualBoxInterface</li> </ul> </li> </ul> </li> </ul> </li> <li>scdg_tests</li> </ul> </li> </ul> </li> <li>sema_web_app<ul> <li>application<ul> <li>SemaServer</li> </ul> </li> </ul> </li> </ul> </li> </ul>"},{"location":"reference/sema_toolchain/index.html","title":"Index","text":""},{"location":"reference/sema_toolchain/index.html#sema_toolchain","title":"sema_toolchain","text":""},{"location":"reference/sema_toolchain/sema_cli.html","title":"sema_cli","text":""},{"location":"reference/sema_toolchain/sema_cli.html#sema_toolchain.sema_cli","title":"sema_cli","text":""},{"location":"reference/sema_toolchain/sema_classifier/index.html","title":"Index","text":""},{"location":"reference/sema_toolchain/sema_classifier/index.html#sema_toolchain.sema_classifier","title":"sema_classifier","text":""},{"location":"reference/sema_toolchain/sema_classifier/application/index.html","title":"Index","text":""},{"location":"reference/sema_toolchain/sema_classifier/application/index.html#sema_toolchain.sema_classifier.application","title":"application","text":""},{"location":"reference/sema_toolchain/sema_classifier/application/ClassifierApp.html","title":"ClassifierApp","text":""},{"location":"reference/sema_toolchain/sema_classifier/application/ClassifierApp.html#sema_toolchain.sema_classifier.application.ClassifierApp","title":"ClassifierApp","text":""},{"location":"reference/sema_toolchain/sema_classifier/application/SemaClassifier.html","title":"SemaClassifier","text":""},{"location":"reference/sema_toolchain/sema_classifier/application/SemaClassifier.html#sema_toolchain.sema_classifier.application.SemaClassifier","title":"SemaClassifier","text":""},{"location":"reference/sema_toolchain/sema_classifier/application/classifier_tests.html","title":"classifier_tests","text":""},{"location":"reference/sema_toolchain/sema_classifier/application/classifier_tests.html#sema_toolchain.sema_classifier.application.classifier_tests","title":"classifier_tests","text":""},{"location":"reference/sema_toolchain/sema_classifier/application/classifier/index.html","title":"Index","text":""},{"location":"reference/sema_toolchain/sema_classifier/application/classifier/index.html#sema_toolchain.sema_classifier.application.classifier","title":"classifier","text":""},{"location":"reference/sema_toolchain/sema_classifier/application/classifier/Classifier.html","title":"Classifier","text":""},{"location":"reference/sema_toolchain/sema_classifier/application/classifier/Classifier.html#sema_toolchain.sema_classifier.application.classifier.Classifier","title":"Classifier","text":""},{"location":"reference/sema_toolchain/sema_classifier/application/classifier/Classifier.html#sema_toolchain.sema_classifier.application.classifier.Classifier.Classifier","title":"Classifier","text":"<pre><code>Classifier(path, name, threshold)\n</code></pre> Source code in <code>sema_toolchain/sema_classifier/application/classifier/Classifier.py</code> <pre><code>def __init__(self,path, name, threshold):\n    ch = logging.StreamHandler()\n    ch.setLevel(logging.INFO)\n    ch.setFormatter(CustomFormatter())\n    self.log = logging.getLogger(\"Classifier\")\n    self.log.setLevel(logging.INFO)\n    self.log.addHandler(ch)\n    self.log.propagate = False\n\n    self.name = name\n    self.threshold = threshold\n    self.gspan_path = \"./submodules/SEMA-quickspan/build/\" #path.replace(\"sema_classifier\",\"submodules/SEMA-quickspan/build/\")\n    self.dico_precomputed = []\n    self.dataset_len = 0\n\n    self.train_dataset = None\n    self.val_dataset = None\n    self.test_dataset = None\n    self.stat_dataset = None\n\n    self.fscore = None\n    self.accuracy = None\n    self.precision = None\n    self.recall = None\n\n    self.loss = None\n    self.tpr = None\n    self.balanced_accuracy = None\n</code></pre>"},{"location":"reference/sema_toolchain/sema_classifier/application/classifier/Classifier.html#sema_toolchain.sema_classifier.application.classifier.Classifier.Classifier.classify","title":"classify","text":"<pre><code>classify(path=None)\n</code></pre> <p>Sort by familly</p> Source code in <code>sema_toolchain/sema_classifier/application/classifier/Classifier.py</code> <pre><code>def classify(self,path=None):\n    \"\"\"\n    Sort by familly\n    \"\"\"\n    pass\n</code></pre>"},{"location":"reference/sema_toolchain/sema_classifier/application/classifier/Classifier.html#sema_toolchain.sema_classifier.application.classifier.Classifier.Classifier.detection","title":"detection","text":"<pre><code>detection(path=None)\n</code></pre> <p>Malware vs cleanware</p> Source code in <code>sema_toolchain/sema_classifier/application/classifier/Classifier.py</code> <pre><code>def detection(self,path=None):\n    \"\"\"\n    Malware vs cleanware\n    \"\"\"\n    pass\n</code></pre>"},{"location":"reference/sema_toolchain/sema_classifier/application/classifier/DL/index.html","title":"Index","text":""},{"location":"reference/sema_toolchain/sema_classifier/application/classifier/DL/index.html#sema_toolchain.sema_classifier.application.classifier.DL","title":"DL","text":""},{"location":"reference/sema_toolchain/sema_classifier/application/classifier/DL/DLClassifier.html","title":"DLClassifier","text":""},{"location":"reference/sema_toolchain/sema_classifier/application/classifier/DL/DLClassifier.html#sema_toolchain.sema_classifier.application.classifier.DL.DLClassifier","title":"DLClassifier","text":""},{"location":"reference/sema_toolchain/sema_classifier/application/classifier/DL/DLDataset.html","title":"DLDataset","text":""},{"location":"reference/sema_toolchain/sema_classifier/application/classifier/DL/DLDataset.html#sema_toolchain.sema_classifier.application.classifier.DL.DLDataset","title":"DLDataset","text":""},{"location":"reference/sema_toolchain/sema_classifier/application/classifier/DL/DLTrainerClassifier.html","title":"DLTrainerClassifier","text":""},{"location":"reference/sema_toolchain/sema_classifier/application/classifier/DL/DLTrainerClassifier.html#sema_toolchain.sema_classifier.application.classifier.DL.DLTrainerClassifier","title":"DLTrainerClassifier","text":""},{"location":"reference/sema_toolchain/sema_classifier/application/classifier/DL/DLTrainerClassifier.html#sema_toolchain.sema_classifier.application.classifier.DL.DLTrainerClassifier.DLTrainerClassifier","title":"DLTrainerClassifier","text":"<pre><code>DLTrainerClassifier(path, shared_type=0, epoch=5, data_scale=0.9, vector_size=4, batch_size=1)\n</code></pre> <p>               Bases: <code>Classifier</code></p> Source code in <code>sema_toolchain/sema_classifier/application/classifier/DL/DLTrainerClassifier.py</code> <pre><code>def __init__(self, path,\n\t\t\tshared_type=0, epoch=5, data_scale=0.9,\n\t\t\tvector_size=4, batch_size=1):\n\n\tsuper().__init__(path,'DLTrainerClassifier', 0)\n\tch = logging.StreamHandler()\n\tch.setLevel(logging.INFO)\n\tch.setFormatter(CustomFormatter())\n\tself.log = logging.getLogger(\"DLTrainerClassifier\")\n\tself.log.setLevel(logging.INFO)\n\tself.log.addHandler(ch)\n\tself.log.propagate = False\n\n\tself.vector_size = vector_size\n\tself.data_train = None\n\tself.data_scale = data_scale\n\n\tself.n_features = 0\n\tself.embedding_dim = 0\n\tself.classe = 0\n\tself.n_epochs = epoch\n\tself.batch_size = batch_size\n\n\tself.families = []\n\n\tself.y_true = []\n\tself.y_pred = []\n\tself.labels = []\n\tself.TP = 0\n\tself.TPR = 0\n\tself.loss = 0\n\n\tself.data_load = False\n\tself._model = None\n\tself.shared_type = shared_type\n\n\tself.apiname = \"APInameseq.txt\" # TODO more customization\n\tinput_dir_name = os.path.basename(os.path.normpath(path))\n\tself.fname   = path + '/mapping_' + input_dir_name + '.txt'\n\tself.apipath = self.apiname #os.path.join(dir_path, apiname)\n\tself.mappath = self.fname   #os.path.join(dir_path, fname)\n</code></pre>"},{"location":"reference/sema_toolchain/sema_classifier/application/classifier/DL/DLTrainerClassifier.html#sema_toolchain.sema_classifier.application.classifier.DL.DLTrainerClassifier.DLTrainerClassifier.detection","title":"detection","text":"<pre><code>detection(path=None)\n</code></pre> <p>Malware vs cleanware TODO</p> Source code in <code>sema_toolchain/sema_classifier/application/classifier/DL/DLTrainerClassifier.py</code> <pre><code>def detection(self, path=None):\n\t\"\"\"\n\tMalware vs cleanware\n\tTODO\n\t\"\"\"\n\tpass\n</code></pre>"},{"location":"reference/sema_toolchain/sema_classifier/application/classifier/GM/index.html","title":"Index","text":""},{"location":"reference/sema_toolchain/sema_classifier/application/classifier/GM/index.html#sema_toolchain.sema_classifier.application.classifier.GM","title":"GM","text":""},{"location":"reference/sema_toolchain/sema_classifier/application/classifier/GM/GSpanClassifier.html","title":"GSpanClassifier","text":""},{"location":"reference/sema_toolchain/sema_classifier/application/classifier/GM/GSpanClassifier.html#sema_toolchain.sema_classifier.application.classifier.GM.GSpanClassifier","title":"GSpanClassifier","text":""},{"location":"reference/sema_toolchain/sema_classifier/application/classifier/SVM/index.html","title":"Index","text":""},{"location":"reference/sema_toolchain/sema_classifier/application/classifier/SVM/index.html#sema_toolchain.sema_classifier.application.classifier.SVM","title":"SVM","text":""},{"location":"reference/sema_toolchain/sema_classifier/application/classifier/SVM/SVMClassifier.html","title":"SVMClassifier","text":""},{"location":"reference/sema_toolchain/sema_classifier/application/classifier/SVM/SVMClassifier.html#sema_toolchain.sema_classifier.application.classifier.SVM.SVMClassifier","title":"SVMClassifier","text":""},{"location":"reference/sema_toolchain/sema_classifier/application/classifier/SVM/SVMInriaClassifier.html","title":"SVMInriaClassifier","text":""},{"location":"reference/sema_toolchain/sema_classifier/application/classifier/SVM/SVMInriaClassifier.html#sema_toolchain.sema_classifier.application.classifier.SVM.SVMInriaClassifier","title":"SVMInriaClassifier","text":""},{"location":"reference/sema_toolchain/sema_classifier/application/classifier/SVM/SVMWLClassifier.html","title":"SVMWLClassifier","text":""},{"location":"reference/sema_toolchain/sema_classifier/application/classifier/SVM/SVMWLClassifier.html#sema_toolchain.sema_classifier.application.classifier.SVM.SVMWLClassifier","title":"SVMWLClassifier","text":""},{"location":"reference/sema_toolchain/sema_classifier/application/classifier/SVM/dico/index.html","title":"dico","text":""},{"location":"reference/sema_toolchain/sema_classifier/application/classifier/SVM/dico/index.html#sema_toolchain.sema_classifier.application.classifier.SVM.dico","title":"dico","text":""},{"location":"reference/sema_toolchain/sema_classifier/application/classifier/saved_model/index.html","title":"Index","text":""},{"location":"reference/sema_toolchain/sema_classifier/application/classifier/saved_model/index.html#sema_toolchain.sema_classifier.application.classifier.saved_model","title":"saved_model","text":""},{"location":"reference/sema_toolchain/sema_classifier/application/classifier/saved_model/PluginAtom.html","title":"PluginAtom","text":""},{"location":"reference/sema_toolchain/sema_classifier/application/classifier/saved_model/PluginAtom.html#sema_toolchain.sema_classifier.application.classifier.saved_model.PluginAtom","title":"PluginAtom","text":""},{"location":"reference/sema_toolchain/sema_classifier/application/clogging/index.html","title":"Index","text":""},{"location":"reference/sema_toolchain/sema_classifier/application/clogging/index.html#sema_toolchain.sema_classifier.application.clogging","title":"clogging","text":""},{"location":"reference/sema_toolchain/sema_classifier/application/clogging/CustomFormatter.html","title":"CustomFormatter","text":""},{"location":"reference/sema_toolchain/sema_classifier/application/clogging/CustomFormatter.html#sema_toolchain.sema_classifier.application.clogging.CustomFormatter","title":"CustomFormatter","text":""},{"location":"reference/sema_toolchain/sema_classifier/application/clogging/LogBookFormatter.html","title":"LogBookFormatter","text":""},{"location":"reference/sema_toolchain/sema_classifier/application/clogging/LogBookFormatter.html#sema_toolchain.sema_classifier.application.clogging.LogBookFormatter","title":"LogBookFormatter","text":""},{"location":"reference/sema_toolchain/sema_classifier/application/helper/index.html","title":"Index","text":""},{"location":"reference/sema_toolchain/sema_classifier/application/helper/index.html#sema_toolchain.sema_classifier.application.helper","title":"helper","text":""},{"location":"reference/sema_toolchain/sema_classifier/application/helper/ArgumentParserClassifier.html","title":"ArgumentParserClassifier","text":""},{"location":"reference/sema_toolchain/sema_classifier/application/helper/ArgumentParserClassifier.html#sema_toolchain.sema_classifier.application.helper.ArgumentParserClassifier","title":"ArgumentParserClassifier","text":""},{"location":"reference/sema_toolchain/sema_scdg/index.html","title":"Index","text":""},{"location":"reference/sema_toolchain/sema_scdg/index.html#sema_toolchain.sema_scdg","title":"sema_scdg","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/index.html","title":"Index","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/index.html#sema_toolchain.sema_scdg.application","title":"application","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/SCDGApp.html","title":"SCDGApp","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/SCDGApp.html#sema_toolchain.sema_scdg.application.SCDGApp","title":"SCDGApp","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/SemaSCDG.html","title":"SemaSCDG","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/SemaSCDG.html#sema_toolchain.sema_scdg.application.SemaSCDG","title":"SemaSCDG","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/SemaSCDG.html#sema_toolchain.sema_scdg.application.SemaSCDG.SemaSCDG","title":"SemaSCDG","text":"<pre><code>SemaSCDG()\n</code></pre> <p>Class for managing the SemaSCDG application, including setting up configurations, creating angr projects, running exploration, building SCDG graphs, and handling various analysis tasks.</p> <p>This class encapsulates the functionality for initializing the application, setting up configurations, creating angr projects, running exploration, building SCDG graphs, and managing analysis tasks.</p> <p>This method sets up the application environment, including configurations, logging, plugins, and directories for storing results.</p> Source code in <code>sema_toolchain/sema_scdg/application/SemaSCDG.py</code> <pre><code>def __init__(self):\n    \"\"\"\n    Initializes the SemaSCDG application with configurations, log settings, plugins, and other necessary components.\n\n    This method sets up the application environment, including configurations, logging, plugins, and directories for storing results.\n    \"\"\"\n    self.config = config\n    config.read(sys.argv[1])\n    self.get_config_param(self.config)\n    self.log = logger\n    self.log_level_sema = log_level_sema\n    self.log_level_angr = log_level_angr\n    self.log_level_claripy= log_level_claripy\n\n    self.store_data = self.csv_file != \"\"\n    self.scdg_graph = []\n    self.new = {}\n    self.nameFileShort = \"\"\n    self.content = \"\"\n\n    self.plugins = PluginManager()\n    self.packing_manager = self.plugins.get_plugin_packing()\n    self.data_manager = DataManager()\n    self.explorer_manager = SemaExplorerManager()\n\n    self.nb_exps = 0\n    self.current_exps = 0\n    self.current_exp_dir = 0\n\n    self.windows_simproc = WindowsSimProcedure(verbose=True)\n    self.linux_simproc = LinuxSimProcedure(verbose=True)\n    self.syscall_to_scdg_builder = SyscallToSCDG(self.scdg_graph)\n    self.graph_builder = GraphBuilder()\n\n    # Setup the output directory\n    self.log.info(f\"Results will be saved into : {self.mapping_dir}\")\n    with contextlib.suppress(Exception):\n        os.makedirs(self.mapping_dir)\n    self.save_conf()\n</code></pre>"},{"location":"reference/sema_toolchain/sema_scdg/application/SemaSCDG.html#sema_toolchain.sema_scdg.application.SemaSCDG.SemaSCDG.collect_data","title":"collect_data","text":"<pre><code>collect_data(exp_dir, proj, state, simgr, execution_time)\n</code></pre> <p>Collects and processes data after the binary analysis.</p> <p>This function handles the collection of execution time, printing block information, logging syscall details, loading plugin data, tracking commands, and building an IOC (Indicator of Compromise) report.</p> Source code in <code>sema_toolchain/sema_scdg/application/SemaSCDG.py</code> <pre><code>def collect_data(self, exp_dir, proj, state, simgr, execution_time):\n    \"\"\"\n    Collects and processes data after the binary analysis.\n\n    This function handles the collection of execution time, printing block information, logging syscall details, loading plugin data, tracking commands, and building an IOC (Indicator of Compromise) report.\n    \"\"\"\n    self.data_manager.data[\"execution_time\"] = execution_time\n    self.log.info(f\"Total execution time: {execution_time}\")\n\n    if self.count_block_enable:\n        self.data_manager.print_block_info()\n\n    self.log.debug(f\"Syscalls Found:{self.call_sim.syscall_found}\")\n    self.log.debug(f\"Loaded libraries:{proj.loader.requested_names}\")\n\n    if self.plugin_enable:\n        self.data_manager.get_plugin_data(state, simgr, to_store=self.store_data)\n\n    if self.track_command:\n        self.plugins.enable_plugin_commands(self, simgr, self.scdg_graph, exp_dir)\n    if self.ioc_report:\n        self.plugins.enable_plugin_ioc(self, self.scdg_graph, exp_dir)\n</code></pre>"},{"location":"reference/sema_toolchain/sema_scdg/application/SemaSCDG.html#sema_toolchain.sema_scdg.application.SemaSCDG.SemaSCDG.create_binary_init_state","title":"create_binary_init_state","text":"<pre><code>create_binary_init_state(proj)\n</code></pre> <p>Creates the initial state for binary analysis with specified arguments, entry address, and options.</p> <p>This function constructs the initial state for binary analysis, incorporating binary arguments, entry address, angr state options, simulation file handling, heap setup, plugin loading, and constraint enforcement for ASCII characters.</p> Source code in <code>sema_toolchain/sema_scdg/application/SemaSCDG.py</code> <pre><code>def create_binary_init_state(self, proj):\n    \"\"\"\n    Creates the initial state for binary analysis with specified arguments, entry address, and options.\n\n    This function constructs the initial state for binary analysis, incorporating binary arguments, entry address, angr state options, simulation file handling, heap setup, plugin loading, and constraint enforcement for ASCII characters.\n    \"\"\"\n    args_binary = self.get_binary_args()\n\n    entry_addr = self.get_entry_addr(proj)\n\n    options = self.get_angr_state_options()\n\n    state = proj.factory.entry_state(addr=entry_addr, args=args_binary, add_options=options)\n\n    self.handle_simfile(state)\n\n    state.options.discard(\"LAZY_SOLVES\")\n    state.register_plugin(\n        \"heap\",\n        angr.state_plugins.heap.heap_ptmalloc.SimHeapPTMalloc()\n    )\n\n    # Enable plugins set to true in config file\n    if self.plugin_enable:\n        self.plugins.load_plugin(state, self.config)\n\n    self.setup_heap(state, proj)\n\n    # Constraint arguments to ASCII\n    for i in range(1, len(args_binary)):\n       for byte in args_binary[i].chop(8):\n           # state.add_constraints(byte != '\\x00') # null\n           state.add_constraints(byte &gt;= \" \".encode(\"utf8\"))  # '\\x20'\n           state.add_constraints(byte &lt;= \"~\".encode(\"utf8\"))  # '\\x7e'\n\n    return state, args_binary\n</code></pre>"},{"location":"reference/sema_toolchain/sema_scdg/application/SemaSCDG.html#sema_toolchain.sema_scdg.application.SemaSCDG.SemaSCDG.deal_with_packing","title":"deal_with_packing","text":"<pre><code>deal_with_packing()\n</code></pre> <p>Handles different packing scenarios for the binary analysis process.</p> <p>This function determines the appropriate actions based on the packing type and binary path, setting up the analysis environment accordingly.</p> Source code in <code>sema_toolchain/sema_scdg/application/SemaSCDG.py</code> <pre><code>def deal_with_packing(self):\n    \"\"\"\n    Handles different packing scenarios for the binary analysis process.\n\n    This function determines the appropriate actions based on the packing type and binary path, setting up the analysis environment accordingly.\n    \"\"\"\n    if self.is_packed:\n        if self.packing_type == \"symbion\":\n            proj_init = self.init_angr_project(self.binary_path, auto_load_libs=True, support_selfmodifying_code=True)\n            preload, avatar_gdb = self.packing_manager.setup_symbion(self.binary_path, proj_init, self.concrete_target_is_local, self.call_sim, self.log)\n            proj = self.init_angr_project(self.binary_path, auto_load_libs=False, load_debug_info=True, preload_libs=preload, support_selfmodifying_code=True, concrete_target=avatar_gdb)\n\n            for lib in self.call_sim.system_call_table:\n                print(proj.loader.find_all_symbols(lib))\n\n        elif self.packing_type == \"unipacker\":\n            nameFile_unpacked = self.packing_manager.setup_unipacker(self.binary_path, self.nameFileShort, self.log)\n            proj = self.init_angr_project(nameFile_unpacked, auto_load_libs=True, support_selfmodifying_code=True)\n    elif self.binary_path.endswith(\".bin\") or self.binary_path.endswith(\".dmp\"):\n        # TODO : implement function -&gt; see PluginPacking.py\n        self.packing_manager.setup_bin_dmp()\n    else:\n        # default behaviour\n        proj = self.init_angr_project(self.binary_path, support_selfmodifying_code=True, auto_load_libs=True, load_debug_info=True, simos=None)\n    return proj\n</code></pre>"},{"location":"reference/sema_toolchain/sema_scdg/application/SemaSCDG.html#sema_toolchain.sema_scdg.application.SemaSCDG.SemaSCDG.end_run","title":"end_run","text":"<pre><code>end_run()\n</code></pre> <p>Finalizes the binary analysis process by clearing resources and data structures.</p> <p>This function removes handlers, clears simulation data, and resets various components to conclude the analysis.</p> Source code in <code>sema_toolchain/sema_scdg/application/SemaSCDG.py</code> <pre><code>def end_run(self):\n    \"\"\"\n    Finalizes the binary analysis process by clearing resources and data structures.\n\n    This function removes handlers, clears simulation data, and resets various components to conclude the analysis.\n    \"\"\"\n    logging.getLogger().removeHandler(self.fileHandler)\n    with contextlib.suppress(Exception):\n        self.call_sim.clear()\n    self.scdg_graph.clear()\n    self.graph_builder.clear()\n    self.data_manager.clear()\n</code></pre>"},{"location":"reference/sema_toolchain/sema_scdg/application/SemaSCDG.html#sema_toolchain.sema_scdg.application.SemaSCDG.SemaSCDG.get_angr_state_options","title":"get_angr_state_options","text":"<pre><code>get_angr_state_options()\n</code></pre> <p>Retrieves and returns a set of angr state options based on the configuration settings.</p> <p>This function reads the ANGR state options from the configuration, converts them to uppercase strings, and returns them as a set.</p> Source code in <code>sema_toolchain/sema_scdg/application/SemaSCDG.py</code> <pre><code>def get_angr_state_options(self):\n    \"\"\"\n    Retrieves and returns a set of angr state options based on the configuration settings.\n\n    This function reads the ANGR state options from the configuration, converts them to uppercase strings, and returns them as a set.\n    \"\"\"\n    options = set()\n    for option in self.config[\"ANGR_State_options_to_add\"] :\n        if self.config[\"ANGR_State_options_to_add\"].getboolean(option):\n            options.add(str.upper(option))\n    return options\n</code></pre>"},{"location":"reference/sema_toolchain/sema_scdg/application/SemaSCDG.html#sema_toolchain.sema_scdg.application.SemaSCDG.SemaSCDG.get_binary_args","title":"get_binary_args","text":"<pre><code>get_binary_args()\n</code></pre> <p>Generates symbolic arguments for the binary analysis.</p> <p>This function creates a list of binary arguments, including the binary name and symbolic arguments based on the number of arguments specified.</p> Source code in <code>sema_toolchain/sema_scdg/application/SemaSCDG.py</code> <pre><code>def get_binary_args(self):\n    \"\"\"\n    Generates symbolic arguments for the binary analysis.\n\n    This function creates a list of binary arguments, including the binary name and symbolic arguments based on the number of arguments specified.\n    \"\"\"\n    args_binary = [self.nameFileShort]\n    if self.n_args:\n        for i in range(self.n_args):\n            args_binary.append(claripy.BVS(\"arg\" + str(i), 8 * 16))\n    return args_binary\n</code></pre>"},{"location":"reference/sema_toolchain/sema_scdg/application/SemaSCDG.html#sema_toolchain.sema_scdg.application.SemaSCDG.SemaSCDG.get_config_param","title":"get_config_param","text":"<pre><code>get_config_param(config)\n</code></pre> <p>Extracts configuration parameters from the provided config object.</p> <p>This function retrieves various configuration parameters needed for the SemaSCDG application from the config object.</p> Source code in <code>sema_toolchain/sema_scdg/application/SemaSCDG.py</code> <pre><code>def get_config_param(self, config):\n    \"\"\"\n    Extracts configuration parameters from the provided config object.\n\n    This function retrieves various configuration parameters needed for the SemaSCDG application from the config object.\n    \"\"\"\n    output_dir = \"database/SCDG/runs/\"\n    self.fast_main = config['SCDG_arg'].getboolean('fast_main')\n    self.concrete_target_is_local = config['SCDG_arg'].getboolean('concrete_target_is_local')\n    self.is_packed = config['SCDG_arg'].getboolean('is_packed')\n    self.packing_type = config['SCDG_arg']['packing_type']\n    self.keep_inter_scdg = config['SCDG_arg'].getboolean('keep_inter_scdg')\n    self.approximate = config['SCDG_arg'].getboolean('approximate')\n    self.track_command = config['Plugins_to_load'].getboolean('plugin_track_command')\n    self.ioc_report = config['Plugins_to_load'].getboolean('plugin_ioc_report')\n    self.hooks_enable = config['Plugins_to_load'].getboolean('plugin_hooks')\n    self.sim_file = config['SCDG_arg'].getboolean('sim_file')\n    self.count_block_enable = config['SCDG_arg'].getboolean('count_block_enable')\n    self.plugin_enable = config['SCDG_arg'].getboolean('plugin_enable')\n    self.expl_method = config['SCDG_arg'][\"expl_method\"]\n    self.family = config['SCDG_arg']['family']\n    self.exp_dir_name = config['SCDG_arg']['exp_dir']\n    self.exp_dir = output_dir + self.exp_dir_name + \"/\" + self.family\n    self.mapping_dir = output_dir + self.exp_dir_name + \"/\"\n    self.binary_path = config['SCDG_arg']['binary_path']\n    self.n_args = int(config['SCDG_arg']['n_args'])\n    self.csv_file = config['SCDG_arg']['csv_file']\n    self.csv_path = output_dir + self.exp_dir_name + \"/\" + self.csv_file\n    self.conf_path = output_dir + self.exp_dir_name + \"/scdg_conf.json\"\n    self.pre_run_thread = config['SCDG_arg'].getboolean('pre_run_thread')\n    self.runtime_run_thread = config['SCDG_arg'].getboolean('runtime_run_thread')\n    self.post_run_thread = config['SCDG_arg'].getboolean('post_run_thread')\n</code></pre>"},{"location":"reference/sema_toolchain/sema_scdg/application/SemaSCDG.html#sema_toolchain.sema_scdg.application.SemaSCDG.SemaSCDG.get_entry_addr","title":"get_entry_addr","text":"<pre><code>get_entry_addr(proj)\n</code></pre> <p>Retrieves the entry address for the analysis from the provided project.</p> <p>This function searches for the entry address in the project, considering the 'fast_main' flag and configuration settings, and returns the entry address in hexadecimal format.</p> Source code in <code>sema_toolchain/sema_scdg/application/SemaSCDG.py</code> <pre><code>def get_entry_addr(self, proj):\n    \"\"\"\n    Retrieves the entry address for the analysis from the provided project.\n\n    This function searches for the entry address in the project, considering the 'fast_main' flag and configuration settings, and returns the entry address in hexadecimal format.\n    \"\"\"\n    # TODO : Maybe useless : Try to directly go into main (optimize some binary in windows)\n    r = r2pipe.open(self.binary_path)\n    out_r2 = r.cmd('f ~sym._main')\n    out_r2 = r.cmd('f ~sym._main')\n    addr_main = proj.loader.find_symbol(\"main\")\n    if addr_main and self.fast_main:\n        addr = addr_main.rebased_addr\n    elif out_r2:\n        addr= None\n        with contextlib.suppress(Exception):\n            iter = out_r2.split(\"\\n\")\n            for s in iter:\n                if s.endswith(\"._main\"):\n                    addr = int(s.split(\" \")[0],16)\n    else:\n        # Take the entry point specify in config file\n        addr = self.config[\"SCDG_arg\"][\"entry_addr\"]\n        if addr != \"None\":\n            #Convert string into hexadecimal\n            addr = hex(int(addr, 16))\n        else:\n            addr = None\n    self.log.info(f\"Entry_state address = {str(addr)}\")\n    return addr\n</code></pre>"},{"location":"reference/sema_toolchain/sema_scdg/application/SemaSCDG.html#sema_toolchain.sema_scdg.application.SemaSCDG.SemaSCDG.get_stashes_content","title":"get_stashes_content","text":"<pre><code>get_stashes_content(main_obj, state, simgr, exp_dir)\n</code></pre> <p>Constructs System Call Dependency Graph (SCDG) content from simulation stashes.</p> <p>Processes simulation stashes to extract relevant traces for graph construction, ensuring uniqueness based on hash values.</p> Source code in <code>sema_toolchain/sema_scdg/application/SemaSCDG.py</code> <pre><code>def get_stashes_content(self, main_obj, state, simgr, exp_dir):\n    \"\"\"\n    Constructs System Call Dependency Graph (SCDG) content from simulation stashes.\n\n    Processes simulation stashes to extract relevant traces for graph construction, ensuring uniqueness based on hash values.\n    \"\"\"\n    dump_file = {}\n    dump_id = 0\n    dic_hash_SCDG = {}\n    scdg_fin = []\n    # Add all traces with relevant content to graph construction\n    stashes = {\n        \"deadended\" : simgr.deadended,\n        \"active\" : simgr.active,\n        \"errored\" : simgr.errored,\n        \"pause\" : simgr.pause,\n        \"ExcessLoop\" : simgr.stashes[\"ExcessLoop\"],\n        \"ExcessStep\" : simgr.stashes[\"ExcessStep\"],\n        \"unconstrained\" : simgr.unconstrained,\n        \"new_addr\" : simgr.stashes[\"new_addr\"],\n        \"deadbeef\" : simgr.stashes[\"deadbeef\"],\n        \"lost\" : simgr.stashes[\"lost\"]\n    }\n    for stash_name in stashes:\n        for state in stashes[stash_name]:\n            present_state = state\n            if stash_name == \"errored\":\n                present_state = state.state\n            hashVal = hash(str(self.scdg_graph[present_state.globals[\"id\"]]))\n            if hashVal not in dic_hash_SCDG:\n                dic_hash_SCDG[hashVal] = 1\n                dump_file[dump_id] = {\n                    \"status\": stash_name,\n                    \"trace\": self.scdg_graph[present_state.globals[\"id\"]],\n                }\n                dump_id = dump_id + 1\n                scdg_fin.append(self.scdg_graph[present_state.globals[\"id\"]])\n\n    self.print_memory_info(main_obj, dump_file)\n\n    if self.keep_inter_scdg:\n        self.keep_inter_scdg_meth(exp_dir, dump_file)\n    return scdg_fin\n</code></pre>"},{"location":"reference/sema_toolchain/sema_scdg/application/SemaSCDG.html#sema_toolchain.sema_scdg.application.SemaSCDG.SemaSCDG.handle_simfile","title":"handle_simfile","text":"<pre><code>handle_simfile(state)\n</code></pre> <p>Handles the simulation file by inserting it into the state file system.</p> <p>This function reads the simulation file content, creates SimFile objects, and inserts them into the state file system if the simulation file flag is set.</p> Source code in <code>sema_toolchain/sema_scdg/application/SemaSCDG.py</code> <pre><code>def handle_simfile(self, state):\n    \"\"\"\n    Handles the simulation file by inserting it into the state file system.\n\n    This function reads the simulation file content, creates SimFile objects, and inserts them into the state file system if the simulation file flag is set.\n    \"\"\"\n    if self.sim_file:\n        with open_file(self.binary_path, \"rb\") as f:\n            self.content = f.read()\n        simfile = angr.SimFile(self.nameFileShort, content=self.content)\n        state.fs.insert(self.nameFileShort, simfile)\n        pagefile = angr.SimFile(\"pagefile.sys\", content=self.content)\n        state.fs.insert(\"pagefile.sys\", pagefile)\n</code></pre>"},{"location":"reference/sema_toolchain/sema_scdg/application/SemaSCDG.html#sema_toolchain.sema_scdg.application.SemaSCDG.SemaSCDG.init_angr_project","title":"init_angr_project","text":"<pre><code>init_angr_project(namefile, preload_libs=[], concrete_target=None, support_selfmodifying_code=None, simos=None, arch=None, auto_load_libs=False, load_debug_info=False)\n</code></pre> <p>Initializes and returns an angr Project object with specified parameters.</p> <p>This function creates an angr Project object with the provided parameters for analysis and symbolic execution.</p> Source code in <code>sema_toolchain/sema_scdg/application/SemaSCDG.py</code> <pre><code>def init_angr_project(self, namefile, preload_libs=[], concrete_target=None, support_selfmodifying_code=None, simos=None, arch=None, auto_load_libs=False, load_debug_info= False):\n    \"\"\"\n    Initializes and returns an angr Project object with specified parameters.\n\n    This function creates an angr Project object with the provided parameters for analysis and symbolic execution.\n    \"\"\"\n    return angr.Project(\n        namefile,\n        use_sim_procedures=True,\n        load_options={\n            \"auto_load_libs\": auto_load_libs,\n            \"load_debug_info\": load_debug_info,\n            \"preload_libs\": preload_libs,\n        },\n        support_selfmodifying_code=support_selfmodifying_code,\n        simos=simos,\n        arch=arch,\n        concrete_target=concrete_target,\n        default_analysis_mode=(\n            \"symbolic_approximating\" if self.approximate else \"symbolic\"\n        ),\n    )\n</code></pre>"},{"location":"reference/sema_toolchain/sema_scdg/application/SemaSCDG.html#sema_toolchain.sema_scdg.application.SemaSCDG.SemaSCDG.keep_inter_scdg_meth","title":"keep_inter_scdg_meth","text":"<pre><code>keep_inter_scdg_meth(exp_dir, dump_file)\n</code></pre> <p>Keeps an intermediate System Call Dependency Graph (SCDG) by updating a JSON file with new data.</p> <p>Appends the provided data to the existing JSON file or creates a new one if it does not exist.</p> Source code in <code>sema_toolchain/sema_scdg/application/SemaSCDG.py</code> <pre><code>def keep_inter_scdg_meth(self, exp_dir, dump_file):\n    \"\"\"\n    Keeps an intermediate System Call Dependency Graph (SCDG) by updating a JSON file with new data.\n\n    Appends the provided data to the existing JSON file or creates a new one if it does not exist.\n    \"\"\"\n    ofilename = f\"{exp_dir}inter_SCDG.json\"\n    self.log.debug(ofilename)\n    list_obj = []\n    if os.path.isfile(ofilename):\n        with open(ofilename) as fp:\n            list_obj = json_dumper.load(fp)\n    list_obj.append(dump_file)\n    with open(ofilename, \"w\") as save_SCDG:\n        json_dumper.dump(list_obj, save_SCDG)\n</code></pre>"},{"location":"reference/sema_toolchain/sema_scdg/application/SemaSCDG.html#sema_toolchain.sema_scdg.application.SemaSCDG.SemaSCDG.perform_exploration","title":"perform_exploration","text":"<pre><code>perform_exploration(exp_dir, proj, simgr)\n</code></pre> <p>Performs the exploration process for the binary analysis.</p> <p>This function sets up the exploration technique, handles runtime thread settings, logs loader information, runs the simulation manager, and records the exploration time.</p> Source code in <code>sema_toolchain/sema_scdg/application/SemaSCDG.py</code> <pre><code>def perform_exploration(self, exp_dir, proj, simgr):\n    \"\"\"\n    Performs the exploration process for the binary analysis.\n\n    This function sets up the exploration technique, handles runtime thread settings, logs loader information, runs the simulation manager, and records the exploration time.\n    \"\"\"\n    exploration_tech = self.explorer_manager.get_exploration_tech(self.nameFileShort, simgr, exp_dir, proj, self.expl_method, self.scdg_graph, self.call_sim)\n\n    if self.runtime_run_thread:\n        simgr.active[0].globals[\"is_thread\"] = True\n\n    self.log.info(proj.loader.all_pe_objects)\n    self.log.info(proj.loader.extern_object)\n    self.log.info(proj.loader.symbols)\n\n    simgr.use_technique(exploration_tech)\n\n    self.log.info(\n        \"\\n------------------------------\\nStart -State of simulation manager :\\n \"\n        + str(simgr)\n        + \"\\n------------------------------\"\n    )\n\n    start_explo_time = time.time()\n    simgr.run()\n    self.data_manager.data[\"exploration_time\"] = time.time() - start_explo_time\n\n    self.log.info(\n        \"\\n------------------------------\\nEnd - State of simulation manager :\\n \"\n        + str(simgr)\n        + \"\\n------------------------------\"\n    )\n</code></pre>"},{"location":"reference/sema_toolchain/sema_scdg/application/SemaSCDG.html#sema_toolchain.sema_scdg.application.SemaSCDG.SemaSCDG.print_memory_info","title":"print_memory_info","text":"<pre><code>print_memory_info(main_obj, dump_file)\n</code></pre> <p>Prints memory section information for the main object.</p> <p>This function extracts and logs details about memory sections, including virtual address, memory size, and permissions.</p> Source code in <code>sema_toolchain/sema_scdg/application/SemaSCDG.py</code> <pre><code>def print_memory_info(self, main_obj, dump_file):\n    \"\"\"\n    Prints memory section information for the main object.\n\n    This function extracts and logs details about memory sections, including virtual address, memory size, and permissions.\n    \"\"\"\n    dump_file[\"sections\"] = {}\n    for sec in main_obj.sections:\n        name = sec.name.replace(\"\\x00\", \"\")\n        info_sec = {\n            \"vaddr\": sec.vaddr,\n            \"memsize\": sec.memsize,\n            \"is_readable\": sec.is_readable,\n            \"is_writable\": sec.is_writable,\n            \"is_executable\": sec.is_executable,\n        }\n        dump_file[\"sections\"][name] = info_sec\n        self.log.info(name)\n        self.log.info(dump_file[\"sections\"][name])\n</code></pre>"},{"location":"reference/sema_toolchain/sema_scdg/application/SemaSCDG.html#sema_toolchain.sema_scdg.application.SemaSCDG.SemaSCDG.print_program_info","title":"print_program_info","text":"<pre><code>print_program_info(proj, main_obj, os_obj)\n</code></pre> <p>Prints information about the program, including libraries used, OS recognition, CPU architecture, entry point, memory addresses, stack executability, binary position independence, and exploration method.</p> <p>This function logs various details about the program, such as libraries, OS, CPU architecture, entry point, memory addresses, stack properties, binary position independence, and exploration method.</p> Source code in <code>sema_toolchain/sema_scdg/application/SemaSCDG.py</code> <pre><code>def print_program_info(self, proj, main_obj, os_obj):\n    \"\"\"\n    Prints information about the program, including libraries used, OS recognition, CPU architecture, entry point, memory addresses, stack executability, binary position independence, and exploration method.\n\n    This function logs various details about the program, such as libraries, OS, CPU architecture, entry point, memory addresses, stack properties, binary position independence, and exploration method.\n    \"\"\"\n    self.log.info(f\"Libraries used are :\\n {str(proj.loader.requested_names)}\")\n    self.log.info(f\"OS recognized as : {str(os_obj)}\")\n    self.log.info(f\"CPU architecture recognized as : {str(proj.arch)}\")\n    self.log.info(f\"Entry point of the binary recognized as : {hex(proj.entry)}\")\n    self.log.info(f\"Min/Max addresses of the binary recognized as : {str(proj.loader)}\")\n    self.log.info(f\"Stack executable ?  {str(main_obj.execstack)}\")\n    self.log.info(f\"Binary position-independent ?  {str(main_obj.pic)}\")\n    self.log.info(f\"Exploration method:  {str(self.expl_method)}\")\n</code></pre>"},{"location":"reference/sema_toolchain/sema_scdg/application/SemaSCDG.html#sema_toolchain.sema_scdg.application.SemaSCDG.SemaSCDG.project_creation","title":"project_creation","text":"<pre><code>project_creation()\n</code></pre> <p>Handles project creation and initial analysis setup.</p> Source code in <code>sema_toolchain/sema_scdg/application/SemaSCDG.py</code> <pre><code>def project_creation(self):\n    \"\"\"Handles project creation and initial analysis setup.\"\"\"\n    proj = self.deal_with_packing()\n    main_obj = proj.loader.main_object\n    os_obj = main_obj.os\n    if self.count_block_enable:\n        self.data_manager.count_block(proj, main_obj)\n    self.print_program_info(proj, main_obj, os_obj)\n    self.setup_simproc_scdg_builder(proj, os_obj)\n    state, args_binary = self.create_binary_init_state(proj)\n    return proj, main_obj, os_obj, state, args_binary\n</code></pre>"},{"location":"reference/sema_toolchain/sema_scdg/application/SemaSCDG.html#sema_toolchain.sema_scdg.application.SemaSCDG.SemaSCDG.run","title":"run","text":"<pre><code>run(exp_dir)\n</code></pre> <p>Runs the complete analysis process for the binary.</p> <p>This function orchestrates the entire analysis process, including setting up the environment, creating the initial state, configuring hooks, exploration, data collection, SCDG (System Call Dependency Graph) construction, and finalization steps.</p> Source code in <code>sema_toolchain/sema_scdg/application/SemaSCDG.py</code> <pre><code>def run(self, exp_dir):\n    \"\"\"\n    Runs the complete analysis process for the binary.\n\n    This function orchestrates the entire analysis process, including setting up the environment, creating the initial state, configuring hooks, exploration, data collection, SCDG (System Call Dependency Graph) construction, and finalization steps.\n    \"\"\"\n    start_execution_time = time.time()\n\n    exp_dir, self.fileHandler = self.run_setup(exp_dir)\n\n    title = f\"--- Building SCDG of {self.family}/{self.nameFileShort} ---\"\n    self.log.info(\"\\n\" + \"-\" * len(title) + \"\\n\" + title + \"\\n\" + \"-\" * len(title))\n\n    # Project creation\n    proj, main_obj, os_obj, state, args_binary = self.project_creation()\n\n    # Custom Hooking\n    start_hooking_time = time.time()\n    self.setup_hooks(proj, state, os_obj)\n    self.data_manager.data[\"hooking_time\"] = time.time() - start_hooking_time\n\n    # Creation of simulation managerinline_call, primary interface in angr for performing execution\n    simgr = proj.factory.simulation_manager(state)\n    dump_file = {}\n    self.print_memory_info(main_obj, dump_file)\n\n    # Exploration\n    if self.pre_run_thread:\n        state.plugin_thread.pre_run_thread(self.content, self.inputs)\n\n    self.set_breakpoints(state)\n\n    # (3) TODO: move that but as serena purposes\n    for sec in main_obj.sections:\n        name = sec.name.replace(\"\\x00\", \"\")\n        if name == \".rsrc\":\n            simgr.active[0].globals[\"rsrc\"] = sec.vaddr\n\n    self.scdg_graph.append(\n        [\n            {\n                \"name\": \"main\",\n                \"args\": [str(args) for args in args_binary],\n                \"addr\": state.addr,\n                \"ret\": \"symbolic\",\n                \"addr_func\": state.addr,\n            }\n        ]\n    )\n\n    self.perform_exploration(exp_dir, proj, simgr)\n\n    if self.post_run_thread:\n        state.plugin_thread.post_run_thread(simgr)\n\n    # Data collection\n    execution_time = time.time() - start_execution_time\n\n    self.collect_data(exp_dir, proj, state, simgr, execution_time)\n\n    # SCDG build\n    stashes_content = self.get_stashes_content(main_obj, state, simgr, exp_dir)\n\n    self.graph_builder.build(\n        stashes_content,\n        f\"{self.mapping_dir}mapping_{self.exp_dir_name}.txt\",\n        f\"{self.exp_dir}/{self.nameFileShort}\",\n        self.family,\n    )\n\n    if self.store_data:\n        self.data_manager.save_to_csv(proj, self.family, self.call_sim, self.csv_path)\n\n    self.end_run()\n</code></pre>"},{"location":"reference/sema_toolchain/sema_scdg/application/SemaSCDG.html#sema_toolchain.sema_scdg.application.SemaSCDG.SemaSCDG.run_setup","title":"run_setup","text":"<pre><code>run_setup(exp_dir)\n</code></pre> <p>Runs the setup process for the experiment directory.</p> <p>This function prepares the experiment directory by setting up a CSV file, extracting the sample name, creating directories, configuring log handlers, and returning the updated experiment directory path and file handler.</p> Source code in <code>sema_toolchain/sema_scdg/application/SemaSCDG.py</code> <pre><code>def run_setup(self, exp_dir):\n    \"\"\"\n    Runs the setup process for the experiment directory.\n\n    This function prepares the experiment directory by setting up a CSV file, extracting the sample name, creating directories, configuring log handlers, and returning the updated experiment directory path and file handler.\n    \"\"\"\n    # TODO check if PE file get /GUARD option (VS code) with leaf\n\n    # Create a Dataframe for future data if a csv file is specified\n    if self.store_data:\n        self.data_manager.setup_csv(self.csv_path)\n\n    # Take name of the sample without full path\n    if \"/\" in self.binary_path:\n        self.nameFileShort = self.binary_path.split(\"/\")[-1]\n    else:\n        self.nameFileShort = self.binary_path\n    self.data_manager.data[\"nameFileShort\"] = self.nameFileShort\n    try:\n        os.stat(exp_dir + self.nameFileShort)\n    except Exception:\n        os.makedirs(exp_dir + self.nameFileShort)\n\n    #Set log handler\n    fileHandler = logging.FileHandler(exp_dir + self.nameFileShort + \"/\" + \"scdg.ans\")\n    fileHandler.setFormatter(CustomFormatter())\n    try:\n        logging.getLogger().removeHandler(fileHandler)\n    except Exception:\n        self.log.warning(\"Exception remove filehandler\")\n\n    logging.getLogger().addHandler(fileHandler)\n\n    exp_dir = exp_dir + self.nameFileShort + \"/\"\n\n    return exp_dir, fileHandler\n</code></pre>"},{"location":"reference/sema_toolchain/sema_scdg/application/SemaSCDG.html#sema_toolchain.sema_scdg.application.SemaSCDG.SemaSCDG.save_conf","title":"save_conf","text":"<pre><code>save_conf()\n</code></pre> <p>Saves the configuration of the experiment in a JSON file.</p> <p>This function converts the configuration parameters into a dictionary and writes them to a JSON file for future reference.</p> Source code in <code>sema_toolchain/sema_scdg/application/SemaSCDG.py</code> <pre><code>def save_conf(self):\n    \"\"\"\n    Saves the configuration of the experiment in a JSON file.\n\n    This function converts the configuration parameters into a dictionary and writes them to a JSON file for future reference.\n    \"\"\"\n    param = {}\n    sections = self.config.sections()\n    for section in sections:\n        items=self.config.items(section)\n        param[section]=dict(items)\n    with open(self.conf_path, \"w\") as f:\n        json.dump(param, f, indent=4)\n</code></pre>"},{"location":"reference/sema_toolchain/sema_scdg/application/SemaSCDG.html#sema_toolchain.sema_scdg.application.SemaSCDG.SemaSCDG.set_breakpoints","title":"set_breakpoints","text":"<pre><code>set_breakpoints(state)\n</code></pre> <p>Sets breakpoints for various inspection actions in the given state.</p> <p>This function sets breakpoints for different inspection actions based on the state provided, such as adding calls, debugging calls, printing state addresses, adding instruction addresses, and adding block addresses.</p> Source code in <code>sema_toolchain/sema_scdg/application/SemaSCDG.py</code> <pre><code>def set_breakpoints(self, state):\n    \"\"\"\n    Sets breakpoints for various inspection actions in the given state.\n\n    This function sets breakpoints for different inspection actions based on the state provided, such as adding calls, debugging calls, printing state addresses, adding instruction addresses, and adding block addresses.\n    \"\"\"\n    state.inspect.b(\"simprocedure\", when=angr.BP_AFTER, action=self.syscall_to_scdg_builder.add_call)\n    state.inspect.b(\"simprocedure\", when=angr.BP_BEFORE, action=self.syscall_to_scdg_builder.add_call_debug)\n    state.inspect.b(\"call\", when=angr.BP_BEFORE, action=self.syscall_to_scdg_builder.add_addr_call)\n    state.inspect.b(\"call\", when=angr.BP_AFTER, action=self.syscall_to_scdg_builder.rm_addr_call)\n\n    if self.count_block_enable:\n        state.inspect.b(\"instruction\",when=angr.BP_BEFORE, action=self.data_manager.print_state_address)\n        state.inspect.b(\"instruction\",when=angr.BP_AFTER, action=self.data_manager.add_instr_addr)\n        state.inspect.b(\"irsb\",when=angr.BP_BEFORE, action=self.data_manager.add_block_addr)\n</code></pre>"},{"location":"reference/sema_toolchain/sema_scdg/application/SemaSCDG.html#sema_toolchain.sema_scdg.application.SemaSCDG.SemaSCDG.setup_heap","title":"setup_heap","text":"<pre><code>setup_heap(state, proj)\n</code></pre> <p>Sets up the heap memory structure in the state based on the architecture.</p> <p>This function configures the heap memory structure in the state based on the architecture of the project, adjusting memory addresses and values accordingly.</p> Source code in <code>sema_toolchain/sema_scdg/application/SemaSCDG.py</code> <pre><code>def setup_heap(self, state, proj):\n    \"\"\"\n    Sets up the heap memory structure in the state based on the architecture.\n\n    This function configures the heap memory structure in the state based on the architecture of the project, adjusting memory addresses and values accordingly.\n    \"\"\"\n    tib_addr = state.regs.fs.concat(state.solver.BVV(0, 16))\n    if proj.arch.name == \"AMD64\":\n        peb_addr = state.mem[tib_addr + 0x60].qword.resolved\n        ProcessHeap = peb_addr + 0x500 #0x18\n        state.mem[peb_addr + 0x10].qword = ProcessHeap\n        state.mem[ProcessHeap + 0x18].dword = 0x0 # heapflags windowsvistaorgreater\n        state.mem[ProcessHeap + 0x70].dword = 0x0 # heapflags else\n    else:\n        peb_addr = state.mem[tib_addr + 0x30].dword.resolved\n        ProcessHeap = peb_addr + 0x500\n        state.mem[peb_addr + 0x18].dword = ProcessHeap\n        state.mem[ProcessHeap+0xc].dword = 0x0 #heapflags windowsvistaorgreater\n        state.mem[ProcessHeap+0x40].dword = 0x0 #heapflags else\n</code></pre>"},{"location":"reference/sema_toolchain/sema_scdg/application/SemaSCDG.html#sema_toolchain.sema_scdg.application.SemaSCDG.SemaSCDG.setup_hooks","title":"setup_hooks","text":"<pre><code>setup_hooks(proj, state, os_obj)\n</code></pre> <p>Sets up hooks for the binary analysis based on the operating system.</p> <p>This function configures hooks for the binary analysis, including loading libraries, setting custom hooks, and initializing hooks based on the operating system.</p> Source code in <code>sema_toolchain/sema_scdg/application/SemaSCDG.py</code> <pre><code>def setup_hooks(self, proj, state, os_obj):\n    \"\"\"\n    Sets up hooks for the binary analysis based on the operating system.\n\n    This function configures hooks for the binary analysis, including loading libraries, setting custom hooks, and initializing hooks based on the operating system.\n    \"\"\"\n    if os_obj == \"windows\":\n        self.call_sim.loadlibs_proc(self.call_sim.system_call_table, proj) #TODO mbs=symbs,dll=dll)\n\n    self.call_sim.custom_hook_static(proj)\n\n    if os_obj != \"windows\":\n        self.call_sim.custom_hook_linux_symbols(proj)\n        self.call_sim.custom_hook_no_symbols(proj)\n    else:\n        self.call_sim.custom_hook_windows_symbols(proj)  #TODO ue if (self.is_packed and False) else False,symbs)\n\n    if self.hooks_enable:\n        self.plugins.enable_plugin_hooks(self, self.content, state, proj, self.call_sim)\n</code></pre>"},{"location":"reference/sema_toolchain/sema_scdg/application/SemaSCDG.html#sema_toolchain.sema_scdg.application.SemaSCDG.SemaSCDG.setup_simproc_scdg_builder","title":"setup_simproc_scdg_builder","text":"<pre><code>setup_simproc_scdg_builder(proj, os_obj)\n</code></pre> <p>Sets up the system call procedure and builder based on the operating system.</p> <p>This function initializes the appropriate system call procedure and builder based on the operating system, loads the syscall table, and logs the system call table information.</p> Source code in <code>sema_toolchain/sema_scdg/application/SemaSCDG.py</code> <pre><code>def setup_simproc_scdg_builder(self, proj, os_obj):\n    \"\"\"\n    Sets up the system call procedure and builder based on the operating system.\n\n    This function initializes the appropriate system call procedure and builder based on the operating system, loads the syscall table, and logs the system call table information.\n    \"\"\"\n    # Load pre-defined syscall table\n    if os_obj == \"windows\":\n        self.call_sim = self.windows_simproc\n        self.call_sim.setup(\"windows\")\n    else:\n        self.call_sim = self.linux_simproc\n        self.call_sim.setup(\"linux\")\n\n    self.call_sim.load_syscall_table(proj)\n\n    self.syscall_to_scdg_builder.set_call_sim(self.call_sim)\n\n    self.log.info(\"System call table loaded\")\n    self.log.debug(f\"System call table size : {len(self.call_sim.system_call_table)}\")\n</code></pre>"},{"location":"reference/sema_toolchain/sema_scdg/application/SemaSCDG.html#sema_toolchain.sema_scdg.application.SemaSCDG.start_scdg","title":"start_scdg","text":"<pre><code>start_scdg()\n</code></pre> <p>Starts the System Call Dependency Graph (SCDG) analysis process.</p> <p>This function initiates the analysis by determining whether to analyze a single binary or multiple binaries in a folder, running the analysis, handling exceptions, and reporting any crashed samples.</p> Source code in <code>sema_toolchain/sema_scdg/application/SemaSCDG.py</code> <pre><code>def start_scdg():\n    \"\"\"\n    Starts the System Call Dependency Graph (SCDG) analysis process.\n\n    This function initiates the analysis by determining whether to analyze a single binary or multiple binaries in a folder, running the analysis, handling exceptions, and reporting any crashed samples.\n    \"\"\"\n    config = configparser.ConfigParser()\n    file = config.read(sys.argv[1])\n    if file == []:\n        raise FileNotFoundError(\"Config file not found\")\n    log_level_sema = config['SCDG_arg'].get('log_level_sema')\n    os.environ[\"LOG_LEVEL\"] = log_level_sema\n\n    crashed_samples = []\n    binary_path = \"\".join(config['SCDG_arg']['binary_path'].rstrip())\n    sema_scdg = SemaSCDG()\n\n    if os.path.isfile(binary_path):\n        sema_scdg.log.info(f\"You decide to analyse a single binary: {sema_scdg.binary_path}\")\n        sema_scdg.run(f\"{sema_scdg.exp_dir}/\")\n    elif os.path.isdir(sema_scdg.binary_path):\n        subfolder = [os.path.join(sema_scdg.binary_path, f) for f in os.listdir(sema_scdg.binary_path) if os.path.isdir(os.path.join(sema_scdg.binary_path, f))]\n        if not subfolder:\n            __process_folder(sema_scdg.binary_path, sema_scdg, crashed_samples)\n        with progressbar.ProgressBar(max_value=len(subfolder)) as bar_f:\n            for folder in subfolder:\n                __process_folder(folder, sema_scdg, crashed_samples)\n                bar_f.next()\n    else:\n        sema_scdg.log.error(\"Error: you should insert a folder containing malware classified in their family folders\\n(Example: databases/Binaries/malware-win/small_train\")\n        raise FileNotFoundError(\"No correct subfolder or binary found\")\n\n    if crashed_samples:\n        sema_scdg.log.warning(\n            f\"{len(crashed_samples)} sample(s) has(ve) crashed, see 'scdg.ans' file for log details or run the samples individually to see error details\"\n        )\n        for i in crashed_samples:\n            print(\"\\t\" + i)\n</code></pre>"},{"location":"reference/sema_toolchain/sema_scdg/application/scdg_tests.html","title":"scdg_tests","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/scdg_tests.html#sema_toolchain.sema_scdg.application.scdg_tests","title":"scdg_tests","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/clogging/index.html","title":"Index","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/clogging/index.html#sema_toolchain.sema_scdg.application.clogging","title":"clogging","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/clogging/CustomFormatter.html","title":"CustomFormatter","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/clogging/CustomFormatter.html#sema_toolchain.sema_scdg.application.clogging.CustomFormatter","title":"CustomFormatter","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/clogging/DataManager.html","title":"DataManager","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/clogging/DataManager.html#sema_toolchain.sema_scdg.application.clogging.DataManager","title":"DataManager","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/clogging/LogBookFormatter.html","title":"LogBookFormatter","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/clogging/LogBookFormatter.html#sema_toolchain.sema_scdg.application.clogging.LogBookFormatter","title":"LogBookFormatter","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/explorer/index.html","title":"Index","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/explorer/index.html#sema_toolchain.sema_scdg.application.explorer","title":"explorer","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/explorer/SemaExplorer.html","title":"SemaExplorer","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/explorer/SemaExplorer.html#sema_toolchain.sema_scdg.application.explorer.SemaExplorer","title":"SemaExplorer","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/explorer/SemaExplorer.html#sema_toolchain.sema_scdg.application.explorer.SemaExplorer.SemaExplorer","title":"SemaExplorer","text":"<pre><code>SemaExplorer(simgr, exp_dir, nameFileShort, scdg_graph, call_sim)\n</code></pre> <p>               Bases: <code>ExplorationTechnique</code></p> <p>Manages the exploration of states during symbolic execution.</p> <p>This class defines methods for setting up exploration parameters, filtering states based on various criteria, and managing the exploration process, including handling timeouts and memory limits.</p> <p>This class sets up parameters and data structures for symbolic execution exploration, including timeout, maximum steps, and state management.</p> Source code in <code>sema_toolchain/sema_scdg/application/explorer/SemaExplorer.py</code> <pre><code>def __init__(self, simgr, exp_dir, nameFileShort, scdg_graph, call_sim):\n    \"\"\"\n    Initializes the SemaExplorer for symbolic execution exploration.\n\n    This class sets up parameters and data structures for symbolic execution exploration, including timeout, maximum steps, and state management.\n    \"\"\"\n    super(SemaExplorer, self).__init__()\n\n    self.log = log\n    self.log_level = log_level\n\n    self.start_time = timer.time()\n\n    self.eval_time = config['explorer_arg'].getboolean('eval_time')\n    #self._max_length = int(config['explorer_arg']['max_length'])\n    self.timeout = int(config['explorer_arg']['timeout'])\n    self.max_end_state = int(config['explorer_arg']['max_end_state'])\n    self.max_step = int(config['explorer_arg']['max_step'])\n    self.jump_it = int(config['explorer_arg']['jump_it'])\n    self.loop_counter_concrete = int(config['explorer_arg']['loop_counter_concrete'])\n    self.max_simul_state = int(config['explorer_arg']['max_simul_state'])\n    self.max_in_pause_stach = int(config['explorer_arg']['max_in_pause_stach'])\n    self.timeout_tab = json.loads(config['explorer_arg']['timeout_tab'])\n\n    self.errored = 0\n    self.unconstrained = 0\n    self.deadended = 0\n    self.active = 1\n    self.id = 0\n    self.snapshot_state = {}\n    self.fork_stack = deque()\n    self.loopBreak_stack = deque()\n\n    self.excessLoop_stash = \"ExcessLoop\"\n    self.excessStep_stash = \"ExcessStep\"\n    self.deadbeef_stash = \"deadbeef\"\n    self.lost_stash = \"lost\"\n\n    self.jump_dict = {}\n    self.jump_concrete_dict = {}\n    self.jump_dict[0] = {}\n    self.jump_concrete_dict[0] = {}\n\n    self.exp_dir = exp_dir\n    self.nameFileShort = nameFileShort\n    self.time_id = 0\n\n    self.scdg_graph = scdg_graph\n    self.call_sim = call_sim\n\n    self.scdg_fin = []\n    self.dict_addr_vis = set()\n</code></pre>"},{"location":"reference/sema_toolchain/sema_scdg/application/explorer/SemaExplorer.html#sema_toolchain.sema_scdg.application.explorer.SemaExplorer.SemaExplorer.build_snapshot","title":"build_snapshot","text":"<pre><code>build_snapshot(simgr)\n</code></pre> <p>Builds a snapshot of the current state during symbolic execution.</p> <p>This function clears the existing snapshot state, updates the state information, and increments the step count for each active state in the symbolic execution manager.</p> Source code in <code>sema_toolchain/sema_scdg/application/explorer/SemaExplorer.py</code> <pre><code>def build_snapshot(self, simgr):\n    \"\"\"\n    Builds a snapshot of the current state during symbolic execution.\n\n    This function clears the existing snapshot state, updates the state information, and increments the step count for each active state in the symbolic execution manager.\n    \"\"\"\n    self.snapshot_state.clear()\n    for state in simgr.active:\n        if state.globals[\"id\"] in self.snapshot_state:\n            self.fork_stack.append(state.globals[\"id\"])\n            self.snapshot_state[state.globals[\"id\"]] += 1\n        else:\n            self.snapshot_state[state.globals[\"id\"]] = 1\n        state.globals[\"n_steps\"] += 1\n</code></pre>"},{"location":"reference/sema_toolchain/sema_scdg/application/explorer/SemaExplorer.html#sema_toolchain.sema_scdg.application.explorer.SemaExplorer.SemaExplorer.check_constraint","title":"check_constraint","text":"<pre><code>check_constraint(state, value)\n</code></pre> <p>Checks and evaluates constraints on a state.</p> <p>This function evaluates a constraint value in the context of a state, handling symbolic values and exceptions, and returning the evaluated value.</p> Source code in <code>sema_toolchain/sema_scdg/application/explorer/SemaExplorer.py</code> <pre><code>def check_constraint(self, state, value):\n    \"\"\"\n    Checks and evaluates constraints on a state.\n\n    This function evaluates a constraint value in the context of a state, handling symbolic values and exceptions, and returning the evaluated value.\n    \"\"\"\n    try:\n        val = state.solver.eval_one(value)\n        if hasattr(val, \"to_claripy\"):\n            val = val.to_claripy()\n\n    except Exception as e:\n        self.log.info(\"Symbolic value encountered !\")\n        print(e)\n        return value\n    return val\n</code></pre>"},{"location":"reference/sema_toolchain/sema_scdg/application/explorer/SemaExplorer.html#sema_toolchain.sema_scdg.application.explorer.SemaExplorer.SemaExplorer.check_fork_split","title":"check_fork_split","text":"<pre><code>check_fork_split(prev_id, found_jmp_table, state)\n</code></pre> <p>Checks and manages fork splits during symbolic execution.</p> <p>This function evaluates the fork split conditions based on the previous state ID, jump table presence, and concrete targets, updating state attributes and managing exceeded jumps by adding states to the loopBreak_stack.</p> Source code in <code>sema_toolchain/sema_scdg/application/explorer/SemaExplorer.py</code> <pre><code>def check_fork_split(self, prev_id, found_jmp_table, state):\n    \"\"\"\n    Checks and manages fork splits during symbolic execution.\n\n    This function evaluates the fork split conditions based on the previous state ID, jump table presence, and concrete targets, updating state attributes and managing exceeded jumps by adding states to the loopBreak_stack.\n    \"\"\"\n    if found_jmp_table and prev_id == state.globals[\"id\"]:\n        self.snapshot_state[prev_id] = self.snapshot_state[prev_id] - 1\n    else:\n        concrete_targ = (\n            str(state.history.jump_target)\n            + \"-\"\n            + str(state.history.jump_source)\n        )\n        if (concrete_targ not in self.jump_dict[state.globals[\"id\"]]):\n            self.jump_dict[state.globals[\"id\"]][concrete_targ] = 1\n        else:\n            self.jump_dict[state.globals[\"id\"]][concrete_targ] += 1\n            if (self.jump_dict[state.globals[\"id\"]][concrete_targ] &gt;= self.jump_it):\n                state.globals[\"JumpExcedeed\"] = True\n                self.loopBreak_stack.append((state.globals[\"id\"],state.scratch.ins_addr,))\n</code></pre>"},{"location":"reference/sema_toolchain/sema_scdg/application/explorer/SemaExplorer.html#sema_toolchain.sema_scdg.application.explorer.SemaExplorer.SemaExplorer.complete","title":"complete","text":"<pre><code>complete(simgr)\n</code></pre> <p>Checks if the symbolic execution is finished by checking the timeout value, the number of state in the active stash and the number of state in the deadended stash</p> Source code in <code>sema_toolchain/sema_scdg/application/explorer/SemaExplorer.py</code> <pre><code>def complete(self, simgr):\n    \"\"\"\n    Checks if the symbolic execution is finished by checking the timeout value, the number of state in the active stash and the number of state in the deadended stash\n    \"\"\"\n    self.deadended = len(simgr.deadended)\n    elapsed_time = timer.time() - self.start_time\n    if elapsed_time &gt; self.timeout:\n        self.log.info(\"Timeout expired for simulation !\")\n    if len(simgr.active) &lt;= 0 or self.deadended &gt;= self.max_end_state:\n        self.log.info(\"len(simgr.active) &lt;= 0 or deadended &gt;= self.max_end_state)\")\n    vmem = psutil.virtual_memory()\n    if vmem.percent &gt; 97:\n        # TODO return in logs file the malware hash\n        self.log.info(\"Memory limit reach\")\n        return True\n    return elapsed_time &gt; self.timeout or (\n        len(simgr.active) &lt;= 0 or self.deadended &gt;= self.max_end_state\n    )\n</code></pre>"},{"location":"reference/sema_toolchain/sema_scdg/application/explorer/SemaExplorer.html#sema_toolchain.sema_scdg.application.explorer.SemaExplorer.SemaExplorer.drop_excessed_loop","title":"drop_excessed_loop","text":"<pre><code>drop_excessed_loop(simgr)\n</code></pre> <p>Drops excessed loop states from the symbolic execution manager.</p> <p>This function calculates the number of excess loop states to drop based on a threshold, selects the states to drop from the \"ExcessLoop\" stash, and removes them from the symbolic execution manager.</p> Source code in <code>sema_toolchain/sema_scdg/application/explorer/SemaExplorer.py</code> <pre><code>def drop_excessed_loop(self, simgr):\n    \"\"\"\n    Drops excessed loop states from the symbolic execution manager.\n\n    This function calculates the number of excess loop states to drop based on a threshold, selects the states to drop from the \"ExcessLoop\" stash, and removes them from the symbolic execution manager.\n    \"\"\"\n    excess_loop = len(simgr.stashes[\"ExcessLoop\"]) - (self.max_in_pause_stach / 5)\n    excess_loop = int(excess_loop)  # TODO chris check where we round (up-down)\n    if excess_loop &gt; 0:\n        state_to_stash = simgr.stashes[\"ExcessLoop\"][-excess_loop:]\n        id_to_stash = [t.globals[\"id\"] for t in state_to_stash]\n        simgr.drop(filter_func=lambda s: s.globals[\"id\"] in id_to_stash, stash=\"ExcessLoop\")\n</code></pre>"},{"location":"reference/sema_toolchain/sema_scdg/application/explorer/SemaExplorer.html#sema_toolchain.sema_scdg.application.explorer.SemaExplorer.SemaExplorer.excessed_loop_to_active","title":"excessed_loop_to_active","text":"<pre><code>excessed_loop_to_active(simgr)\n</code></pre> <p>Moves excessed loop states to the active stash for further exploration and manages the number of states in the pause stash.</p> <p>This function transfers states from the \"ExcessLoop\" stash to the active stash if the active stash is empty and there are states in the \"ExcessLoop\" stash, resetting certain state attributes. It also checks and discards excess states from the pause stash if the number of states exceeds a specified threshold.</p> Source code in <code>sema_toolchain/sema_scdg/application/explorer/SemaExplorer.py</code> <pre><code>def excessed_loop_to_active(self, simgr):\n    \"\"\"\n    Moves excessed loop states to the active stash for further exploration and manages the number of states in the pause stash.\n\n    This function transfers states from the \"ExcessLoop\" stash to the active stash if the active stash is empty and there are states in the \"ExcessLoop\" stash, resetting certain state attributes. It also checks and discards excess states from the pause stash if the number of states exceeds a specified threshold.\n    \"\"\"\n    if len(simgr.active) == 0 and len(simgr.stashes[\"ExcessLoop\"]) &gt; 0:\n        moves = min(len(simgr.stashes[\"ExcessLoop\"]), self.max_simul_state)\n        id_move = []\n        for i in range(moves):\n            state = simgr.stashes[\"ExcessLoop\"][i]\n            self.id = state.globals[\"id\"]\n            id_move.append(self.id)\n            state.globals[\"JumpExcedeed\"] = False\n            self.jump_dict[self.id].clear()\n            self.jump_concrete_dict[self.id].clear()\n        simgr.move(\n            from_stash=\"ExcessLoop\",\n            to_stash=\"active\",\n            filter_func=lambda s: s.globals[\"id\"] in id_move,\n        )\n\n    # If there is too much states in pause stash, discard some of them\n    excess_pause = len(simgr.stashes[\"pause\"]) - self.max_in_pause_stach\n    if excess_pause &gt; 0:\n        state_to_stash = simgr.pause[-excess_pause:]\n        id_to_stash = [t.globals[\"id\"] for t in state_to_stash]\n        simgr.drop(\n            filter_func=lambda s: s.globals[\"id\"] in id_to_stash, stash=\"pause\"\n        )\n</code></pre>"},{"location":"reference/sema_toolchain/sema_scdg/application/explorer/SemaExplorer.html#sema_toolchain.sema_scdg.application.explorer.SemaExplorer.SemaExplorer.excessed_step_to_active","title":"excessed_step_to_active","text":"<pre><code>excessed_step_to_active(simgr)\n</code></pre> <p>Moves excessed step states to the active stash for further exploration.</p> <p>This function transfers states from the \"ExcessStep\" stash to the active stash if the active stash is empty and there are states in the \"ExcessStep\" stash, resetting the step count for the moved states.</p> Source code in <code>sema_toolchain/sema_scdg/application/explorer/SemaExplorer.py</code> <pre><code>def excessed_step_to_active(self, simgr):\n    \"\"\"\n    Moves excessed step states to the active stash for further exploration.\n\n    This function transfers states from the \"ExcessStep\" stash to the active stash if the active stash is empty and there are states in the \"ExcessStep\" stash, resetting the step count for the moved states.\n    \"\"\"\n    if len(simgr.active) == 0 and len(simgr.stashes[\"ExcessStep\"]) &gt; 0:\n        moves = min(len(simgr.stashes[\"ExcessStep\"]), self.max_simul_state)\n        id_move = []\n        for i in range(moves):\n            state = simgr.stashes[\"ExcessStep\"][i]\n            self.id = state.globals[\"id\"]\n            id_move.append(self.id)\n            state.globals[\"n_steps\"] = 0\n        simgr.move(\n            from_stash=\"ExcessStep\",\n            to_stash=\"active\",\n            filter_func=lambda s: s.globals[\"id\"] in id_move,\n        )\n</code></pre>"},{"location":"reference/sema_toolchain/sema_scdg/application/explorer/SemaExplorer.html#sema_toolchain.sema_scdg.application.explorer.SemaExplorer.SemaExplorer.filter","title":"filter","text":"<pre><code>filter(simgr, state, **kwargs)\n</code></pre> <p>Filters states during symbolic execution exploration.</p> <p>This function determines the appropriate stash for a state based on various criteria such as address, loop counters, step counts, and specific conditions, managing state transitions during exploration. Each time a new state is created, this function checks where the state has to go. Put the state in active stash by default</p> Source code in <code>sema_toolchain/sema_scdg/application/explorer/SemaExplorer.py</code> <pre><code>def filter(self, simgr, state, **kwargs):\n    \"\"\"\n    Filters states during symbolic execution exploration.\n\n    This function determines the appropriate stash for a state based on various criteria such as address, loop counters, step counts, and specific conditions, managing state transitions during exploration.\n    Each time a new state is created, this function checks where the state has to go. Put the state in active stash by default\n    \"\"\"\n    if state.addr &lt; simgr._project.loader.main_object.mapped_base :\n        return \"lost\"\n\n    # Manage end thread state\n    if state.addr == 0xdeadbeef:\n        return \"deadbeef\"\n\n    # If too many states are explored simulateously, put state into pause stash\n    if len(simgr.active) &gt; self.max_simul_state:\n        return \"pause\"\n\n    # if Execute too many times a simple loop\n    test = f\"{str(state.history.jump_target)}-{str(state.history.jump_source)}\"\n    if test in self.jump_concrete_dict[state.globals[\"id\"]]:\n        self.jump_concrete_dict[state.globals[\"id\"]][test] += 1\n    else:\n        state.globals[\"previous_regs\"] = state.regs\n        self.jump_concrete_dict[state.globals[\"id\"]][test] = 1\n\n    if (self.jump_concrete_dict[state.globals[\"id\"]][test] &gt; self.loop_counter_concrete):\n        self.jump_concrete_dict[state.globals[\"id\"]][test] = 0\n        return \"ExcessLoop\"\n\n    # If execute too many steps\n    if state.globals[\"n_steps\"] % 1000 == 0:\n        self.log.debug(\"n_steps = \" + str(state.globals[\"n_steps\"]))\n\n    if state.globals[\"n_steps\"] &gt; self.max_step:\n        state.history.trim()\n        self.log.info(\"A state has been discarded because of max_step reached\")\n        return \"ExcessStep\"\n\n    # TODO check seems new\n    if state.globals[\"loop\"] &gt; 3:\n        self.log.info(\"A state has been discarded because of 1 loop reached\")\n        return \"ExcessLoop\"\n\n    return simgr.filter(state, **kwargs)\n</code></pre>"},{"location":"reference/sema_toolchain/sema_scdg/application/explorer/SemaExplorer.html#sema_toolchain.sema_scdg.application.explorer.SemaExplorer.SemaExplorer.manage_deadended","title":"manage_deadended","text":"<pre><code>manage_deadended(simgr)\n</code></pre> <p>Manages states that have reached a dead-ended state during symbolic execution.</p> <p>This function tracks and updates the count of dead-ended states in the symbolic execution manager, ensuring proper management of these states.</p> Source code in <code>sema_toolchain/sema_scdg/application/explorer/SemaExplorer.py</code> <pre><code>def manage_deadended(self, simgr):\n    \"\"\"\n    Manages states that have reached a dead-ended state during symbolic execution.\n\n    This function tracks and updates the count of dead-ended states in the symbolic execution manager, ensuring proper management of these states.\n    \"\"\"\n    if len(simgr.deadended) &gt; self.deadended:\n        to_clean = len(simgr.deadended) - self.deadended\n        for i in range(to_clean):\n            simgr.deadended[-i - 1].globals[\"id\"]\n        self.deadended = len(simgr.deadended)\n</code></pre>"},{"location":"reference/sema_toolchain/sema_scdg/application/explorer/SemaExplorer.html#sema_toolchain.sema_scdg.application.explorer.SemaExplorer.SemaExplorer.manage_error","title":"manage_error","text":"<pre><code>manage_error(simgr)\n</code></pre> <p>Manages and logs errors encountered during symbolic execution.</p> <p>This function compares the number of errors in the symbolic execution manager with the stored count of errors, logs information about each new error, and updates the error count.</p> Source code in <code>sema_toolchain/sema_scdg/application/explorer/SemaExplorer.py</code> <pre><code>def manage_error(self, simgr):\n    \"\"\"\n    Manages and logs errors encountered during symbolic execution.\n\n    This function compares the number of errors in the symbolic execution manager with the stored count of errors, logs information about each new error, and updates the error count.\n    \"\"\"\n    if len(simgr.errored) &gt; self.errored:\n        new_errors = len(simgr.errored) - self.errored\n        for i in range(new_errors):\n            id_cur = simgr.errored[-i - 1].state.globals[\"id\"]\n            self.log.info(f\"End of the trace number {str(id_cur)} with errors\")\n            self.log.info(simgr.errored[-i - 1].state)\n            self.log.info(simgr.errored[-i - 1].error)\n        self.errored = len(simgr.errored)\n</code></pre>"},{"location":"reference/sema_toolchain/sema_scdg/application/explorer/SemaExplorer.html#sema_toolchain.sema_scdg.application.explorer.SemaExplorer.SemaExplorer.manage_fork","title":"manage_fork","text":"<pre><code>manage_fork(simgr)\n</code></pre> <p>Manages forked states during symbolic execution.</p> <p>This function processes and updates forked states, handling the creation of new states, managing state IDs, and checking for jump tables to handle forked states appropriately.</p> Source code in <code>sema_toolchain/sema_scdg/application/explorer/SemaExplorer.py</code> <pre><code>def manage_fork(self, simgr):\n    \"\"\"\n    Manages forked states during symbolic execution.\n\n    This function processes and updates forked states, handling the creation of new states, managing state IDs, and checking for jump tables to handle forked states appropriately.\n    \"\"\"\n    if len(self.fork_stack) &lt;= 0:\n        return\n    for _ in range(len(self.fork_stack)):\n        prev_id = self.fork_stack.pop()\n        self.id = self.id + 1  # id for the new state\n\n        # TODO true and false branch ? is it an IF statement here ?\n        state_fork1, state_fork2 = self.__update_id_stash(simgr, prev_id, self.id)\n        if (state_fork1 and state_fork2 and state_fork1.globals[\"id\"] != state_fork2.globals[\"id\"]):\n            if state_fork2.globals[\"id\"] != self.id:\n                self.log.warning(\"Something bad happend after update_id_stash, ids are messed up\")\n\n            self.scdg_graph.append(self.scdg_graph[prev_id].copy())\n            self.scdg_graph[-1][0] = self.scdg_graph[prev_id][0].copy()\n\n            self.jump_dict[self.id] = self.jump_dict[prev_id].copy()\n            self.jump_concrete_dict[self.id] = self.jump_concrete_dict[prev_id].copy()\n\n            # Check if there is a jump table ('fork implying more than two states')\n            found_jmp_table = self.snapshot_state[prev_id] &gt; 1\n\n            # Manage jump of first state\n            self.check_fork_split(prev_id, found_jmp_table, state_fork2)\n\n            # Manage jump of second state\n            self.check_fork_split(prev_id, found_jmp_table, state_fork1)\n        else:\n            self.id = self.id - 1\n</code></pre>"},{"location":"reference/sema_toolchain/sema_scdg/application/explorer/SemaExplorer.html#sema_toolchain.sema_scdg.application.explorer.SemaExplorer.SemaExplorer.manage_unconstrained","title":"manage_unconstrained","text":"<pre><code>manage_unconstrained(simgr)\n</code></pre> <p>Manages unconstrained states during symbolic execution.</p> <p>This function tracks and logs the unconstrained states in the symbolic execution manager, providing information about the end of each unconstrained trace.</p> Source code in <code>sema_toolchain/sema_scdg/application/explorer/SemaExplorer.py</code> <pre><code>def manage_unconstrained(self, simgr):\n    \"\"\"\n    Manages unconstrained states during symbolic execution.\n\n    This function tracks and logs the unconstrained states in the symbolic execution manager, providing information about the end of each unconstrained trace.\n    \"\"\"\n    if len(simgr.unconstrained) &gt; self.unconstrained:\n        new_unconstrained = len(simgr.unconstrained) - self.unconstrained\n        for _ in range(new_unconstrained):\n            id_cur = simgr.unconstrained[-1].globals[\"id\"]\n            self.log.info(f\"End of the trace number {str(id_cur)} unconstrained\")\n        self.unconstrained = len(simgr.unconstrained)\n</code></pre>"},{"location":"reference/sema_toolchain/sema_scdg/application/explorer/SemaExplorer.html#sema_toolchain.sema_scdg.application.explorer.SemaExplorer.SemaExplorer.remove_exceeded_jump","title":"remove_exceeded_jump","text":"<pre><code>remove_exceeded_jump(simgr)\n</code></pre> <p>Removes states with exceeded jumps from the active stash.</p> <p>This function checks for states in the loopBreak_stack indicating exceeded jumps, logs information about the discarded states, and moves these states from the active stash to the \"ExcessLoop\" stash based on the guilty state ID.</p> Source code in <code>sema_toolchain/sema_scdg/application/explorer/SemaExplorer.py</code> <pre><code>def remove_exceeded_jump(self, simgr):\n    \"\"\"\n    Removes states with exceeded jumps from the active stash.\n\n    This function checks for states in the loopBreak_stack indicating exceeded jumps, logs information about the discarded states, and moves these states from the active stash to the \"ExcessLoop\" stash based on the guilty state ID.\n    \"\"\"\n    if len(self.loopBreak_stack) &gt; 0:\n        for i in range(len(self.loopBreak_stack)):\n            self.log.info(\"A state has been discarded because of jump\")\n            guilty_state_id, addr = self.loopBreak_stack.pop()\n            self.log.info(hex(addr))\n            simgr.move(\n                \"active\", \"ExcessLoop\", lambda s: s.globals[\"id\"] == guilty_state_id\n            )\n</code></pre>"},{"location":"reference/sema_toolchain/sema_scdg/application/explorer/SemaExplorer.html#sema_toolchain.sema_scdg.application.explorer.SemaExplorer.SemaExplorer.setup","title":"setup","text":"<pre><code>setup(simgr)\n</code></pre> <p>Sets up the exploration parameters and state management for symbolic execution.</p> <p>This function initializes various global variables and stashes in the symbolic execution manager to manage states during exploration.</p> Source code in <code>sema_toolchain/sema_scdg/application/explorer/SemaExplorer.py</code> <pre><code>def setup(self, simgr):\n    \"\"\"\n    Sets up the exploration parameters and state management for symbolic execution.\n\n    This function initializes various global variables and stashes in the symbolic execution manager to manage states during exploration.\n    \"\"\"\n    # The stash where states which exceed the threshold related to loops are moved. If new states are needed and there is no state available in pause\n    # or ExcessStep stash, states in this stash are used to resume exploration (their loop counter are put back to zero).\n    if self.excessLoop_stash not in simgr.stashes:\n        simgr.stashes[self.excessLoop_stash] = []\n\n    # The stash where states exceeding the threshold related to number of steps are moved. If new states are needed and there is no state available\n    # in pause stash, states in this stash are used to resume exploration (their step counter are put back to zero).\n    if self.excessStep_stash not in simgr.stashes:\n        simgr.stashes[self.excessStep_stash] = []\n\n    if self.deadbeef_stash not in simgr.stashes:\n        simgr.stashes[self.deadbeef_stash] = []\n\n    if self.lost_stash not in simgr.stashes:\n        simgr.stashes[self.lost_stash] = []\n\n    simgr.active[0].globals[\"id\"] = 0\n    simgr.active[0].globals[\"JumpExcedeed\"] = False\n    simgr.active[0].globals[\"n_steps\"] = 0\n    simgr.active[0].globals[\"loaded_libs\"] = {}\n    simgr.active[0].globals[\"addr_call\"] = []\n    simgr.active[0].globals[\"loop\"] = 0\n    simgr.active[0].globals[\"files\"] = {}\n    simgr.active[0].globals[\"is_thread\"] = False\n    simgr.active[0].globals[\"crypt_algo\"] = 0\n    simgr.active[0].globals[\"crypt_result\"] = 0\n    simgr.active[0].globals[\"n_buffer\"] = 0\n    simgr.active[0].globals[\"n_calls\"] = 0\n    simgr.active[0].globals[\"recv\"] = 0\n    simgr.active[0].globals[\"rsrc\"] = 0\n    simgr.active[0].globals[\"resources\"] = {}\n    simgr.active[0].globals[\"df\"] = 0\n    simgr.active[0].globals[\"n_calls_recv\"] = 0\n    simgr.active[0].globals[\"n_calls_send\"] = 0\n    simgr.active[0].globals[\"n_buffer_send\"] = 0\n    simgr.active[0].globals[\"buffer_send\"] = []\n    simgr.active[0].globals[\"FindFirstFile\"] = 0\n    simgr.active[0].globals[\"FindNextFile\"] = 0\n    simgr.active[0].globals[\"GetMessageA\"] = 0\n    simgr.active[0].globals[\"GetLastError\"] = claripy.BVS(\"last_error\", 32)\n    simgr.active[0].globals[\"HeapSize\"] = {}\n    simgr.active[0].globals[\"files_fd\"] = {}\n    simgr.active[0].globals[\"create_thread_address\"] = []\n    simgr.active[0].globals[\"allow_web_interaction\"] = False\n</code></pre>"},{"location":"reference/sema_toolchain/sema_scdg/application/explorer/SemaExplorer.html#sema_toolchain.sema_scdg.application.explorer.SemaExplorer.SemaExplorer.take_longuest","title":"take_longuest","text":"<pre><code>take_longuest(simgr, source_stash)\n</code></pre> <p>Take a state of source_stash with longuest amount of steps and append it to active stash @pre : source_stash exists</p> Source code in <code>sema_toolchain/sema_scdg/application/explorer/SemaExplorer.py</code> <pre><code>def take_longuest(self, simgr, source_stash):\n    \"\"\"\n    Take a state of source_stash with longuest amount of steps and append it to active stash\n    @pre : source_stash exists\n    \"\"\"\n    id_to_move = 0\n    max_step = 0\n    if len(simgr.stashes[source_stash]) &lt;= 0:\n        return\n\n    id_to_move = simgr.stashes[source_stash][0].globals[\"id\"]\n    max_step = simgr.stashes[source_stash][0].globals[\"n_steps\"]\n    for s in simgr.stashes[source_stash]:\n        if s.globals[\"n_steps\"] &gt; max_step:\n            id_to_move = s.globals[\"id\"]\n            max_step = s.globals[\"n_steps\"]\n\n    simgr.move(source_stash, \"active\", lambda s: s.globals[\"id\"] == id_to_move)\n</code></pre>"},{"location":"reference/sema_toolchain/sema_scdg/application/explorer/SemaExplorer.html#sema_toolchain.sema_scdg.application.explorer.SemaExplorer.SemaExplorer.take_smallest","title":"take_smallest","text":"<pre><code>take_smallest(simgr, source_stash)\n</code></pre> <p>Take a state of source_stash with smallest amount of steps and append it to active stash @pre : source_stash exists</p> Source code in <code>sema_toolchain/sema_scdg/application/explorer/SemaExplorer.py</code> <pre><code>def take_smallest(self, simgr, source_stash):\n    \"\"\"\n    Take a state of source_stash with smallest amount of steps and append it to active stash\n    @pre : source_stash exists\n    \"\"\"\n    id_to_move = 0\n    min_step = 2000\n    if len(simgr.stashes[source_stash]) &lt;= 0:\n        return\n\n    id_to_move = simgr.stashes[source_stash][0].globals[\"id\"]\n    min_step = simgr.stashes[source_stash][0].globals[\"n_steps\"]\n    for s in simgr.stashes[source_stash]:\n        if s.globals[\"n_steps\"] &lt; min_step or (\n            str(self.check_constraint(s, s.history.jump_target))\n            not in self.dict_addr_vis\n            and s.globals[\"n_steps\"] &lt;= min_step\n        ):\n            id_to_move = s.globals[\"id\"]\n            min_step = s.globals[\"n_steps\"]\n\n    simgr.move(source_stash, \"active\", lambda s: s.globals[\"id\"] == id_to_move)\n</code></pre>"},{"location":"reference/sema_toolchain/sema_scdg/application/explorer/SemaExplorer.html#sema_toolchain.sema_scdg.application.explorer.SemaExplorer.SemaExplorer.time_evaluation","title":"time_evaluation","text":"<pre><code>time_evaluation(simgr)\n</code></pre> <p>Evaluates states based on time constraints during symbolic execution.</p> <p>This function processes states based on time evaluation criteria, updating the state information in the SCFG graph and saving the results to files if the time evaluation conditions are met.</p> Source code in <code>sema_toolchain/sema_scdg/application/explorer/SemaExplorer.py</code> <pre><code>def time_evaluation(self, simgr):\n    \"\"\"\n    Evaluates states based on time constraints during symbolic execution.\n\n    This function processes states based on time evaluation criteria, updating the state information in the SCFG graph and saving the results to files if the time evaluation conditions are met.\n    \"\"\"\n    if not self.eval_time:\n        return\n    for new in [\"deadended\", \"active\", \"errored\", \"Excessloop\", \"ExcessStep\", \"unconstrained\"]:\n        for state in simgr.stashes[new]:\n            if new == \"errored\":\n                state = state.state\n            self.scdg_graph[state.globals[\"id\"]][0][\"ret\"] = new\n            self.scdg_fin.append(self.scdg_graph[state.globals[\"id\"]])\n\n    if self.time_id &gt;= len(self.timeout_tab):\n        self.log.info(\"All timeouts were tested !\")\n    else:\n        with open(self.exp_dir + self.nameFileShort + \"_SCDG_\" + str(self.timeout_tab[self.time_id]) + \".txt\",\"w\",) as save_SCDG:\n            for s in self.scdg_fin:\n                save_SCDG.write(str(s) + \"\\n\")\n        self.scdg_fin.clear()\n        self.time_id = self.time_id + 1\n</code></pre>"},{"location":"reference/sema_toolchain/sema_scdg/application/explorer/SemaExplorerBFS.html","title":"SemaExplorerBFS","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/explorer/SemaExplorerBFS.html#sema_toolchain.sema_scdg.application.explorer.SemaExplorerBFS","title":"SemaExplorerBFS","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/explorer/SemaExplorerCBFS.html","title":"SemaExplorerCBFS","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/explorer/SemaExplorerCBFS.html#sema_toolchain.sema_scdg.application.explorer.SemaExplorerCBFS","title":"SemaExplorerCBFS","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/explorer/SemaExplorerCDFS.html","title":"SemaExplorerCDFS","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/explorer/SemaExplorerCDFS.html#sema_toolchain.sema_scdg.application.explorer.SemaExplorerCDFS","title":"SemaExplorerCDFS","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/explorer/SemaExplorerDFS.html","title":"SemaExplorerDFS","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/explorer/SemaExplorerDFS.html#sema_toolchain.sema_scdg.application.explorer.SemaExplorerDFS","title":"SemaExplorerDFS","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/explorer/SemaExplorerManager.html","title":"SemaExplorerManager","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/explorer/SemaExplorerManager.html#sema_toolchain.sema_scdg.application.explorer.SemaExplorerManager","title":"SemaExplorerManager","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/helper/index.html","title":"Index","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/helper/index.html#sema_toolchain.sema_scdg.application.helper","title":"helper","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/helper/ArgumentParserSCDG.html","title":"ArgumentParserSCDG","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/helper/ArgumentParserSCDG.html#sema_toolchain.sema_scdg.application.helper.ArgumentParserSCDG","title":"ArgumentParserSCDG","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/helper/Debugger.html","title":"Debugger","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/helper/Debugger.html#sema_toolchain.sema_scdg.application.helper.Debugger","title":"Debugger","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/helper/Graph.html","title":"Graph","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/helper/Graph.html#sema_toolchain.sema_scdg.application.helper.Graph","title":"Graph","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/helper/GraphBuilder.html","title":"GraphBuilder","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/helper/GraphBuilder.html#sema_toolchain.sema_scdg.application.helper.GraphBuilder","title":"GraphBuilder","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/helper/GraphBuilder.html#sema_toolchain.sema_scdg.application.helper.GraphBuilder.GraphBuilder","title":"GraphBuilder","text":"<pre><code>GraphBuilder()\n</code></pre> Source code in <code>sema_toolchain/sema_scdg/application/helper/GraphBuilder.py</code> <pre><code>def __init__(self):\n    \"\"\"\n    Initialize GraphBuilder with configuration settings and logger.\n    \"\"\"\n    config = configparser.ConfigParser()\n    config.read(sys.argv[1])\n    self.config = config\n\n    self.DISCARD = {\n        \"LoopBreaker\",\n        \"Dummy_call\",\n    }  # Nodes used for debug purpose but not real syscall\n    self.TAKE = {}\n    self.id = 0\n    self.graph_file = None\n    self.existing_nodes = {}\n    self.current_trace_nodes = {}\n    self.id_map = 0\n    self.tabnode = []  # Nodes in gspan format\n    self.tablink = []  # Edges in gspan format\n    self.nodes = {}  # mapping Node ID --&gt; node name (addr.callname args)\n    self.mapping = {}\n    self.on_flight = False\n    self.dico_addr = {}\n\n    # Metrics about traces which add information in the graph (or not)\n    self.uselessTraces = 0\n    self.usefullTraces = 0\n    self.totTrace = 0\n\n    # Default value of parameters\n    self.graph_output = self.config['build_graph_arg']['graph_output']\n    self.MERGE_CALL = not self.config['build_graph_arg'].getboolean('disjoint_union')\n    self.COMP_ARGS = not self.config['build_graph_arg'].getboolean('not_comp_args')\n    self.MIN_SIZE = int(self.config['build_graph_arg']['min_size'])\n    self.IGNORE_ZERO = not self.config['build_graph_arg'].getboolean('not_ignore_zero')\n    self.three_edges = self.config['build_graph_arg'].getboolean('three_edges')\n    ROOT_DIR = os.path.dirname(os.path.abspath(__file__))\n    ROOT_DIR = ROOT_DIR.replace(\"/helper\", \"\")\n\n    self.__config_logger()\n</code></pre>"},{"location":"reference/sema_toolchain/sema_scdg/application/helper/GraphBuilder.html#sema_toolchain.sema_scdg.application.helper.GraphBuilder.GraphBuilder.add_link","title":"add_link","text":"<pre><code>add_link(graph, dico, call)\n</code></pre> <p>Add links between calls in the graph based on call arguments and return value.</p> <p>Parameters:</p> <ul> <li> <code>graph</code>           \u2013            <p>Graph representation.</p> </li> <li> <code>dico</code>           \u2013            <p>Dictionary used to build links between args.</p> </li> <li> <code>call</code>           \u2013            <p>Call information containing args and return value.</p> </li> </ul> Source code in <code>sema_toolchain/sema_scdg/application/helper/GraphBuilder.py</code> <pre><code>def add_link(self, graph, dico, call):\n    \"\"\"\n    Add links between calls in the graph based on call arguments and return value.\n\n    Args:\n        graph: Graph representation.\n        dico: Dictionary used to build links between args.\n        call: Call information containing args and return value.\n    \"\"\"\n    arg_id = 1\n    if call[\"args\"]:\n        for j in call[\"args\"]:\n            if str(j) in dico and str(j) not in [\" \", \"\", \"None\", \"0\"]:\n                self.__create_link((str(self.id), arg_id), dico[str(j)], graph)\n                dico[str(j)].append((self.id, arg_id))\n            elif str(j) in dico and str(j) == \"0\" and not self.IGNORE_ZERO:\n                self.__create_link((str(self.id), arg_id), dico[str(j)], graph)\n                dico[str(j)].append((self.id, arg_id))\n            else:\n                try:\n                    if (str(j) not in [\"\", \" \", \"None\"] and (not self.IGNORE_ZERO or int(str(j)) != 0)):\n                        dico[str(j)] = [(self.id, arg_id, j)]\n                except Exception:\n                    dico[str(j)] = [(self.id, arg_id, j)]\n            arg_id = arg_id + 1\n\n    ret = str(call[\"ret\"])\n\n    if call[\"ret\"] != None and ret != \"symbolic\":\n        try:\n            if (str(j) not in [\"\", \" \", \"None\"] and (not self.IGNORE_ZERO or int(ret) != 0)):\n                if ret in dico:\n                    self.__create_link((str(self.id), 0), dico[ret], graph)\n                    dico[ret].append((self.id, 0))\n                else:\n                    dico[ret] = [(self.id, 0)]\n        except Exception:\n            if ret in dico:\n                self.__create_link((str(self.id), 0), dico[ret], graph)\n                dico[ret].append((self.id, 0))\n            else:\n                dico[ret] = [(self.id, 0)]\n    return dico\n</code></pre>"},{"location":"reference/sema_toolchain/sema_scdg/application/helper/GraphBuilder.html#sema_toolchain.sema_scdg.application.helper.GraphBuilder.GraphBuilder.build","title":"build","text":"<pre><code>build(stashes_content, mapping, odir, family)\n</code></pre> <p>Build the system call dependency graph using the list representing the syscalls and the mapping.</p> <p>Parameters:</p> <ul> <li> <code>stashes_content</code>           \u2013            <p>Content of the stashes.</p> </li> <li> <code>mapping</code>           \u2013            <p>Name of the file for the mapping to use.</p> </li> <li> <code>odir</code>           \u2013            <p>Output directory for the graph.</p> </li> <li> <code>family</code>           \u2013            <p>Family of the graph.</p> </li> </ul> Source code in <code>sema_toolchain/sema_scdg/application/helper/GraphBuilder.py</code> <pre><code>def build(self, stashes_content, mapping, odir, family):\n    \"\"\"\n    Build the system call dependency graph using the list representing the syscalls and the mapping.\n\n    Args:\n        stashes_content: Content of the stashes.\n        mapping: Name of the file for the mapping to use.\n        odir: Output directory for the graph.\n        family: Family of the graph.\n    \"\"\"\n    self.__set_graph_parameters(mapping, odir, family)\n    if self.graph_output == \"\":\n        self.__build_graph(stashes_content, graph_output=\"gs\")\n        self.__build_graph(stashes_content, graph_output=\"json\", gv = False)\n    else :\n        self.__build_graph(stashes_content, graph_output=self.graph_output)\n</code></pre>"},{"location":"reference/sema_toolchain/sema_scdg/application/helper/GraphBuilder.html#sema_toolchain.sema_scdg.application.helper.GraphBuilder.GraphBuilder.clear","title":"clear","text":"<pre><code>clear()\n</code></pre> <p>Reset all lists and dictionaries of the object.</p> <p>Metrics about traces which add information in the graph (or not) are reset to zero.</p> Source code in <code>sema_toolchain/sema_scdg/application/helper/GraphBuilder.py</code> <pre><code>def clear(self):\n    \"\"\"\n    Reset all lists and dictionaries of the object.\n\n    Metrics about traces which add information in the graph (or not) are reset to zero.\n    \"\"\"\n    self.TAKE.clear()\n    self.id = 0\n    self.graph_file = None\n    self.existing_nodes.clear()\n    self.current_trace_nodes.clear()\n    self.id_map = 0\n    self.tabnode.clear()  # Nodes in gspan format\n    self.tablink.clear()  # Edges in gspan format\n    self.nodes.clear()  # mapping Node ID --&gt; node name (addr.callname args)\n    self.mapping.clear()\n    self.on_flight = False\n    self.dico_addr.clear()\n\n    # Metrics about traces which add information in the graph (or not)\n    self.uselessTraces = 0\n    self.usefullTraces = 0\n    self.totTrace = 0\n</code></pre>"},{"location":"reference/sema_toolchain/sema_scdg/application/helper/GraphBuilder.html#sema_toolchain.sema_scdg.application.helper.GraphBuilder.GraphBuilder.reset_attributes","title":"reset_attributes","text":"<pre><code>reset_attributes()\n</code></pre> <p>Reset attributes used in the graph building process.</p> <p>Clears various attributes to prepare for building a new graph.</p> Source code in <code>sema_toolchain/sema_scdg/application/helper/GraphBuilder.py</code> <pre><code>def reset_attributes(self):\n    \"\"\"\n    Reset attributes used in the graph building process.\n\n    Clears various attributes to prepare for building a new graph.\n    \"\"\"\n    self.id = 0\n    self.tabnode = []\n    self.tablink = []\n    self.dico_addr.clear()\n    self.existing_nodes.clear()\n    self.current_trace_nodes.clear()\n    self.nodes.clear()\n</code></pre>"},{"location":"reference/sema_toolchain/sema_scdg/application/helper/GraphBuilder.html#sema_toolchain.sema_scdg.application.helper.GraphBuilder.GraphBuilder.save_result","title":"save_result","text":"<pre><code>save_result(graph_output, json_content)\n</code></pre> <p>Save the result of the graph building process.</p> <p>Parameters:</p> <ul> <li> <code>graph_output</code>           \u2013            <p>Output format for the graph.</p> </li> <li> <code>json_content</code>           \u2013            <p>JSON content to be saved.</p> </li> </ul> Source code in <code>sema_toolchain/sema_scdg/application/helper/GraphBuilder.py</code> <pre><code>def save_result(self, graph_output, json_content):\n    \"\"\"\n    Save the result of the graph building process.\n\n    Args:\n        graph_output: Output format for the graph.\n        json_content: JSON content to be saved.\n    \"\"\"\n    if graph_output == \"json\":\n        json.dump(json_content, self.graph_file)\n    self.graph_file.close()\n\n    if self.on_flight:\n        with open(self.mapping_dir, \"w\") as out_map:\n            for key in self.mapping:\n                out_map.write(f\"{str(self.mapping[key])} {str(key)}\" + \"\\n\")\n</code></pre>"},{"location":"reference/sema_toolchain/sema_scdg/application/helper/GraphBuilder.html#sema_toolchain.sema_scdg.application.helper.GraphBuilder.GraphBuilder.scdg_with_disjoint_union","title":"scdg_with_disjoint_union","text":"<pre><code>scdg_with_disjoint_union(SCDG, graph_output, json_content)\n</code></pre> <p>Build the system call dependency graph with disjoint union.</p> <p>Parameters:</p> <ul> <li> <code>SCDG</code>           \u2013            <p>List representing syscalls.</p> </li> <li> <code>graph_output</code>           \u2013            <p>Output format for the graph.</p> </li> <li> <code>json_content</code>           \u2013            <p>Dictionary to store JSON content.</p> </li> </ul> <p>Returns:</p> <ul> <li>           \u2013            <p>None</p> </li> </ul> Source code in <code>sema_toolchain/sema_scdg/application/helper/GraphBuilder.py</code> <pre><code>def scdg_with_disjoint_union(self, SCDG, graph_output, json_content):\n    \"\"\"\n    Build the system call dependency graph with disjoint union.\n\n    Args:\n        SCDG: List representing syscalls.\n        graph_output: Output format for the graph.\n        json_content: Dictionary to store JSON content.\n\n    Returns:\n        None\n    \"\"\"\n    dot = Digraph(comment=\"SCDG with disjoint union\", format=\"dot\")\n    for i in range(len(SCDG)):\n        if len(SCDG[i]) &gt;= self.MIN_SIZE:\n            json_content[f\"graph_{str(i)}\"] = {\"nodes\": [], \"links\": []}\n            self.__build_links(SCDG[i], dot)\n\n            for n in self.tabnode:\n                if graph_output == \"json\":\n                    id_node = n.replace(\"\\n\", \"\").split(\" \")[1]\n                    node_name = self.nodes[id_node].split(\" \")[0]\n                    arg_node = self.nodes[id_node].split(\" \")[1].split(\"\\n\")\n                    content = self.existing_nodes[node_name]\n                    newnode = {\n                            \"id\": id_node,\n                            \"name\": content[\"name\"],\n                            \"addr\": node_name.split(\".\")[0],\n                            \"args\": arg_node,\n                        }\n                    json_content[f\"graph_{str(i)}\"][\"nodes\"].append(newnode)\n                else:\n                    self.graph_file.write(n)\n            for l in self.tablink:\n                if graph_output == \"json\":\n                    tab_split = l.split(\" \")\n                    newlink = {\n                            \"id1\": tab_split[1],\n                            \"id2\": tab_split[2],\n                            \"label\": tab_split[3],\n                        }\n                    json_content[f\"graph_{str(i)}\"][\"links\"].append(newlink)\n                else:\n                    self.graph_file.write(l)\n\n            dot.save(f\"{self.odir}/test-output/disjoint_union{str(i)}.gv\")\n            self.reset_attributes()\n            dot.clear()\n    dot.save(f\"{self.odir}/test-output/disjoint_union.gv\")\n</code></pre>"},{"location":"reference/sema_toolchain/sema_scdg/application/helper/GraphBuilder.html#sema_toolchain.sema_scdg.application.helper.GraphBuilder.GraphBuilder.scdg_with_merge_calls","title":"scdg_with_merge_calls","text":"<pre><code>scdg_with_merge_calls(SCDG, graph_output, gv, json_content)\n</code></pre> <p>Build the system call dependency graph with merge calls.</p> <p>Parameters:</p> <ul> <li> <code>SCDG</code>           \u2013            <p>List representing syscalls.</p> </li> <li> <code>graph_output</code>           \u2013            <p>Output format for the graph.</p> </li> <li> <code>gv</code>           \u2013            <p>Boolean to determine if the function should also provide the gv graph.</p> </li> <li> <code>json_content</code>           \u2013            <p>Dictionary to store JSON content.</p> </li> </ul> Source code in <code>sema_toolchain/sema_scdg/application/helper/GraphBuilder.py</code> <pre><code>def scdg_with_merge_calls(self, SCDG, graph_output, gv, json_content):\n    \"\"\"\n    Build the system call dependency graph with merge calls.\n\n    Args:\n        SCDG: List representing syscalls.\n        graph_output: Output format for the graph.\n        gv: Boolean to determine if the function should also provide the gv graph.\n        json_content: Dictionary to store JSON content.\n    \"\"\"\n    json_content[\"nodes\"] = []\n    json_content[\"links\"] = []\n\n    dico = {}\n    dot = Digraph(comment=\"Global SCDG with merge call\", format=\"dot\")\n\n    for i in range(len(SCDG)):\n        self.log.info(f\"Using SCDG {str(i + 1)} over {len(SCDG)}\")\n\n        if len(SCDG[i]) &gt;= self.MIN_SIZE:\n            self.__build_links(SCDG[i], dot, dico)\n        else:\n            self.log.info(\n                f\"The SCDG {str(i)} was too small, smaller than {str(self.MIN_SIZE)} calls.\"\n            )\n        self.current_trace_nodes.clear()\n\n    # Save data parts\n    for n in self.tabnode:\n        if graph_output == \"json\":\n            id_node = n.replace(\"\\n\", \"\").split(\" \")[1]\n            node_name = self.nodes[id_node].split(\" \")[0]\n            arg_node = self.nodes[id_node].split(\" \")[1].split(\"\\n\")\n            content = self.existing_nodes[node_name]\n            newnode = {\n                    \"id\": id_node,\n                    \"name\": content[\"name\"],\n                    \"addr\": node_name.split(\".\")[0],\n                    \"args\": arg_node,\n                }\n            json_content[\"nodes\"].append(newnode)\n        else:\n            self.graph_file.write(n)\n    for l in self.tablink:\n        if graph_output == \"json\":\n            tab_split = l.split(\" \")\n            newlink = {\n                    \"id1\": tab_split[1],\n                    \"id2\": tab_split[2],\n                    \"label\": tab_split[3].replace(\"\\n\", \"\"),\n                }\n            json_content[\"links\"].append(newlink)\n        else:\n            self.graph_file.write(l)\n    if gv:\n        dot.save(f\"{self.odir}/final_SCDG.gv\")\n</code></pre>"},{"location":"reference/sema_toolchain/sema_scdg/application/helper/MergeGspan.html","title":"MergeGspan","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/helper/MergeGspan.html#sema_toolchain.sema_scdg.application.helper.MergeGspan","title":"MergeGspan","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/helper/PlotResults.html","title":"PlotResults","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/helper/PlotResults.html#sema_toolchain.sema_scdg.application.helper.PlotResults","title":"PlotResults","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/helper/SyscallToSCDG.html","title":"SyscallToSCDG","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/helper/SyscallToSCDG.html#sema_toolchain.sema_scdg.application.helper.SyscallToSCDG","title":"SyscallToSCDG","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/helper/SyscallToSCDG.html#sema_toolchain.sema_scdg.application.helper.SyscallToSCDG.SyscallToSCDG","title":"SyscallToSCDG","text":"<pre><code>SyscallToSCDG(scdg)\n</code></pre> <p>Class to map syscalls to their corresponding SCDG nodes and handle syscall behavior.</p> <p>Parameters:</p> <ul> <li> <code>scdg</code>           \u2013            <p>The SCDG object to initialize the SyscallToSCDG with.</p> </li> </ul> Source code in <code>sema_toolchain/sema_scdg/application/helper/SyscallToSCDG.py</code> <pre><code>def __init__(self, scdg):\n    \"\"\"\n    Initialize the SyscallToSCDG object with the given SCDG.\n\n    Args:\n        scdg: The SCDG object to initialize the SyscallToSCDG with.\n    \"\"\"\n    config = configparser.ConfigParser()\n    config.read(sys.argv[1])\n    self.config = config\n    self.scdg = scdg\n    self.string_resolv = config['SCDG_arg'].getboolean('string_resolve')\n    self.print_syscall = config['SCDG_arg'].getboolean('print_syscall')\n    self.__config_logger()\n</code></pre>"},{"location":"reference/sema_toolchain/sema_scdg/application/helper/SyscallToSCDG.html#sema_toolchain.sema_scdg.application.helper.SyscallToSCDG.SyscallToSCDG.add_SysCall","title":"add_SysCall","text":"<pre><code>add_SysCall(syscall, n_args, state)\n</code></pre> <p>Add a syscall call to the SCDG based on the state information.</p> <p>Parameters:</p> <ul> <li> <code>syscall</code>           \u2013            <p>The name of the syscall.</p> </li> <li> <code>n_args</code>           \u2013            <p>The number of arguments for the syscall.</p> </li> <li> <code>state</code>           \u2013            <p>The state object containing information about the execution state.</p> </li> </ul> Source code in <code>sema_toolchain/sema_scdg/application/helper/SyscallToSCDG.py</code> <pre><code>def add_SysCall(self, syscall, n_args, state):\n    \"\"\"\n    Add a syscall call to the SCDG based on the state information.\n\n    Args:\n        syscall: The name of the syscall.\n        n_args: The number of arguments for the syscall.\n        state: The state object containing information about the execution state.\n    \"\"\"\n    dic = {}\n\n    name = syscall\n    sim_proc = state.inspect.simprocedure\n    name = state.inspect.simprocedure_name\n    state.project\n    args = sim_proc.arguments or []\n\n    regs = sim_proc.cc.ARG_REGS\n\n    if name in [\"rt_sigaction\", \"sigaction\"]:\n        state.inspect.simprocedure_result = state.solver.BVV(0, state.arch.bits)\n\n    # Get proto of the function\n    for key in self.call_sim.system_call_table.keys():\n        if name in self.call_sim.system_call_table[key]:\n            self.call_sim.system_call_table[key][name]\n\n    if n_args &gt; 0 and n_args &lt; len(regs):\n        regs = regs[:n_args]\n        for reg in regs:\n            try:\n                reg = getattr(state.regs, reg)\n            except Exception:\n                reg = None\n            reg = self.__proper_formating(state, reg)\n            args.append(reg)\n\n    dic[\"name\"] = name\n\n    # Transform if option enabled\n    if self.string_resolv and args:\n        args, dic = self.__check_syscall_string(syscall, state, args, dic)\n\n    if syscall in self.FUNCTION_HANDLER:\n        self.FUNCTION_HANDLER[syscall](state)\n\n    if args:\n        for i in range(len(args)):\n            args[i] = self.__proper_formating(state, args[i])\n\n    dic[\"args\"] = args\n    dic[\"addr_func\"] = hex(state.addr)\n    if len(state.globals[\"addr_call\"]) &gt; 0:\n        dic[\"addr\"] = hex(state.globals[\"addr_call\"][-1])\n    else:\n        dic[\"addr\"] = hex(state.addr)\n\n    if syscall in self.FUNCTION_RETURNS:\n        ret = self.FUNCTION_RETURNS[syscall](state)\n        self.log.info(f\"return value of {str(name)} :{str(ret)}\")\n        dic[\"ret\"] = hex(ret)\n    else:\n        dic[\"ret\"] = hex(0)\n\n    id = state.globals[\"id\"]\n\n    if len(self.scdg) == 0:\n        self.scdg.append([dic])\n    else:\n        if len(self.scdg[id][-1]) != 0:\n            # if same address and different name, we have an inline call (call to another simprocedure used during the hook), discard !\n            if (self.scdg[id][-1][\"addr\"] == dic[\"addr\"] and self.scdg[id][-1][\"name\"] != dic[\"name\"]):\n                return\n\n            self.scdg[id].append(dic)\n\n        return\n</code></pre>"},{"location":"reference/sema_toolchain/sema_scdg/application/helper/SyscallToSCDG.html#sema_toolchain.sema_scdg.application.helper.SyscallToSCDG.SyscallToSCDG.add_addr_call","title":"add_addr_call","text":"<pre><code>add_addr_call(state)\n</code></pre> <p>Add the current instruction address to the list of addresses in the global state.</p> <p>Parameters:</p> <ul> <li> <code>state</code>           \u2013            <p>The state object containing information about the execution state.</p> </li> </ul> Source code in <code>sema_toolchain/sema_scdg/application/helper/SyscallToSCDG.py</code> <pre><code>def add_addr_call(self, state):\n    \"\"\"\n    Add the current instruction address to the list of addresses in the global state.\n\n    Args:\n        state: The state object containing information about the execution state.\n    \"\"\"\n    test = state.globals[\"addr_call\"] + [state.scratch.ins_addr]\n    state.globals[\"addr_call\"] = test\n</code></pre>"},{"location":"reference/sema_toolchain/sema_scdg/application/helper/SyscallToSCDG.html#sema_toolchain.sema_scdg.application.helper.SyscallToSCDG.SyscallToSCDG.add_call","title":"add_call","text":"<pre><code>add_call(state)\n</code></pre> <p>Add a syscall call to the SCDG based on the state.</p> <p>Parameters:</p> <ul> <li> <code>state</code>           \u2013            <p>The state containing information about the syscall.</p> </li> </ul> Source code in <code>sema_toolchain/sema_scdg/application/helper/SyscallToSCDG.py</code> <pre><code>def add_call(self, state):\n    \"\"\"\n    Add a syscall call to the SCDG based on the state.\n\n    Args:\n        state: The state containing information about the syscall.\n    \"\"\"\n    name = state.inspect.simprocedure_name\n\n    if name in self.AVOID:\n        return\n\n    sim_proc = state.inspect.simprocedure\n\n    callee = None\n    callee_arg = None\n    if (sim_proc\n        and sim_proc.is_syscall\n        and str(sim_proc.syscall_number) in self.call_sim.system_call_table\n        and self.print_syscall\n    ):\n        self.log.info(\"syscall detected\")\n        self.log.info(state.inspect.simprocedure_result)\n        self.log.info(self.call_sim.system_call_table[str(sim_proc.syscall_number)])\n        self.call_sim.system_call_table[str(sim_proc.syscall_number)][\"num_args\"]\n\n    # Get definition of windows syscall (e.g.:for extraction of possible strings)\n    # TODO : Optimize this heavy loop\n    for key in self.call_sim.system_call_table.keys():\n        if name in self.call_sim.system_call_table[key]:\n            callee = self.call_sim.system_call_table[key][name]\n            callee_arg = callee[\"arguments\"]\n            break\n    if not callee and state.globals[\"loaded_libs\"]:\n        for k, lib in state.globals[\"loaded_libs\"].items():\n            if lib not in self.call_sim.system_call_table.keys():\n                self.call_sim.ddl_loader.load_more(lib, self.call_sim.system_call_table)\n\n    id = state.globals[\"id\"]\n    args = sim_proc.arguments if sim_proc else []\n\n    if name:\n        key_name = str(name)\n        if key_name not in self.call_sim.syscall_found:\n            self.call_sim.syscall_found[key_name] = 1\n        else:\n            self.call_sim.syscall_found[key_name] = self.call_sim.syscall_found[key_name] + 1\n        self.log.info(f\"Syscall found:  {str(name)}{str(args)}\")\n\n    if args:\n        name_to_check =  self.scdg[id][-1][\"name\"]\n        possibilities = { \"writev\": \"write\", \"readv\":\"read\", \"socketcall\": \"\" }\n        if name_to_check == name:\n            for i in range(len(args)):\n                args[i] = self.__proper_formating(state, args[i])\n                temp = args[i]\n                try:\n                    args[i] = self.if_wstring_call(state, callee_arg, args, i)\n                except Exception:\n                    args[i] = temp\n                try:\n                    args[i] = self.if_string_concrete_call(state, callee_arg, args, i)\n                except Exception:\n                    args[i] = temp\n                try:\n                    args[i] = self.if_char_call(state, callee_arg, args, i)\n                except Exception:\n                    args[i] = temp\n                try:\n                    if (self.string_resolv and callee_arg and args[i] != 0 and (\"PCUNICODESTRING\" in callee_arg[i][\"type\"])):\n                        addr = self.state.memory.load(args[i]+4,4,endness=archinfo.Endness.LE)\n                        args[i] = self.state.mem[addr].wstring.concrete\n                except Exception:\n                    args[i] = temp\n\n            if self.string_resolv and args:\n                string_func = [self.FUNCTION_STRING, self.FUNCTION_WSTRING, self.FUNCTION_CHAR]\n                for i in range(len(string_func)):\n                    func = string_func[i]\n                    if name in func:\n                        index_str = func[name]\n                        try:\n                            # FUNCTION_STRING\n                            if i == 0:\n                                string = state.mem[args[index_str]].string.concrete\n                                args[index_str] = self.__decode_string(string)\n                            # FUNCTION_WSTRING\n                            elif i == 1:\n                                string = state.mem[args[index_str]].wstring.concrete\n                                args[index_str] = string\n                            # FUNCTION_CHAR\n                            elif i == 2:\n                                string = chr(args[index_str])\n                                args[index_str] = string\n                        except Exception :\n                            print(\"Error in string resolv\")\n\n            self.scdg[id][-1][\"args\"] = args\n\n            if self.scdg[id][-1][\"ret\"] != \"symbolic\" and name not in self.FUNCTION_RETURNS:\n                ret = -22\n                try:\n                    ret = state.solver.eval_one(state.inspect.simprocedure_result)\n                except Exception:\n                    ret = self.switch_to_claripy(state)\n                self.scdg[id][-1][\"ret\"] = ret\n\n            if (name == \"write\"\n                and len(self.scdg[id]) &gt; 1\n                and self.scdg[id][-2][\"name\"] == \"write\"\n                and self.scdg[id][-1][\"addr\"] == self.scdg[id][-1][\"addr\"]\n                and sim_proc.use_state_arguments\n            ):\n                self.scdg[id][-2][\"args\"][1] = str(self.scdg[id][-2][\"args\"][1]) + str(self.scdg[id][-1][\"args\"][1])\n                self.scdg[id].pop()\n\n            return\n\n        elif name_to_check in possibilities:\n            if name_to_check != \"socketcall\":\n                self.scdg[id][-1][\"name\"] = possibilities[name_to_check]\n            elif name in self.SOCKETCALL_dic:\n                self.scdg[id][-1][\"name\"] = name\n            for i in range(len(args)):\n                args[i] = self.__proper_formating(state, args[i])\n            self.scdg[id][-1][\"args\"] = args\n\n            try:\n                ret = state.solver.eval_one(state.inspect.simprocedure_result)\n            except Exception:\n                ret = self.switch_to_claripy(state)\n            self.scdg[id][-1][\"ret\"] = ret\n</code></pre>"},{"location":"reference/sema_toolchain/sema_scdg/application/helper/SyscallToSCDG.html#sema_toolchain.sema_scdg.application.helper.SyscallToSCDG.SyscallToSCDG.add_call_debug","title":"add_call_debug","text":"<pre><code>add_call_debug(state)\n</code></pre> <p>Add a syscall call to the SCDG for debugging purposes.</p> <p>Parameters:</p> <ul> <li> <code>state</code>           \u2013            <p>The state object containing information about the execution state.</p> </li> </ul> Source code in <code>sema_toolchain/sema_scdg/application/helper/SyscallToSCDG.py</code> <pre><code>def add_call_debug(self, state):\n    \"\"\"\n    Add a syscall call to the SCDG for debugging purposes.\n\n    Args:\n        state: The state object containing information about the execution state.\n    \"\"\"\n    name = state.inspect.simprocedure_name\n    sim_proc = state.inspect.simprocedure\n    n_args = 0\n\n    if name in self.AVOID:\n        return\n\n    if sim_proc:\n        n_args = sim_proc.num_args\n\n    self.add_SysCall(name, n_args, state)\n</code></pre>"},{"location":"reference/sema_toolchain/sema_scdg/application/helper/SyscallToSCDG.html#sema_toolchain.sema_scdg.application.helper.SyscallToSCDG.SyscallToSCDG.if_char_call","title":"if_char_call","text":"<pre><code>if_char_call(state, callee_arg, args, i)\n</code></pre> <p>Check and decode character arguments if string resolution is enabled.</p> <p>Parameters:</p> <ul> <li> <code>state</code>           \u2013            <p>The state object containing information about the execution state.</p> </li> <li> <code>callee_arg</code>           \u2013            <p>The callee arguments dictionary.</p> </li> <li> <code>args</code>           \u2013            <p>The arguments to check and decode.</p> </li> <li> <code>i</code>           \u2013            <p>The index of the argument to process.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>str</code>          \u2013            <p>The decoded string argument if applicable.</p> </li> </ul> Source code in <code>sema_toolchain/sema_scdg/application/helper/SyscallToSCDG.py</code> <pre><code>def if_char_call(self, state, callee_arg, args, i):\n    \"\"\"\n    Check and decode character arguments if string resolution is enabled.\n\n    Args:\n        state: The state object containing information about the execution state.\n        callee_arg: The callee arguments dictionary.\n        args: The arguments to check and decode.\n        i: The index of the argument to process.\n\n    Returns:\n        str: The decoded string argument if applicable.\n    \"\"\"\n    if (self.string_resolv and callee_arg and args[i] != 0 and\n        (\"LPCTSTR\" in callee_arg[i][\"type\"]\n        or \"LPTSTR\" in callee_arg[i][\"type\"]\n        or \"PTSTR\" in callee_arg[i][\"type\"]\n        or \"PCTSTR\" in callee_arg[i][\"type\"]\n        or \"LPCCH\" in callee_arg[i][\"type\"]\n    )):\n        string = ''\n        if state.solver.eval(state.memory.load(args[i]+1,1)) == 0x0:\n            string = state.mem[args[i]].wstring.concrete\n        else:\n            string = state.mem[args[i]].string.concrete\n\n        args[i] = self.__decode_string(string)\n    return args[i]\n</code></pre>"},{"location":"reference/sema_toolchain/sema_scdg/application/helper/SyscallToSCDG.html#sema_toolchain.sema_scdg.application.helper.SyscallToSCDG.SyscallToSCDG.if_string_concrete_call","title":"if_string_concrete_call","text":"<pre><code>if_string_concrete_call(state, callee_arg, args, i)\n</code></pre> <p>Check and decode string arguments if string resolution is enabled.</p> <p>Parameters:</p> <ul> <li> <code>state</code>           \u2013            <p>The state object containing information about the execution state.</p> </li> <li> <code>callee_arg</code>           \u2013            <p>The callee arguments dictionary.</p> </li> <li> <code>args</code>           \u2013            <p>The arguments to check and decode.</p> </li> <li> <code>i</code>           \u2013            <p>The index of the argument to process.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>str</code>          \u2013            <p>The decoded string argument if applicable.</p> </li> </ul> Source code in <code>sema_toolchain/sema_scdg/application/helper/SyscallToSCDG.py</code> <pre><code>def if_string_concrete_call(self, state, callee_arg, args, i):\n    \"\"\"\n    Check and decode string arguments if string resolution is enabled.\n\n    Args:\n        state: The state object containing information about the execution state.\n        callee_arg: The callee arguments dictionary.\n        args: The arguments to check and decode.\n        i: The index of the argument to process.\n\n    Returns:\n        str: The decoded string argument if applicable.\n    \"\"\"\n    if (self.string_resolv and callee_arg and args[i] != 0\n        and (\"LPCSTR\" in callee_arg[i][\"type\"]\n        or \"LPSTR\" in callee_arg[i][\"type\"]\n        or \"const char*\" in callee_arg[i][\"type\"]\n        or \"PSTR\" in callee_arg[i][\"type\"]\n        or \"PCSTR\" in callee_arg[i][\"type\"]\n        or \"LPCH\" in callee_arg[i][\"type\"]\n    )):\n        string = state.mem[args[i]].string.concrete\n        args[i] = self.__decode_string(string)\n    return args[i]\n</code></pre>"},{"location":"reference/sema_toolchain/sema_scdg/application/helper/SyscallToSCDG.html#sema_toolchain.sema_scdg.application.helper.SyscallToSCDG.SyscallToSCDG.if_wstring_call","title":"if_wstring_call","text":"<pre><code>if_wstring_call(state, callee_arg, args, i)\n</code></pre> <p>Check and decode wide string arguments if string resolution is enabled.</p> <p>Parameters:</p> <ul> <li> <code>state</code>           \u2013            <p>The state object containing information about the execution state.</p> </li> <li> <code>callee_arg</code>           \u2013            <p>The callee arguments dictionary.</p> </li> <li> <code>args</code>           \u2013            <p>The arguments to check and decode.</p> </li> <li> <code>i</code>           \u2013            <p>The index of the argument to process.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>str</code>          \u2013            <p>The decoded wide string argument if applicable.</p> </li> </ul> Source code in <code>sema_toolchain/sema_scdg/application/helper/SyscallToSCDG.py</code> <pre><code>def if_wstring_call(self, state, callee_arg, args, i):\n    \"\"\"\n    Check and decode wide string arguments if string resolution is enabled.\n\n    Args:\n        state: The state object containing information about the execution state.\n        callee_arg: The callee arguments dictionary.\n        args: The arguments to check and decode.\n        i: The index of the argument to process.\n\n    Returns:\n        str: The decoded wide string argument if applicable.\n    \"\"\"\n    if (self.string_resolv and callee_arg and args[i] != 0 and\n        (\"LPCWSTR\" in callee_arg[i][\"type\"]\n        or \"LPWSTR\" in callee_arg[i][\"type\"]\n        or \"wchar_t*const\" in callee_arg[i][\"type\"]\n        or \"OLECHAR\" in callee_arg[i][\"type\"]\n        or \"PWSTR\" in callee_arg[i][\"type\"]\n        or \"PCWSTR\" in callee_arg[i][\"type\"]\n        or \"LPCWCH\" in callee_arg[i][\"type\"]\n    )):\n        string = state.mem[args[i]].wstring.concrete\n\n        args[i] = self.__decode_string(string)\n    return args[i]\n</code></pre>"},{"location":"reference/sema_toolchain/sema_scdg/application/helper/SyscallToSCDG.html#sema_toolchain.sema_scdg.application.helper.SyscallToSCDG.SyscallToSCDG.rm_addr_call","title":"rm_addr_call","text":"<pre><code>rm_addr_call(state)\n</code></pre> <p>Remove the first address from the list of addresses in the global state if there is more than one address.</p> <p>Parameters:</p> <ul> <li> <code>state</code>           \u2013            <p>The state object containing information about the execution state.</p> </li> </ul> Source code in <code>sema_toolchain/sema_scdg/application/helper/SyscallToSCDG.py</code> <pre><code>def rm_addr_call(self, state):\n    \"\"\"\n    Remove the first address from the list of addresses in the global state if there is more than one address.\n\n    Args:\n        state: The state object containing information about the execution state.\n    \"\"\"\n    calls = state.globals[\"addr_call\"]\n    if len(calls) &gt; 1:\n        state.globals[\"addr_call\"] = calls[1:]\n</code></pre>"},{"location":"reference/sema_toolchain/sema_scdg/application/helper/SyscallToSCDG.html#sema_toolchain.sema_scdg.application.helper.SyscallToSCDG.SyscallToSCDG.set_call_sim","title":"set_call_sim","text":"<pre><code>set_call_sim(call_sim)\n</code></pre> <p>Set the call simulation for the SyscallToSCDG object.</p> <p>Parameters:</p> <ul> <li> <code>call_sim</code>           \u2013            <p>The call simulation object to set.</p> </li> </ul> Source code in <code>sema_toolchain/sema_scdg/application/helper/SyscallToSCDG.py</code> <pre><code>def set_call_sim(self, call_sim):\n    \"\"\"\n    Set the call simulation for the SyscallToSCDG object.\n\n    Args:\n        call_sim: The call simulation object to set.\n    \"\"\"\n    self.call_sim = call_sim\n</code></pre>"},{"location":"reference/sema_toolchain/sema_scdg/application/helper/SyscallToSCDG.html#sema_toolchain.sema_scdg.application.helper.SyscallToSCDG.SyscallToSCDG.switch_to_claripy","title":"switch_to_claripy","text":"<pre><code>switch_to_claripy(state)\n</code></pre> <p>Switches the result to a claripy object if possible.</p> <p>Parameters:</p> <ul> <li> <code>state</code>           \u2013            <p>The state object containing information about the execution state.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>str</code>          \u2013            <p>The name of the claripy object if available, else a string representation of the object.</p> </li> </ul> Source code in <code>sema_toolchain/sema_scdg/application/helper/SyscallToSCDG.py</code> <pre><code>def switch_to_claripy(self, state):\n    \"\"\"\n    Switches the result to a claripy object if possible.\n\n    Args:\n        state: The state object containing information about the execution state.\n\n    Returns:\n        str: The name of the claripy object if available, else a string representation of the object.\n    \"\"\"\n    stub = state.inspect.simprocedure_result\n    if hasattr(stub, \"to_claripy\"):\n        stub = stub.to_claripy()\n    return stub.name if hasattr(stub, \"name\") else str(stub)\n</code></pre>"},{"location":"reference/sema_toolchain/sema_scdg/application/plugin/index.html","title":"Index","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/plugin/index.html#sema_toolchain.sema_scdg.application.plugin","title":"plugin","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/plugin/PluginAtom.html","title":"PluginAtom","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/plugin/PluginAtom.html#sema_toolchain.sema_scdg.application.plugin.PluginAtom","title":"PluginAtom","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/plugin/PluginCommands.html","title":"PluginCommands","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/plugin/PluginCommands.html#sema_toolchain.sema_scdg.application.plugin.PluginCommands","title":"PluginCommands","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/plugin/PluginEnvVar.html","title":"PluginEnvVar","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/plugin/PluginEnvVar.html#sema_toolchain.sema_scdg.application.plugin.PluginEnvVar","title":"PluginEnvVar","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/plugin/PluginEvasion.html","title":"PluginEvasion","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/plugin/PluginEvasion.html#sema_toolchain.sema_scdg.application.plugin.PluginEvasion","title":"PluginEvasion","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/plugin/PluginHooks.html","title":"PluginHooks","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/plugin/PluginHooks.html#sema_toolchain.sema_scdg.application.plugin.PluginHooks","title":"PluginHooks","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/plugin/PluginIoC.html","title":"PluginIoC","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/plugin/PluginIoC.html#sema_toolchain.sema_scdg.application.plugin.PluginIoC","title":"PluginIoC","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/plugin/PluginLocaleInfo.html","title":"PluginLocaleInfo","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/plugin/PluginLocaleInfo.html#sema_toolchain.sema_scdg.application.plugin.PluginLocaleInfo","title":"PluginLocaleInfo","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/plugin/PluginManager.html","title":"PluginManager","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/plugin/PluginManager.html#sema_toolchain.sema_scdg.application.plugin.PluginManager","title":"PluginManager","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/plugin/PluginPacking.html","title":"PluginPacking","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/plugin/PluginPacking.html#sema_toolchain.sema_scdg.application.plugin.PluginPacking","title":"PluginPacking","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/plugin/PluginRegistry.html","title":"PluginRegistry","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/plugin/PluginRegistry.html#sema_toolchain.sema_scdg.application.plugin.PluginRegistry","title":"PluginRegistry","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/plugin/PluginResources.html","title":"PluginResources","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/plugin/PluginResources.html#sema_toolchain.sema_scdg.application.plugin.PluginResources","title":"PluginResources","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/plugin/PluginThread.html","title":"PluginThread","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/plugin/PluginThread.html#sema_toolchain.sema_scdg.application.plugin.PluginThread","title":"PluginThread","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/plugin/PluginWideChar.html","title":"PluginWideChar","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/plugin/PluginWideChar.html#sema_toolchain.sema_scdg.application.plugin.PluginWideChar","title":"PluginWideChar","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/plugin/win32.html","title":"win32","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/plugin/win32.html#sema_toolchain.sema_scdg.application.plugin.win32","title":"win32","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/plugin/win32.html#sema_toolchain.sema_scdg.application.plugin.win32.SimSystemWin32","title":"SimSystemWin32","text":"<pre><code>SimSystemWin32(stdin=None, stdout=None, stderr=None, fd=None, sockets=None, socket_queue=None, argv=None, argc=None, environ=None, auxv=None, tls_modules=None, sigmask=None, pid=None, ppid=None, uid=None, gid=None, brk=None)\n</code></pre> <p>               Bases: <code>SimStatePlugin</code></p> <p>Data storage and interaction mechanisms for states with an environment conforming to win32. Available as <code>state.win32</code>.</p> Source code in <code>sema_toolchain/sema_scdg/application/plugin/win32.py</code> <pre><code>def __init__(self,\n        stdin=None,\n        stdout=None,\n        stderr=None,\n        fd=None,\n        sockets=None,\n        socket_queue=None,\n        argv=None,\n        argc=None,\n        environ=None,\n        auxv=None,\n        tls_modules=None,\n        sigmask=None,\n        pid=None,\n        ppid=None,\n        uid=None,\n        gid=None,\n        brk=None):\n    super().__init__()\n\n    # some limits and constants\n    self.sigmask_bits = 1024\n    self.maximum_symbolic_syscalls = 255\n    self.max_length = 2 ** 16\n\n    self.argc = argc\n    self.argv = argv\n    self.environ = environ\n    self.auxv = auxv\n    self.tls_modules = tls_modules if tls_modules is not None else {}\n    self.brk = brk if brk is not None else 0x1b00000\n    self._sigmask = sigmask\n    self.pid = 1337 if pid is None else pid\n    self.ppid = 1336 if ppid is None else ppid\n    self.uid = 1000 if uid is None else uid\n    self.gid = 1000 if gid is None else gid\n    self.dev_fs = None\n    self.proc_fs = None\n    self.autotmp_counter = 0\n    self._closed_fds = []\n\n    self.sockets = sockets if sockets is not None else {}\n    self.socket_queue = socket_queue if socket_queue is not None else []\n\n    if stdin is None:\n        stdin = SimPacketsStream('stdin', write_mode=False, writable=False, ident='stdin')\n    if stdout is None:\n        stdout = SimPacketsStream('stdout', write_mode=True, writable=True, ident='stdout')\n    if stderr is None:\n        stderr = SimPacketsStream('stderr', write_mode=True, writable=True, ident='stderr')\n\n    if fd is None:\n        fd = {}\n        tty = SimFileDescriptorDuplex(stdin, stdout)\n\n        # the initial fd layout just looks like this:\n        # lrwx------ 1 audrey audrey 64 Jan 17 14:21 0 -&gt; /dev/pts/4\n        # lrwx------ 1 audrey audrey 64 Jan 17 14:21 1 -&gt; /dev/pts/4\n        # lrwx------ 1 audrey audrey 64 Jan 17 14:21 2 -&gt; /dev/pts/4\n        # but we want to distinguish the streams. we compromise by having 0 and 1 go to the \"tty\"\n        # and stderr goes to a special stderr file\n        fd[0] = tty\n        fd[1] = tty\n        fd[2] = SimFileDescriptor(stderr, 0)\n\n    self.fd = fd\n    # these are the storage mechanisms!\n    self.stdin = stdin\n    self.stdout = stdout\n    self.stderr = stderr\n</code></pre>"},{"location":"reference/sema_toolchain/sema_scdg/application/plugin/win32.html#sema_toolchain.sema_scdg.application.plugin.win32.SimSystemWin32.close","title":"close","text":"<pre><code>close(fd)\n</code></pre> <p>Closes the given file descriptor (an AST). Returns whether the operation succeeded (a concrete boolean)</p> Source code in <code>sema_toolchain/sema_scdg/application/plugin/win32.py</code> <pre><code>def close(self, fd):\n    \"\"\"\n    Closes the given file descriptor (an AST).\n    Returns whether the operation succeeded (a concrete boolean)\n    \"\"\"\n    try:\n        fd = self.state.solver.eval_one(fd)\n    except SimSolverError:\n        l.error(\"Trying to close a symbolic file descriptor\")\n        return False\n\n    if fd not in self.fd:\n        l.info(\"Trying to close an unopened file descriptor\")\n        return False\n\n    self.state.history.add_event('fs_close', fd=fd, close_idx=len(self.closed_fds))\n    self.closed_fds.append((fd, self.fd[fd]))\n\n    del self.fd[fd]\n    return True\n</code></pre>"},{"location":"reference/sema_toolchain/sema_scdg/application/plugin/win32.html#sema_toolchain.sema_scdg.application.plugin.win32.SimSystemWin32.dump_file_by_path","title":"dump_file_by_path","text":"<pre><code>dump_file_by_path(path, **kwargs)\n</code></pre> <p>Returns the concrete content for a file by path.</p> <p>:param path: file path as string :param kwargs: passed to state.solver.eval :return: file contents as string</p> Source code in <code>sema_toolchain/sema_scdg/application/plugin/win32.py</code> <pre><code>def dump_file_by_path(self, path, **kwargs):\n    \"\"\"\n    Returns the concrete content for a file by path.\n\n    :param path: file path as string\n    :param kwargs: passed to state.solver.eval\n    :return: file contents as string\n    \"\"\"\n    file = self.state.fs.get(path)\n    if file is None:\n        return None\n    return file.concretize(**kwargs)\n</code></pre>"},{"location":"reference/sema_toolchain/sema_scdg/application/plugin/win32.html#sema_toolchain.sema_scdg.application.plugin.win32.SimSystemWin32.dumps","title":"dumps","text":"<pre><code>dumps(fd, **kwargs)\n</code></pre> <p>Returns the concrete content for a file descriptor.</p> <p>BACKWARD COMPATIBILITY: if you ask for file descriptors 0 1 or 2, it will return the data from stdin, stdout, or stderr as a flat string.</p> <p>:param fd:  A file descriptor. :return:    The concrete content. :rtype:     str</p> Source code in <code>sema_toolchain/sema_scdg/application/plugin/win32.py</code> <pre><code>def dumps(self, fd, **kwargs):\n    \"\"\"\n    Returns the concrete content for a file descriptor.\n\n    BACKWARD COMPATIBILITY: if you ask for file descriptors 0 1 or 2, it will return the data from stdin, stdout,\n    or stderr as a flat string.\n\n    :param fd:  A file descriptor.\n    :return:    The concrete content.\n    :rtype:     str\n    \"\"\"\n    if 0 &lt;= fd &lt;= 2:\n        data = [self.stdin, self.stdout, self.stderr][fd].concretize(**kwargs)\n        if type(data) is list:\n            data = b''.join(data)\n        return data\n    return self.get_fd(fd).concretize(**kwargs)\n</code></pre>"},{"location":"reference/sema_toolchain/sema_scdg/application/plugin/win32.html#sema_toolchain.sema_scdg.application.plugin.win32.SimSystemWin32.get_fd","title":"get_fd","text":"<pre><code>get_fd(fd)\n</code></pre> <p>Looks up the SimFileDescriptor associated with the given number (an AST). If the number is concrete and does not map to anything, return None. If the number is symbolic, constrain it to an open fd and create a new file for it.</p> Source code in <code>sema_toolchain/sema_scdg/application/plugin/win32.py</code> <pre><code>def get_fd(self, fd):\n    \"\"\"\n    Looks up the SimFileDescriptor associated with the given number (an AST).\n    If the number is concrete and does not map to anything, return None.\n    If the number is symbolic, constrain it to an open fd and create a new file for it.\n    \"\"\"\n\n    try:\n        fd = self.state.solver.eval_one(fd)\n        return self.fd.get(fd)\n    except SimSolverError:\n        pass\n\n    ideal = self._pick_fd()\n    self.state.add_constraints(fd == ideal)\n    if not self.state.solver.satisfiable():\n        raise SimWin32Error(\"Tried to do operation on symbolic but partially constrained file descriptor\")\n    fd = ideal\n    new_filename = b'/tmp/angr_implicit_%d' % self.autotmp_counter\n    l.warning(\"Tried to look up a symbolic fd - constrained to %d and opened %s\", ideal, new_filename)\n    self.autotmp_counter += 1\n    if self.open(new_filename, Flags.O_RDWR, preferred_fd=fd) != fd:\n        raise SimWin32Error(\"Something went wrong trying to open implicit temp\")\n\n    return self.fd.get(fd)\n</code></pre>"},{"location":"reference/sema_toolchain/sema_scdg/application/plugin/win32.html#sema_toolchain.sema_scdg.application.plugin.win32.SimSystemWin32.open","title":"open","text":"<pre><code>open(name, flags, preferred_fd=None)\n</code></pre> <p>Open a symbolic file. Basically open(2).</p> <p>:param name:            Path of the symbolic file, as a string or bytes. :type name:             string or bytes :param flags:           File operation flags, a bitfield of constants from open(2), as an AST :param preferred_fd:    Assign this fd if it's not already claimed. :return:                The file descriptor number allocated (maps through win32.get_fd to a SimFileDescriptor)                         or None if the open fails.</p> <p><code>mode</code> from open(2) is unsupported at present.</p> Source code in <code>sema_toolchain/sema_scdg/application/plugin/win32.py</code> <pre><code>def open(self, name, flags, preferred_fd=None):\n    \"\"\"\n    Open a symbolic file. Basically open(2).\n\n    :param name:            Path of the symbolic file, as a string or bytes.\n    :type name:             string or bytes\n    :param flags:           File operation flags, a bitfield of constants from open(2), as an AST\n    :param preferred_fd:    Assign this fd if it's not already claimed.\n    :return:                The file descriptor number allocated (maps through win32.get_fd to a SimFileDescriptor)\n                            or None if the open fails.\n\n    ``mode`` from open(2) is unsupported at present.\n    \"\"\"\n\n    if len(name) == 0:\n        return None\n    if type(name) is str:\n        name = name.encode()\n\n    # FIXME: HACK\n    if self.uid != 0 and name.startswith(b'/var/run'):\n        return None\n\n    # TODO: speed this up (editor's note: ...really? this is fine)\n    fd = None\n    if preferred_fd is not None and preferred_fd not in self.fd:\n        fd = preferred_fd\n    else:\n        fd = self._pick_fd()\n\n    flags = self.state.solver.eval(flags)\n    writing = (flags &amp; Flags.O_ACCMODE) in (Flags.O_RDWR, Flags.O_WRONLY)\n\n    simfile = self.state.fs.get(name)\n    if simfile is None:\n        ident = SimFile.make_ident(name)\n        if not writing:\n            if options.ALL_FILES_EXIST not in self.state.options:\n                return None\n            l.warning(\"Trying to open unknown file %s - created a symbolic file since ALL_FILES_EXIST is set\", name)\n            simfile = SimFile(name, ident=ident, size=self.state.solver.BVS('filesize_%s' % ident, self.state.arch.bits, key=('file', ident, 'filesize'), eternal=True))\n        else:\n            simfile = SimFile(name, ident=ident)\n        if not self.state.fs.insert(name, simfile):\n            return None\n\n    simfd = SimFileDescriptor(simfile, flags)\n    simfd.set_state(self.state)\n    self.fd[fd] = simfd\n    return fd\n</code></pre>"},{"location":"reference/sema_toolchain/sema_scdg/application/plugin/win32.html#sema_toolchain.sema_scdg.application.plugin.win32.SimSystemWin32.sigmask","title":"sigmask","text":"<pre><code>sigmask(sigsetsize=None)\n</code></pre> <p>Gets the current sigmask. If it's blank, a new one is created (of sigsetsize).</p> <p>:param sigsetsize: the size (in bytes of the sigmask set) :return: the sigmask</p> Source code in <code>sema_toolchain/sema_scdg/application/plugin/win32.py</code> <pre><code>def sigmask(self, sigsetsize=None):\n    \"\"\"\n    Gets the current sigmask. If it's blank, a new one is created (of sigsetsize).\n\n    :param sigsetsize: the size (in *bytes* of the sigmask set)\n    :return: the sigmask\n    \"\"\"\n    if self._sigmask is None:\n        if sigsetsize is not None:\n            sc = self.state.solver.eval(sigsetsize)\n            self.state.add_constraints(sc == sigsetsize)\n            self._sigmask = self.state.solver.BVS('initial_sigmask', sc*self.state.arch.byte_width, key=('initial_sigmask',), eternal=True)\n        else:\n            self._sigmask = self.state.solver.BVS('initial_sigmask', self.sigmask_bits, key=('initial_sigmask',), eternal=True)\n    return self._sigmask\n</code></pre>"},{"location":"reference/sema_toolchain/sema_scdg/application/plugin/win32.html#sema_toolchain.sema_scdg.application.plugin.win32.SimSystemWin32.sigprocmask","title":"sigprocmask","text":"<pre><code>sigprocmask(how, new_mask, sigsetsize, valid_ptr=True)\n</code></pre> <p>Updates the signal mask.</p> <p>:param how: the \"how\" argument of sigprocmask (see manpage) :param new_mask: the mask modification to apply :param sigsetsize: the size (in bytes of the sigmask set) :param valid_ptr: is set if the new_mask was not NULL</p> Source code in <code>sema_toolchain/sema_scdg/application/plugin/win32.py</code> <pre><code>def sigprocmask(self, how, new_mask, sigsetsize, valid_ptr=True):\n    \"\"\"\n    Updates the signal mask.\n\n    :param how: the \"how\" argument of sigprocmask (see manpage)\n    :param new_mask: the mask modification to apply\n    :param sigsetsize: the size (in *bytes* of the sigmask set)\n    :param valid_ptr: is set if the new_mask was not NULL\n    \"\"\"\n    oldmask = self.sigmask(sigsetsize)\n    self._sigmask = self.state.solver.If(valid_ptr,\n        self.state.solver.If(how == self.SIG_BLOCK,\n            oldmask | new_mask,\n            self.state.solver.If(how == self.SIG_UNBLOCK,\n                oldmask &amp; (~new_mask),\n                self.state.solver.If(how == self.SIG_SETMASK,\n                    new_mask,\n                    oldmask\n                 )\n            )\n        ),\n        oldmask\n    )\n</code></pre>"},{"location":"reference/sema_toolchain/sema_scdg/application/plugin/win32.html#sema_toolchain.sema_scdg.application.plugin.win32.Win32ProcFS","title":"Win32ProcFS","text":"<p>               Bases: <code>SimMount</code></p> <p>The virtual file system mounted at /proc (as of now, on Linux).</p>"},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/index.html","title":"Index","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/index.html#sema_toolchain.sema_scdg.application.procedures","title":"procedures","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/CustomSimProcedure.html","title":"CustomSimProcedure","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/CustomSimProcedure.html#sema_toolchain.sema_scdg.application.procedures.CustomSimProcedure","title":"CustomSimProcedure","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/CustomSimProcedure.html#sema_toolchain.sema_scdg.application.procedures.CustomSimProcedure.CustomSimProcedure","title":"CustomSimProcedure","text":"<pre><code>CustomSimProcedure(verbose=False)\n</code></pre> <p>               Bases: <code>ABC</code></p> <p>Abstract base class for custom simulation procedures.</p> <p>This class defines various attributes and methods for handling custom simulation procedures, loading libraries, setting calling conventions, and creating simprocedures.</p> <p>This method sets up attributes for handling custom simulation procedures, system call tables, and tracking found syscalls.</p> Source code in <code>sema_toolchain/sema_scdg/application/procedures/CustomSimProcedure.py</code> <pre><code>def __init__(self, verbose=False):\n    \"\"\"\n    Initializes the Custom Simulation Procedure object.\n\n    This method sets up attributes for handling custom simulation procedures, system call tables, and tracking found syscalls.\n    \"\"\"\n    self.verbose = verbose\n    self.sim_proc = {}\n    self.system_call_table = {}\n    self.syscall_found = {}\n</code></pre>"},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/CustomSimProcedure.html#sema_toolchain.sema_scdg.application.procedures.CustomSimProcedure.CustomSimProcedure.amd64_sim_proc_hook","title":"amd64_sim_proc_hook  <code>abstractmethod</code>","text":"<pre><code>amd64_sim_proc_hook(project, name, sim_proc)\n</code></pre> <p>Defines an abstract method for applying an AMD64 specific simulation procedure hook to a symbol in the project.</p> <p>This method must be implemented in subclasses to handle the application of AMD64 simulation procedure hooks.</p> Source code in <code>sema_toolchain/sema_scdg/application/procedures/CustomSimProcedure.py</code> <pre><code>@abstractmethod\ndef amd64_sim_proc_hook(self, project, name, sim_proc):\n    \"\"\"\n    Defines an abstract method for applying an AMD64 specific simulation procedure hook to a symbol in the project.\n\n    This method must be implemented in subclasses to handle the application of AMD64 simulation procedure hooks.\n    \"\"\"\n    pass\n</code></pre>"},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/CustomSimProcedure.html#sema_toolchain.sema_scdg.application.procedures.CustomSimProcedure.CustomSimProcedure.clear","title":"clear","text":"<pre><code>clear()\n</code></pre> <p>Clears all data structures within the object.</p> <p>This method empties the dictionaries <code>sim_proc</code>, <code>system_call_table</code>, and <code>syscall_found</code>.</p> Source code in <code>sema_toolchain/sema_scdg/application/procedures/CustomSimProcedure.py</code> <pre><code>def clear(self):\n    \"\"\"\n    Clears all data structures within the object.\n\n    This method empties the dictionaries `sim_proc`, `system_call_table`, and `syscall_found`.\n    \"\"\"\n    self.sim_proc.clear()\n    self.system_call_table.clear()\n    self.syscall_found.clear()\n</code></pre>"},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/CustomSimProcedure.html#sema_toolchain.sema_scdg.application.procedures.CustomSimProcedure.CustomSimProcedure.create_lib_procedures","title":"create_lib_procedures","text":"<pre><code>create_lib_procedures(dlldict, libname, angrlib)\n</code></pre> <p>Creates library procedures based on the provided dictionary, library name, and angr library.</p> <p>This function iterates through the dictionary of procedures, extracts arguments, checks for argument mismatches, and creates custom simulation procedures for each procedure in the library.</p> Source code in <code>sema_toolchain/sema_scdg/application/procedures/CustomSimProcedure.py</code> <pre><code>def create_lib_procedures(self, dlldict, libname, angrlib):\n    \"\"\"\n    Creates library procedures based on the provided dictionary, library name, and angr library.\n\n    This function iterates through the dictionary of procedures, extracts arguments, checks for argument mismatches, and creates custom simulation procedures for each procedure in the library.\n    \"\"\"\n    procedures = {}\n    for k, v in dlldict.items():\n        name = k\n        args = []\n        for i, a in enumerate(v[\"arguments\"]):\n            if a[\"name\"] is not None:\n                if keyword.iskeyword(a[\"name\"]) or a[\"name\"] in builtins:\n                    args.append(f\"arg{str(i)}\")\n                else:\n                    args.append(a[\"name\"])\n            elif a[\"type\"] not in [\"void\", \" void\"]:\n                args.append(f\"arg{str(i)}\")\n\n        if (v[\"cc\"] == \"__cdecl\" and v[\"name\"] not in self.EXCEPTIONS):\n            self.EXCEPTIONS.append(v[\"name\"])\n        args_mismatch = False\n        is_num = False\n        try:\n            a = int(name)\n            is_num = True\n        except ValueError:\n            is_num = False\n\n        if angrlib.has_prototype(name) and not is_num:\n            ourargs = len(args)\n            angrargs = len(angrlib.prototypes[name].args)\n            if ourargs != angrargs:\n                if self.verbose:\n                    self.log.warning(f\"Procedure {name} in DLL {libname} has {ourargs} arguments in json and {angrargs} arguments in angr prototype. Taking number of arguments from json.\")\n                args_mismatch = True\n        sp = self.create_sim_procedure(name, args, v[\"returns\"], args_mismatch)\n\n        procedures[name] = sp\n    return procedures\n</code></pre>"},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/CustomSimProcedure.html#sema_toolchain.sema_scdg.application.procedures.CustomSimProcedure.CustomSimProcedure.create_sim_procedure","title":"create_sim_procedure","text":"<pre><code>create_sim_procedure(name, args, ret, args_mismatch)\n</code></pre> <p>Creates a custom simulation procedure based on the provided name, arguments, return type, and arguments mismatch flag.</p> <p>This method dynamically generates a custom simulation procedure with specific characteristics based on the input parameters.</p> Source code in <code>sema_toolchain/sema_scdg/application/procedures/CustomSimProcedure.py</code> <pre><code>def create_sim_procedure(self, name, args, ret, args_mismatch):\n    \"\"\"\n    Creates a custom simulation procedure based on the provided name, arguments, return type, and arguments mismatch flag.\n\n    This method dynamically generates a custom simulation procedure with specific characteristics based on the input parameters.\n    \"\"\"\n    contains = {\"run\": self.generic_sim_procedure(args, ret)}\n    if args_mismatch:\n        contains[\"ARGS_MISMATCH\"] = True\n    return type(name, (angr.SimProcedure,), contains)\n</code></pre>"},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/CustomSimProcedure.html#sema_toolchain.sema_scdg.application.procedures.CustomSimProcedure.CustomSimProcedure.custom_hook_no_symbols","title":"custom_hook_no_symbols","text":"<pre><code>custom_hook_no_symbols(proj)\n</code></pre> <p>Applies custom simulation procedures to the project's syscall library when no symbols are present.</p> <p>This function adds custom simulation procedures to the syscall library based on predefined custom and generic procedures, ensuring proper handling for functions not implemented.</p> Source code in <code>sema_toolchain/sema_scdg/application/procedures/CustomSimProcedure.py</code> <pre><code>def custom_hook_no_symbols(self, proj):\n    \"\"\"\n    Applies custom simulation procedures to the project's syscall library when no symbols are present.\n\n    This function adds custom simulation procedures to the syscall library based on predefined custom and generic procedures, ensuring proper handling for functions not implemented.\n    \"\"\"\n    if self.verbose: self.log.info(\"custom_hook_no_symbols\")\n\n    custom = self.get_custom_sim_proc()\n\n    for key in custom:\n        proj.simos.syscall_library.add(key, custom[key])  # TODO error\n    for key in angr.SIM_PROCEDURES[\"posix\"]:\n        if key not in custom:\n            proj.simos.syscall_library.add(key, angr.SIM_PROCEDURES[\"posix\"][key])\n\n    generic = self.get_gen_simproc()\n\n    # Create stub simprocedure with proper number of args for functions not implemented\n    for key in self.system_call_table:\n        name = self.system_call_table[key][\"name\"]\n        name = re.search(\"(?&lt;=sys_)[^\\]]+\", name).group(0)\n        if ((name not in custom)\n            and (name not in angr.SIM_PROCEDURES[\"posix\"])\n            and (name not in angr.SIM_PROCEDURES[\"linux_kernel\"])\n            and self.system_call_table[key][\"num_args\"] != 0\n        ):\n            proj.simos.syscall_library.add(\n                name, generic[str(self.system_call_table[key][\"num_args\"])]\n            )\n</code></pre>"},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/CustomSimProcedure.html#sema_toolchain.sema_scdg.application.procedures.CustomSimProcedure.CustomSimProcedure.custom_hook_static","title":"custom_hook_static  <code>abstractmethod</code>","text":"<pre><code>custom_hook_static(proj)\n</code></pre> <p>Defines an abstract method for applying custom static hooks in the project.</p> <p>This method must be implemented in subclasses to handle the application of custom static hooks in the project.</p> Source code in <code>sema_toolchain/sema_scdg/application/procedures/CustomSimProcedure.py</code> <pre><code>@abstractmethod\ndef custom_hook_static(self, proj):\n    \"\"\"\n    Defines an abstract method for applying custom static hooks in the project.\n\n    This method must be implemented in subclasses to handle the application of custom static hooks in the project.\n    \"\"\"\n    pass\n</code></pre>"},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/CustomSimProcedure.html#sema_toolchain.sema_scdg.application.procedures.CustomSimProcedure.CustomSimProcedure.deal_with_alt_names","title":"deal_with_alt_names  <code>abstractmethod</code>","text":"<pre><code>deal_with_alt_names(pkg_name, proc)\n</code></pre> <p>Defines the behavior for handling alternative names in simulation procedures.</p> <p>This method is abstract and must be implemented in subclasses to specify how to deal with alternative names in simulation procedures.</p> Source code in <code>sema_toolchain/sema_scdg/application/procedures/CustomSimProcedure.py</code> <pre><code>@abstractmethod\ndef deal_with_alt_names(self, pkg_name, proc):\n    \"\"\"\n    Defines the behavior for handling alternative names in simulation procedures.\n\n    This method is abstract and must be implemented in subclasses to specify how to deal with alternative names in simulation procedures.\n    \"\"\"\n    pass\n</code></pre>"},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/CustomSimProcedure.html#sema_toolchain.sema_scdg.application.procedures.CustomSimProcedure.CustomSimProcedure.exception_sim_proc_hook","title":"exception_sim_proc_hook","text":"<pre><code>exception_sim_proc_hook(proj, name, simproc)\n</code></pre> <p>Applies an exception calling convention hook to a symbol in the project.</p> <p>This function hooks the specified symbol in the project with an exception calling convention based on the project architecture.</p> Source code in <code>sema_toolchain/sema_scdg/application/procedures/CustomSimProcedure.py</code> <pre><code>def exception_sim_proc_hook(self, proj, name, simproc):\n    \"\"\"\n    Applies an exception calling convention hook to a symbol in the project.\n\n    This function hooks the specified symbol in the project with an exception calling convention based on the project architecture.\n    \"\"\"\n    proj.hook(\n        name,\n        simproc(cc=SimCCCdecl(proj.arch)),\n    )\n</code></pre>"},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/CustomSimProcedure.html#sema_toolchain.sema_scdg.application.procedures.CustomSimProcedure.CustomSimProcedure.generic_sim_procedure","title":"generic_sim_procedure","text":"<pre><code>generic_sim_procedure(args, ret)\n</code></pre> <p>Creates a generic simulation procedure based on arguments and return type.</p> <p>This method dynamically generates a simulation procedure based on the provided arguments and return type.</p> Source code in <code>sema_toolchain/sema_scdg/application/procedures/CustomSimProcedure.py</code> <pre><code>def generic_sim_procedure(self, args, ret):\n    \"\"\"\n    Creates a generic simulation procedure based on arguments and return type.\n\n    This method dynamically generates a simulation procedure based on the provided arguments and return type.\n    \"\"\"\n    s = \"lambda self, \" + \", \".join(args)\n    if ret != \"void\":\n        s += ': self.state.solver.BVS(\"retval_{}\".format(self.display_name),self.arch.bits)'\n    else:\n        s += \": None\"\n    return eval(s)\n</code></pre>"},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/CustomSimProcedure.html#sema_toolchain.sema_scdg.application.procedures.CustomSimProcedure.CustomSimProcedure.get_custom_sim_proc","title":"get_custom_sim_proc","text":"<pre><code>get_custom_sim_proc()\n</code></pre> <p>Returns a dictionary containing custom simulation procedures.</p> <p>This method retrieves and returns specific custom simulation procedures from the <code>custom_package</code> dictionary.</p> Source code in <code>sema_toolchain/sema_scdg/application/procedures/CustomSimProcedure.py</code> <pre><code>def get_custom_sim_proc(self):\n    \"\"\"\n    Returns a dictionary containing custom simulation procedures.\n\n    This method retrieves and returns specific custom simulation procedures from the `custom_package` dictionary.\n    \"\"\"\n    custom_pack = self.sim_proc[\"custom_package\"]\n    return {\n        \"time\": custom_pack[\"time\"],\n        \"clock\": custom_pack[\"clock\"],\n        \"sigprocmask\": custom_pack[\"sigprocmask\"],\n        \"rt_sigprocmask\": custom_pack[\"rt_sigprocmask\"],\n        \"nanosleep\": custom_pack[\"nanosleep\"],\n        \"prctl\": custom_pack[\"prctl\"],\n        \"connect\": custom_pack[\"connect\"],\n        \"clone\": custom_pack[\"clone\"],\n        \"readlink\": custom_pack[\"readlink\"],\n        \"openat\": custom_pack[\"openat\"],\n        \"readv\": custom_pack[\"readv\"],\n        \"read\": custom_pack[\"read\"],\n        \"writev\": custom_pack[\"writev\"],\n        \"write\": custom_pack[\"write\"],\n        \"clock_gettime\": custom_pack[\"clock_gettime\"],\n        \"socketcall\": custom_pack[\"socketcall\"],\n        \"exit_group\": custom_pack[\"exit\"],\n        \"rt_sigaction\": custom_pack[\"rt_sigaction\"],\n        \"sigaction\": custom_pack[\"rt_sigaction\"],\n        \"gettimeofday\": custom_pack[\"gettimeofday\"],\n        \"getuid\": custom_pack[\"getuid\"],\n        \"geteuid\": custom_pack[\"getuid\"],\n        \"getgid\": custom_pack[\"getgid\"],\n        \"getegid\": custom_pack[\"getgid\"],\n        \"sendto\": custom_pack[\"sendto\"],\n        \"times\": custom_pack[\"times\"],\n        \"futex\": custom_pack[\"futex\"],\n        \"open\": custom_pack[\"open\"],\n        \"open64\": custom_pack[\"open\"],\n        \"setsid\": custom_pack[\"setsid\"],\n        \"chdir\": custom_pack[\"chdir\"],\n        \"getsockname\": custom_pack[\"getsockname\"],\n        \"select\": custom_pack[\"select\"],\n        \"_newselect\": custom_pack[\"select\"],\n        \"newfstat\": custom_pack[\"fstat\"],\n        \"fstat\": custom_pack[\"fstat\"],\n        \"fstat64\": custom_pack[\"fstat\"],\n        \"newstat\": custom_pack[\"fstat\"],\n        \"stat\": custom_pack[\"fstat\"],\n        \"stat64\": custom_pack[\"fstat\"],\n        \"socket\": custom_pack[\"socket\"],\n        \"set_thread_area\": custom_pack[\"set_thread_area\"],\n        \"unlink\": custom_pack[\"unlink\"],\n    }\n</code></pre>"},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/CustomSimProcedure.html#sema_toolchain.sema_scdg.application.procedures.CustomSimProcedure.CustomSimProcedure.get_gen_simproc","title":"get_gen_simproc","text":"<pre><code>get_gen_simproc()\n</code></pre> <p>Returns a dictionary containing generic simulation procedures.</p> <p>This method retrieves and returns specific simulation procedures from the <code>custom_package</code> dictionary.</p> Source code in <code>sema_toolchain/sema_scdg/application/procedures/CustomSimProcedure.py</code> <pre><code>def get_gen_simproc(self):\n    \"\"\"\n    Returns a dictionary containing generic simulation procedures.\n\n    This method retrieves and returns specific simulation procedures from the `custom_package` dictionary.\n    \"\"\"\n    custom_pack = self.sim_proc[\"custom_package\"]\n    return {\n        \"0\": custom_pack[\"gen_simproc0\"],\n        \"1\": custom_pack[\"gen_simproc1\"],\n        \"2\": custom_pack[\"gen_simproc2\"],\n        \"3\": custom_pack[\"gen_simproc3\"],\n        \"4\": custom_pack[\"gen_simproc4\"],\n        \"5\": custom_pack[\"gen_simproc5\"],\n        \"6\": custom_pack[\"gen_simproc6\"],\n    }\n</code></pre>"},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/CustomSimProcedure.html#sema_toolchain.sema_scdg.application.procedures.CustomSimProcedure.CustomSimProcedure.init_sim_proc","title":"init_sim_proc","text":"<pre><code>init_sim_proc(os_name)\n</code></pre> <p>Initializes simulation procedures based on the provided operating system name.</p> <p>This method dynamically imports and organizes simulation procedures based on the specified operating system for further analysis.</p> Source code in <code>sema_toolchain/sema_scdg/application/procedures/CustomSimProcedure.py</code> <pre><code>def init_sim_proc(self, os_name):\n    \"\"\"\n    Initializes simulation procedures based on the provided operating system name.\n\n    This method dynamically imports and organizes simulation procedures based on the specified operating system for further analysis.\n    \"\"\"\n    path = f\"{os.path.dirname(os.path.abspath(__file__))}/{os_name}\"\n    if self.verbose:\n        self.log.debug(f\"{os_name} lib path = {str(path)}\")\n    skip_dirs = [\"definitions\"]\n    pkg = f\"procedures.{os_name}\"\n    for pkg_name, package in autoimport.auto_import_packages(pkg, path, skip_dirs):\n        for _, mod in autoimport.filter_module(package, type_req=type(os)):\n            for name, proc in autoimport.filter_module(mod, type_req=type, subclass_req=angr.SimProcedure):\n                if hasattr(proc, \"__provides__\"):\n                    for custom_pkg_name, custom_func_name in proc.__provides__:\n                        if custom_pkg_name not in self.sim_proc:\n                            self.sim_proc[custom_pkg_name] = {}\n                        self.sim_proc[custom_pkg_name][custom_func_name] = proc\n                else:\n                    if pkg_name not in self.sim_proc:\n                        self.sim_proc[pkg_name] = {}\n                    self.sim_proc[pkg_name][name] = proc\n                    if hasattr(proc, \"ALT_NAMES\") and proc.ALT_NAMES:\n                        self.deal_with_alt_names(pkg_name, proc)\n                    if name == \"UnresolvableJumpTarget\":\n                        self.sim_proc[pkg_name][\"UnresolvableTarget\"] = proc\n</code></pre>"},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/CustomSimProcedure.html#sema_toolchain.sema_scdg.application.procedures.CustomSimProcedure.CustomSimProcedure.load_syscall_table","title":"load_syscall_table  <code>abstractmethod</code>","text":"<pre><code>load_syscall_table(proj)\n</code></pre> <p>Loads the system call table for the given project.</p> <p>This method is abstract and must be implemented in subclasses to define the behavior of loading the system call table for a specific project.</p> Source code in <code>sema_toolchain/sema_scdg/application/procedures/CustomSimProcedure.py</code> <pre><code>@abstractmethod\ndef load_syscall_table(self, proj):\n    \"\"\"\n    Loads the system call table for the given project.\n\n    This method is abstract and must be implemented in subclasses to define the behavior of loading the system call table for a specific project.\n    \"\"\"\n    pass\n</code></pre>"},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/CustomSimProcedure.html#sema_toolchain.sema_scdg.application.procedures.CustomSimProcedure.CustomSimProcedure.loadlibs_proc","title":"loadlibs_proc","text":"<pre><code>loadlibs_proc(dlls_functions, project)\n</code></pre> <p>Loads library procedures and applies hooks to symbols based on the provided information.</p> <p>This function iterates through requested libraries, sets calling conventions, creates procedures, applies hooks to symbols, and updates the simulation procedures accordingly.</p> Source code in <code>sema_toolchain/sema_scdg/application/procedures/CustomSimProcedure.py</code> <pre><code>def loadlibs_proc(self, dlls_functions, project):\n    \"\"\"\n    Loads library procedures and applies hooks to symbols based on the provided information.\n\n    This function iterates through requested libraries, sets calling conventions, creates procedures, applies hooks to symbols, and updates the simulation procedures accordingly.\n    \"\"\"\n    symbols = project.loader.symbols\n    dic_symbols = {symb.name: symb.rebased_addr for symb in symbols}\n    if self.verbose: self.log.debug(dic_symbols)\n\n    for dllname in project.loader.requested_names:\n        if dllname in dlls_functions.keys():\n            if len(dlls_functions[dllname]) == 0 or dllname.startswith(\"syscalls\"):\n                continue\n\n            angrlib = self.set_calling_conventions(dllname, dlls_functions)\n            procs = self.create_lib_procedures(dlls_functions[dllname], dllname, angrlib)\n\n            newprocs = {}\n            for name, simprocedure in procs.items():\n                if (not angrlib.has_implementation(name) and name not in self.sim_proc[\"custom_package\"]):\n                    newprocs[name] = simprocedure\n                    if name in dic_symbols:\n                        if project.arch.name == \"AMD64\":\n                            self.amd64_sim_proc_hook(project, dic_symbols[name], simprocedure)\n                        elif name not in self.EXCEPTIONS:\n                            self.std_sim_proc_hook(project, dic_symbols[name], simprocedure)\n                        elif name:\n                            self.exception_sim_proc_hook(project, dic_symbols[name], simprocedure)\n                elif name in self.sim_proc[\"custom_package\"]:\n                    newprocs[name] = self.sim_proc[\"custom_package\"][name]\n                if name in dic_symbols:\n                    del dic_symbols[name]\n\n            angrlib.add_all_from_dict(newprocs)\n\n    project._sim_procedures = {\n        addr: simprocedure for addr, simprocedure in project._sim_procedures.items()\n    }\n\n    # Force each object , check resolution of symbols\n    # for obj in project.loader.initial_load_objects:\n    #    project._register_object(obj,project.arch)\n    ok = {}\n    for name in dic_symbols:\n        if name in self.sim_proc[\"custom_package\"]:\n            if project.arch.name == \"AMD64\":\n                self.amd64_sim_proc_hook(project, dic_symbols[name], self.sim_proc[\"custom_package\"][name])\n            else:\n                self.std_sim_proc_hook(project, dic_symbols[name], self.sim_proc[\"custom_package\"][name])\n            ok[name] = 1\n\n    for s in ok:\n        del dic_symbols[s]\n    if self.verbose: self.log.info(\"No hooks for: %s\", str(dic_symbols))\n</code></pre>"},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/CustomSimProcedure.html#sema_toolchain.sema_scdg.application.procedures.CustomSimProcedure.CustomSimProcedure.set_calling_conventions","title":"set_calling_conventions","text":"<pre><code>set_calling_conventions(lib_name, dlls_functions)\n</code></pre> <p>Sets calling conventions for a given library based on the provided information.</p> <p>This function determines and sets the calling conventions for the library, updating the default calling conventions for X86 and AMD64 architectures accordingly.</p> Source code in <code>sema_toolchain/sema_scdg/application/procedures/CustomSimProcedure.py</code> <pre><code>def set_calling_conventions(self, lib_name, dlls_functions):\n    \"\"\"\n    Sets calling conventions for a given library based on the provided information.\n\n    This function determines and sets the calling conventions for the library, updating the default calling conventions for X86 and AMD64 architectures accordingly.\n    \"\"\"\n    if lib_name in self.ANGR_LIBS:\n        if self.verbose: self.log.info(\"Was in angr :\" + str(lib_name))\n        angrlib = SIM_LIBRARIES[self.ANGR_LIBS[lib_name]]\n        cc = list(dlls_functions[lib_name].values())[0][\"cc\"]\n\n        # Set properly calling conventions\n        angrlib.set_default_cc(\"X86\", self.ANGR_CALLING_CONVENTIONS_x86[cc])\n        angrlib.default_ccs[\"X86\"] = self.ANGR_CALLING_CONVENTIONS_x86[cc]\n        angrlib.set_default_cc(\"AMD64\", self.ANGR_CALLING_CONVENTIONS_x86_64[cc])\n        angrlib.default_ccs[\"AMD64\"] = self.ANGR_CALLING_CONVENTIONS_x86_64[cc]\n    else:\n        angrlib = SimLibrary()\n        angrlib.set_library_names(lib_name)\n        cc = list(dlls_functions[lib_name].values())[0][\"cc\"]\n        angrlib.set_default_cc(\"X86\", self.ANGR_CALLING_CONVENTIONS_x86[cc])\n        angrlib.set_default_cc(\"AMD64\", self.ANGR_CALLING_CONVENTIONS_x86_64[cc])\n        SIM_LIBRARIES.update({lib_name: angrlib})\n    return angrlib\n</code></pre>"},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/CustomSimProcedure.html#sema_toolchain.sema_scdg.application.procedures.CustomSimProcedure.CustomSimProcedure.setup","title":"setup","text":"<pre><code>setup(os)\n</code></pre> <p>Sets up the object for system call procedure initialization.</p> <p>If the object is not already set up, this method initializes loaders, configures logging if verbose, and initializes system call procedures based on the provided operating system.</p> Source code in <code>sema_toolchain/sema_scdg/application/procedures/CustomSimProcedure.py</code> <pre><code>def setup(self, os):\n    \"\"\"\n    Sets up the object for system call procedure initialization.\n\n    If the object is not already set up, this method initializes loaders, configures logging if verbose, and initializes system call procedures based on the provided operating system.\n    \"\"\"\n    if not self.__already_setup():\n        self.ddl_loader = DDLLoader()\n        self.linux_loader = LinuxTableLoader()\n        if self.verbose:\n            self.config_logger()\n        self.init_sim_proc(os)\n</code></pre>"},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/CustomSimProcedure.html#sema_toolchain.sema_scdg.application.procedures.CustomSimProcedure.CustomSimProcedure.std_sim_proc_hook","title":"std_sim_proc_hook","text":"<pre><code>std_sim_proc_hook(proj, name, simproc)\n</code></pre> <p>Applies a standard calling convention hook to a symbol in the project.</p> <p>This function hooks the specified symbol in the project with a standard calling convention based on the project architecture.</p> Source code in <code>sema_toolchain/sema_scdg/application/procedures/CustomSimProcedure.py</code> <pre><code>def std_sim_proc_hook(self, proj, name, simproc):\n    \"\"\"\n    Applies a standard calling convention hook to a symbol in the project.\n\n    This function hooks the specified symbol in the project with a standard calling convention based on the project architecture.\n    \"\"\"\n    proj.hook(\n        name,\n        simproc(cc=SimCCStdcall(proj.arch)),\n    )\n</code></pre>"},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/DDLLoader.html","title":"DDLLoader","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/DDLLoader.html#sema_toolchain.sema_scdg.application.procedures.DDLLoader","title":"DDLLoader","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/LinuxSimProcedure.html","title":"LinuxSimProcedure","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/LinuxSimProcedure.html#sema_toolchain.sema_scdg.application.procedures.LinuxSimProcedure","title":"LinuxSimProcedure","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/LinuxSimProcedure.html#sema_toolchain.sema_scdg.application.procedures.LinuxSimProcedure.LinuxSimProcedure","title":"LinuxSimProcedure","text":"<pre><code>LinuxSimProcedure(verbose=False)\n</code></pre> <p>               Bases: <code>CustomSimProcedure</code></p> <p>Defines methods for customizing Linux simulation procedures.</p> <p>This class includes methods for setting up the logger, handling alternative names, customizing hooks for static libraries, and loading the syscall table using the Linux loader.</p> <p>This method sets up the Linux environment for simulation procedures by initializing the logger and configuring the environment for Linux-specific procedures.</p> Source code in <code>sema_toolchain/sema_scdg/application/procedures/LinuxSimProcedure.py</code> <pre><code>def __init__(self, verbose = False):\n    \"\"\"\n    Initializes a Linux simulation procedure with optional verbosity.\n\n    This method sets up the Linux environment for simulation procedures by initializing the logger and configuring the environment for Linux-specific procedures.\n    \"\"\"\n    super().__init__(verbose)\n    self.log = None\n    self.setup(\"linux\")\n</code></pre>"},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/LinuxSimProcedure.html#sema_toolchain.sema_scdg.application.procedures.LinuxSimProcedure.LinuxSimProcedure.amd64_sim_proc_hook","title":"amd64_sim_proc_hook","text":"<pre><code>amd64_sim_proc_hook(project, name, sim_proc)\n</code></pre> <p>Applies a simulation procedure hook for AMD64 architecture in the project.</p> <p>This function hooks the specified name with the provided simulation procedure, applying the System V AMD64 calling convention if the project architecture is AMD64.</p> Source code in <code>sema_toolchain/sema_scdg/application/procedures/LinuxSimProcedure.py</code> <pre><code>def amd64_sim_proc_hook(self, project, name, sim_proc):\n    \"\"\"\n    Applies a simulation procedure hook for AMD64 architecture in the project.\n\n    This function hooks the specified name with the provided simulation procedure, applying the System V AMD64 calling convention if the project architecture is AMD64.\n    \"\"\"\n    if project.arch.name == \"AMD64\":\n        project.hook(\n            name,\n            sim_proc(\n                cc=SimCCSystemVAMD64(project.arch)\n            ),\n        )\n        return True\n    return False\n</code></pre>"},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/LinuxSimProcedure.html#sema_toolchain.sema_scdg.application.procedures.LinuxSimProcedure.LinuxSimProcedure.config_logger","title":"config_logger","text":"<pre><code>config_logger()\n</code></pre> <p>Configures the logger if it is not already set.</p> <p>This function sets up the logger for the Linux simulation procedure, initializing it with the specified log level if it is not already defined.</p> Source code in <code>sema_toolchain/sema_scdg/application/procedures/LinuxSimProcedure.py</code> <pre><code>def config_logger(self):\n    \"\"\"\n    Configures the logger if it is not already set.\n\n    This function sets up the logger for the Linux simulation procedure, initializing it with the specified log level if it is not already defined.\n    \"\"\"\n    if self.log is None:\n        self.log = logger\n        self.log_level = log_level\n</code></pre>"},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/LinuxSimProcedure.html#sema_toolchain.sema_scdg.application.procedures.LinuxSimProcedure.LinuxSimProcedure.custom_hook_linux_symbols","title":"custom_hook_linux_symbols","text":"<pre><code>custom_hook_linux_symbols(proj)\n</code></pre> <p>Customizes hooking for Linux symbols in the project.</p> <p>This function applies custom procedures to symbols from the custom package, handling exceptions and standard procedures based on the symbol name.</p> Source code in <code>sema_toolchain/sema_scdg/application/procedures/LinuxSimProcedure.py</code> <pre><code>def custom_hook_linux_symbols(self, proj):\n    \"\"\"\n    Customizes hooking for Linux symbols in the project.\n\n    This function applies custom procedures to symbols from the custom package, handling exceptions and standard procedures based on the symbol name.\n    \"\"\"\n    if self.verbose: self.log.info(\"custom_hook_linux_symbols\")\n    proj.loader\n    symbols = proj.loader.symbols\n\n    for symb in symbols:\n        if symb.name in self.sim_proc[\"custom_package\"]:\n            # if \"CreateThread\" in symb.name:\n            #     self.create_thread.add(symb.rebased_addr)\n            proj.unhook(symb.rebased_addr)\n            if not self.amd64_sim_proc_hook(proj, symb.rebased_addr, self.sim_proc[\"custom_package\"][symb.name]):\n                if symb.name not in self.CDECL_EXCEPT:\n                    self.std_sim_proc_hook(proj, symb.rebased_addr, self.sim_proc[\"custom_package\"][symb.name])\n                else:\n                    self.exception_sim_proc_hook(proj, symb.rebased_addr, self.sim_proc[\"custom_package\"][symb.name])\n</code></pre>"},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/LinuxSimProcedure.html#sema_toolchain.sema_scdg.application.procedures.LinuxSimProcedure.LinuxSimProcedure.custom_hook_static","title":"custom_hook_static","text":"<pre><code>custom_hook_static(proj)\n</code></pre> <p>Applies custom static hooks for Linux symbols in the project.</p> <p>This function customizes hooking for specific Linux symbols, including handling different procedures based on the symbol name, architecture, and predefined simulation procedures.</p> Source code in <code>sema_toolchain/sema_scdg/application/procedures/LinuxSimProcedure.py</code> <pre><code>def custom_hook_static(self, proj):\n    \"\"\"\n    Applies custom static hooks for Linux symbols in the project.\n\n    This function customizes hooking for specific Linux symbols, including handling different procedures based on the symbol name, architecture, and predefined simulation procedures.\n    \"\"\"\n    if self.verbose: self.log.info(\"custom_hook_static_linux\")\n    proj.loader\n    symbols = proj.loader.symbols\n\n    simproc64 = {\"fopen64\": \"fopen\"}\n    angr_simproc_to_check = [\n        \"glibc\",\n        \"libc\",\n        \"posix\",\n        \"linux_kernel\",\n        \"win32\",\n        \"win_user32\",\n        \"ntdll\",\n        \"msvcr\"\n    ]\n\n    def hook_readlink(symb, proj):\n        if proj.arch.name == \"X86\":\n            proj.hook(symb.rebased_addr, angr.SIM_PROCEDURES[\"posix\"][\"read\"]())\n        else:\n            self.amd64_sim_proc_hook(proj, symb.rebased_addr, angr.SIM_PROCEDURES[\"posix\"][\"read\"])\n\n    for symb in symbols:\n        name = symb.name\n        if name == \"readlink\":\n            hook_readlink(symb, proj)\n        boo = False\n        for simproc_to_check in angr_simproc_to_check:\n            if name in angr.SIM_PROCEDURES[simproc_to_check]:\n                boo = True\n                if proj.arch.name != \"X86\":\n                    self.amd64_sim_proc_hook(proj, symb.rebased_addr, angr.SIM_PROCEDURES[simproc_to_check][name])\n                break\n        if boo : continue\n        if name in simproc64:\n            if proj.arch.name != \"X86\":\n                self.amd64_sim_proc_hook(proj, symb.rebased_addr, angr.SIM_PROCEDURES[\"libc\"][simproc64[name]])\n        elif \"ordinal\" in name:\n            part_names = name.split(\".\")\n            if self.verbose:\n                lib_part = f\"{part_names[2][2:]}.dll\"\n                self.log.info(lib_part)\n                ord_part = part_names[1]\n                self.log.info(ord_part)\n</code></pre>"},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/LinuxSimProcedure.html#sema_toolchain.sema_scdg.application.procedures.LinuxSimProcedure.LinuxSimProcedure.deal_with_alt_names","title":"deal_with_alt_names","text":"<pre><code>deal_with_alt_names(pkg_name, proc)\n</code></pre> <p>Sets the value in the sim_proc dictionary for alternative names encountered.</p> <p>This function iterates through the alternative names of a procedure and assigns the procedure to the corresponding package name in the sim_proc dictionary.</p> Source code in <code>sema_toolchain/sema_scdg/application/procedures/LinuxSimProcedure.py</code> <pre><code>def deal_with_alt_names(self, pkg_name, proc):\n    \"\"\"\n    Sets the value in the sim_proc dictionary for alternative names encountered.\n\n    This function iterates through the alternative names of a procedure and assigns the procedure to the corresponding package name in the sim_proc dictionary.\n    \"\"\"\n    for altname in proc.ALT_NAMES:\n        self.sim_proc[pkg_name][altname] = proc\n</code></pre>"},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/LinuxSimProcedure.html#sema_toolchain.sema_scdg.application.procedures.LinuxSimProcedure.LinuxSimProcedure.load_syscall_table","title":"load_syscall_table","text":"<pre><code>load_syscall_table(proj)\n</code></pre> <p>Loads the syscall table using the Linux loader in the project.</p> <p>This function initializes the system call table by loading it from the project using the Linux loader.</p> Source code in <code>sema_toolchain/sema_scdg/application/procedures/LinuxSimProcedure.py</code> <pre><code>def load_syscall_table(self, proj):\n    \"\"\"\n    Loads the syscall table using the Linux loader in the project.\n\n    This function initializes the system call table by loading it from the project using the Linux loader.\n    \"\"\"\n    self.system_call_table = self.linux_loader.load_table(proj)\n</code></pre>"},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/LinuxTableLoader.html","title":"LinuxTableLoader","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/LinuxTableLoader.html#sema_toolchain.sema_scdg.application.procedures.LinuxTableLoader","title":"LinuxTableLoader","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/WindowsSimProcedure.html","title":"WindowsSimProcedure","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/WindowsSimProcedure.html#sema_toolchain.sema_scdg.application.procedures.WindowsSimProcedure","title":"WindowsSimProcedure","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/WindowsSimProcedure.html#sema_toolchain.sema_scdg.application.procedures.WindowsSimProcedure.WindowsSimProcedure","title":"WindowsSimProcedure","text":"<pre><code>WindowsSimProcedure(verbose=False)\n</code></pre> <p>               Bases: <code>CustomSimProcedure</code></p> <p>Defines methods for applying custom simulation procedures and hooks in a Windows environment.</p> <p>This class includes methods for setting up the logger, dealing with alternative names, checking for names in angr simprocedures, applying static hooks, and customizing hooks for Windows symbols.</p> <p>This method sets up the Windows environment for simulation procedures by initializing the logger and configuring the environment for Windows-specific procedures.</p> Source code in <code>sema_toolchain/sema_scdg/application/procedures/WindowsSimProcedure.py</code> <pre><code>def __init__(self, verbose = False):\n    \"\"\"\n    Initializes a Windows simulation procedure with optional verbosity.\n\n    This method sets up the Windows environment for simulation procedures by initializing the logger and configuring the environment for Windows-specific procedures.\n    \"\"\"\n    super().__init__(verbose)\n    self.log = None\n    self.setup(\"windows\")\n</code></pre>"},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/WindowsSimProcedure.html#sema_toolchain.sema_scdg.application.procedures.WindowsSimProcedure.WindowsSimProcedure.amd64_sim_proc_hook","title":"amd64_sim_proc_hook","text":"<pre><code>amd64_sim_proc_hook(project, name, sim_proc)\n</code></pre> <p>Applies a simulation procedure hook for AMD64 architecture in the project.</p> <p>This function checks if the project architecture is AMD64 and hooks the specified name with the provided simulation procedure, applying the appropriate calling convention.</p> Source code in <code>sema_toolchain/sema_scdg/application/procedures/WindowsSimProcedure.py</code> <pre><code>def amd64_sim_proc_hook(self, project, name, sim_proc):\n    \"\"\"\n    Applies a simulation procedure hook for AMD64 architecture in the project.\n\n    This function checks if the project architecture is AMD64 and hooks the specified name with the provided simulation procedure, applying the appropriate calling convention.\n    \"\"\"\n    if project.arch.name == \"AMD64\":\n        project.hook(\n            name,\n            sim_proc(\n                cc=SimCCMicrosoftAMD64(project.arch)\n            ),\n        )\n        return True\n    return False\n</code></pre>"},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/WindowsSimProcedure.html#sema_toolchain.sema_scdg.application.procedures.WindowsSimProcedure.WindowsSimProcedure.config_logger","title":"config_logger","text":"<pre><code>config_logger()\n</code></pre> <p>Configures the logger if it is not already set.</p> <p>This function sets up the logger for the Windows simulation procedure, initializing it with the specified log level if it is not already defined.</p> Source code in <code>sema_toolchain/sema_scdg/application/procedures/WindowsSimProcedure.py</code> <pre><code>def config_logger(self):\n    \"\"\"\n    Configures the logger if it is not already set.\n\n    This function sets up the logger for the Windows simulation procedure, initializing it with the specified log level if it is not already defined.\n    \"\"\"\n    if self.log is None:\n        self.log = logger\n        self.log_level = log_level\n</code></pre>"},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/WindowsSimProcedure.html#sema_toolchain.sema_scdg.application.procedures.WindowsSimProcedure.WindowsSimProcedure.custom_hook_static","title":"custom_hook_static","text":"<pre><code>custom_hook_static(proj)\n</code></pre> <p>Applies custom static hooks to symbols in the project, handling Windows-specific procedures.</p> <p>This function customizes hooking for specific Windows symbols, including manual linking, checking for existing angr simulation procedures, and applying appropriate hooks based on the project architecture and symbol names.</p> Source code in <code>sema_toolchain/sema_scdg/application/procedures/WindowsSimProcedure.py</code> <pre><code>def custom_hook_static(self, proj):\n    \"\"\"\n    Applies custom static hooks to symbols in the project, handling Windows-specific procedures.\n\n    This function customizes hooking for specific Windows symbols, including manual linking, checking for existing angr simulation procedures, and applying appropriate hooks based on the project architecture and symbol names.\n    \"\"\"\n    if self.verbose: self.log.info(\"custom_hook_static_windows\")\n    proj.loader\n    symbols = proj.loader.symbols\n\n    custom_pack = self.sim_proc[\"custom_package\"]\n\n    manual_link = {\n        \"LoadLibraryA\": custom_pack[\"LoadLibraryA\"],\n        \"LoadLibraryExA\": custom_pack[\"LoadLibraryExA\"],\n        \"LoadLibraryW\": custom_pack[\"LoadLibraryW\"],\n        \"LoadLibraryExW\": custom_pack[\"LoadLibraryExW\"],\n        \"GetProcAddress\": custom_pack[\"GetProcAddress\"],\n        \"GetModuleHandleExW\": custom_pack[\"GetModuleHandleExW\"],\n        \"GetModuleHandleExA\": custom_pack[\"GetModuleHandleExA\"],\n        \"GetModuleHandleW\": custom_pack[\"GetModuleHandleW\"],\n        \"GetModuleHandleA\": custom_pack[\"GetModuleHandleA\"],\n        \"GetModuleFileNameA\": custom_pack[\"GetModuleFileNameA\"],\n        \"GetModuleFileNameW\": custom_pack[\"GetModuleFileNameW\"],\n        # \"GetModuleFileNameExA\": custom_pack[\"GetModuleFileNameExA\"],\n        # \"GetModuleFileNameExW\": custom_pack[\"GetModuleFileNameExW\"],\n    }\n\n    ignore_simproc = {\"LoadLibraryA\", \"LoadLibraryW\"}\n    simproc64 = {\"fopen64\": \"fopen\"}\n    angr_simproc_to_check = [\n        \"glibc\",\n        \"libc\",\n        \"posix\",\n        \"linux_kernel\",\n        \"win32\",\n        \"win_user32\",\n        \"ntdll\",\n        \"msvcr\"\n    ]\n\n    for symb in symbols:\n        name = symb.name\n        if name in manual_link:\n            proj.unhook(symb.rebased_addr)\n            if proj.arch.name == \"X86\":\n                self.std_sim_proc_hook(proj, symb.rebased_addr, manual_link[name])\n            else:\n                proj.hook(symb.rebased_addr, manual_link[name](cc=SimCCMicrosoftAMD64(proj.arch)))\n        elif not name or name in ignore_simproc:\n            pass\n        boo = False\n        for simproc_to_check in angr_simproc_to_check:\n            if name in angr.SIM_PROCEDURES[simproc_to_check]:\n                boo = True\n                if proj.arch.name == \"X86\":\n                    if proj.simos.name == \"windows\":\n                        proj.hook(symb.rebased_addr, angr.SIM_PROCEDURES[simproc_to_check][name]())\n                else:\n                    self.amd64_sim_proc_hook(proj, symb.rebased_addr, angr.SIM_PROCEDURES[simproc_to_check][name])\n                break\n        if boo : continue\n        if name in simproc64:\n            if proj.arch.name == \"X86\":\n                if proj.simos.name == \"windows\":\n                    proj.hook(symb.rebased_addr, angr.SIM_PROCEDURES[\"libc\"][simproc64[name]]())\n            else:\n                self.amd64_sim_proc_hook(proj, symb.rebased_addr, angr.SIM_PROCEDURES[\"libc\"][simproc64[name]])\n        elif \"ordinal\" in name:\n            part_names = name.split(\".\")\n            lib_part = part_names[2][2:] + \".dll\"\n            ord_part = part_names[1]\n            if self.verbose:\n                self.log.info(lib_part)\n                self.log.info(ord_part)\n</code></pre>"},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/WindowsSimProcedure.html#sema_toolchain.sema_scdg.application.procedures.WindowsSimProcedure.WindowsSimProcedure.custom_hook_windows_symbols","title":"custom_hook_windows_symbols","text":"<pre><code>custom_hook_windows_symbols(proj)\n</code></pre> <p>Customizes hooking for Windows symbols in the project, handling special cases and excluded names.</p> <p>This function applies custom procedures to symbols, handles special cases, and excludes specific names when hooking Windows symbols in the project.</p> Source code in <code>sema_toolchain/sema_scdg/application/procedures/WindowsSimProcedure.py</code> <pre><code>def custom_hook_windows_symbols(self, proj):\n    \"\"\"\n    Customizes hooking for Windows symbols in the project, handling special cases and excluded names.\n\n    This function applies custom procedures to symbols, handles special cases, and excludes specific names when hooking Windows symbols in the project.\n    \"\"\"\n    if self.verbose: self.log.info(\"custom_hook_windows_symbols\")\n    proj.loader\n\n    excluded_simproc_name = [\"win32\",\"win_user32\",\"ntdll\",\"msvcr\"]\n    special_case_simproc_name = [\"posix\", \"linux_kernel\", \"libc\"]\n\n    symbols_set = set(proj.loader.symbols)\n    self.handle_custom_package_hooks(proj, symbols_set)\n\n    for lib in self.system_call_table:\n        for key in self.system_call_table[lib]:\n            name = self.system_call_table[lib][key][\"name\"]\n            if (not self.name_in_angr_simproc(name, excluded_simproc_name) and len(self.system_call_table[lib][key][\"arguments\"]) != 0):\n                for symb in symbols_set:\n                    if (name == symb.name and (not self.name_in_angr_simproc(name, special_case_simproc_name)) and name not in self.sim_proc[\"custom_package\"]):\n                        proj.hook_symbol(\n                            name, SIM_LIBRARIES[lib].get(name, proj.arch)\n                        )\n                    if symb.name and \"ordinal\" in symb.name:\n                        # ex : ordinal.680.b'shell32.dll'\n                        self.handle_ordinal(proj, symb, lib, name)\n</code></pre>"},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/WindowsSimProcedure.html#sema_toolchain.sema_scdg.application.procedures.WindowsSimProcedure.WindowsSimProcedure.deal_with_alt_names","title":"deal_with_alt_names","text":"<pre><code>deal_with_alt_names(pkg_name, proc)\n</code></pre> <p>Deals with alternative names by updating the simulation procedures dictionary with the alternative name.</p> <p>This function assigns the alternative name to the procedure and adds</p> Source code in <code>sema_toolchain/sema_scdg/application/procedures/WindowsSimProcedure.py</code> <pre><code>def deal_with_alt_names(self, pkg_name, proc):\n    \"\"\"\n    Deals with alternative names by updating the simulation procedures dictionary with the alternative name.\n\n    This function assigns the alternative name to the procedure and adds\n    \"\"\"\n    new_proc = proc # TODO clone\n    new_proc.__name__ = proc.ALT_NAMES\n    new_proc.__qualname__ = proc.ALT_NAMES\n    self.sim_proc[pkg_name][proc.ALT_NAMES] = new_proc\n</code></pre>"},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/WindowsSimProcedure.html#sema_toolchain.sema_scdg.application.procedures.WindowsSimProcedure.WindowsSimProcedure.handle_custom_package_hooks","title":"handle_custom_package_hooks","text":"<pre><code>handle_custom_package_hooks(proj, symbols_set)\n</code></pre> <p>Handles custom package hooks for symbols in the project.</p> <p>This function iterates through a set of symbols and applies custom procedures from the custom package, handling different cases based on the symbol name and exceptions.</p> Source code in <code>sema_toolchain/sema_scdg/application/procedures/WindowsSimProcedure.py</code> <pre><code>def handle_custom_package_hooks(self, proj, symbols_set):\n    \"\"\"\n    Handles custom package hooks for symbols in the project.\n\n    This function iterates through a set of symbols and applies custom procedures from the custom package, handling different cases based on the symbol name and exceptions.\n    \"\"\"\n    for symb in symbols_set:\n        if symb.name in self.sim_proc[\"custom_package\"]:\n            proj.unhook(symb.rebased_addr)\n            if not self.amd64_sim_proc_hook(proj, symb.rebased_addr, self.sim_proc[\"custom_package\"][symb.name]):\n                if symb.name not in self.CDECL_EXCEPT:\n                    self.std_sim_proc_hook(proj, symb.rebased_addr, self.sim_proc[\"custom_package\"][symb.name])\n                else:\n                    self.exception_sim_proc_hook(proj, symb.rebased_addr, self.sim_proc[\"custom_package\"][symb.name])\n</code></pre>"},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/WindowsSimProcedure.html#sema_toolchain.sema_scdg.application.procedures.WindowsSimProcedure.WindowsSimProcedure.handle_ordinal","title":"handle_ordinal","text":"<pre><code>handle_ordinal(proj, symb, lib, name)\n</code></pre> <p>Handles ordinal symbols by resolving and applying the appropriate procedures in the project.</p> <p>This function processes ordinal symbols by extracting the necessary information, determining the real name, and applying the corresponding procedures in the project based on the library and ordinal part.</p> Source code in <code>sema_toolchain/sema_scdg/application/procedures/WindowsSimProcedure.py</code> <pre><code>def handle_ordinal(self, proj, symb, lib, name):\n    \"\"\"\n    Handles ordinal symbols by resolving and applying the appropriate procedures in the project.\n\n    This function processes ordinal symbols by extracting the necessary information, determining the real name, and applying the corresponding procedures in the project based on the library and ordinal part.\n    \"\"\"\n    part_names = symb.name.split(\".\")\n    lib_part = f\"{part_names[2][2:]}.dll\"\n    ord_part = part_names[1]\n    try:\n        real_name = self.system_call_table[lib_part][ord_part][\"name\"]\n    except Exception:\n        real_name = \"nope\"\n\n    if real_name != \"nope\":\n        if (real_name in self.sim_proc[\"custom_package\"]):\n            proj.unhook(symb.rebased_addr)\n            if not self.amd64_sim_proc_hook(proj, symb.rebased_addr, self.sim_proc[\"custom_package\"][name]):\n                self.std_sim_proc_hook(proj, symb.rebased_addr, self.sim_proc[\"custom_package\"][real_name])\n        elif lib_part == lib:\n            proj.unhook(symb.rebased_addr)\n            proj.hook(\n                symb.rebased_addr,\n                SIM_LIBRARIES[lib].get(real_name, proj.arch),\n            )\n</code></pre>"},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/WindowsSimProcedure.html#sema_toolchain.sema_scdg.application.procedures.WindowsSimProcedure.WindowsSimProcedure.load_syscall_table","title":"load_syscall_table","text":"<pre><code>load_syscall_table(proj)\n</code></pre> <p>Loads the syscall table using the DLL loader in the project.</p> <p>This function initializes the system call table by loading it from the project using the DLL loader.</p> Source code in <code>sema_toolchain/sema_scdg/application/procedures/WindowsSimProcedure.py</code> <pre><code>def load_syscall_table(self, proj):\n    \"\"\"\n    Loads the syscall table using the DLL loader in the project.\n\n    This function initializes the system call table by loading it from the project using the DLL loader.\n    \"\"\"\n    self.system_call_table = self.ddl_loader.load(proj, False , None)\n</code></pre>"},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/WindowsSimProcedure.html#sema_toolchain.sema_scdg.application.procedures.WindowsSimProcedure.WindowsSimProcedure.name_in_angr_simproc","title":"name_in_angr_simproc","text":"<pre><code>name_in_angr_simproc(name, simproc_names)\n</code></pre> <p>Checks if a given name is present in the angr simulation procedures for the specified simulation procedure names.</p> <p>This function iterates through the provided simulation procedure names to determine if the given name exists in the angr simulation procedures, returning True if found, otherwise False.</p> Source code in <code>sema_toolchain/sema_scdg/application/procedures/WindowsSimProcedure.py</code> <pre><code>def name_in_angr_simproc(self, name, simproc_names):\n    \"\"\"\n    Checks if a given name is present in the angr simulation procedures for the specified simulation procedure names.\n\n    This function iterates through the provided simulation procedure names to determine if the given name exists in the angr simulation procedures, returning True if found, otherwise False.\n    \"\"\"\n    return any(name in angr.SIM_PROCEDURES[i] for i in simproc_names)\n</code></pre>"},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/calls/index.html","title":"calls","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/calls/index.html#sema_toolchain.sema_scdg.application.procedures.calls","title":"calls","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/linux/index.html","title":"Index","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/linux/index.html#sema_toolchain.sema_scdg.application.procedures.linux","title":"linux","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/linux/custom_package/index.html","title":"Index","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/linux/custom_package/index.html#sema_toolchain.sema_scdg.application.procedures.linux.custom_package","title":"custom_package","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/linux/custom_package/chdir.html","title":"chdir","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/linux/custom_package/chdir.html#sema_toolchain.sema_scdg.application.procedures.linux.custom_package.chdir","title":"chdir","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/linux/custom_package/clock.html","title":"clock","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/linux/custom_package/clock.html#sema_toolchain.sema_scdg.application.procedures.linux.custom_package.clock","title":"clock","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/linux/custom_package/clock_gettime.html","title":"clock_gettime","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/linux/custom_package/clock_gettime.html#sema_toolchain.sema_scdg.application.procedures.linux.custom_package.clock_gettime","title":"clock_gettime","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/linux/custom_package/clone.html","title":"clone","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/linux/custom_package/clone.html#sema_toolchain.sema_scdg.application.procedures.linux.custom_package.clone","title":"clone","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/linux/custom_package/connect.html","title":"connect","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/linux/custom_package/connect.html#sema_toolchain.sema_scdg.application.procedures.linux.custom_package.connect","title":"connect","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/linux/custom_package/exit.html","title":"exit","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/linux/custom_package/exit.html#sema_toolchain.sema_scdg.application.procedures.linux.custom_package.exit","title":"exit","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/linux/custom_package/fstat.html","title":"fstat","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/linux/custom_package/fstat.html#sema_toolchain.sema_scdg.application.procedures.linux.custom_package.fstat","title":"fstat","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/linux/custom_package/futex.html","title":"futex","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/linux/custom_package/futex.html#sema_toolchain.sema_scdg.application.procedures.linux.custom_package.futex","title":"futex","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/linux/custom_package/gen_simproc0.html","title":"gen_simproc0","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/linux/custom_package/gen_simproc0.html#sema_toolchain.sema_scdg.application.procedures.linux.custom_package.gen_simproc0","title":"gen_simproc0","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/linux/custom_package/gen_simproc1.html","title":"gen_simproc1","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/linux/custom_package/gen_simproc1.html#sema_toolchain.sema_scdg.application.procedures.linux.custom_package.gen_simproc1","title":"gen_simproc1","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/linux/custom_package/gen_simproc1v.html","title":"gen_simproc1v","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/linux/custom_package/gen_simproc1v.html#sema_toolchain.sema_scdg.application.procedures.linux.custom_package.gen_simproc1v","title":"gen_simproc1v","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/linux/custom_package/gen_simproc2.html","title":"gen_simproc2","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/linux/custom_package/gen_simproc2.html#sema_toolchain.sema_scdg.application.procedures.linux.custom_package.gen_simproc2","title":"gen_simproc2","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/linux/custom_package/gen_simproc2v.html","title":"gen_simproc2v","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/linux/custom_package/gen_simproc2v.html#sema_toolchain.sema_scdg.application.procedures.linux.custom_package.gen_simproc2v","title":"gen_simproc2v","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/linux/custom_package/gen_simproc3.html","title":"gen_simproc3","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/linux/custom_package/gen_simproc3.html#sema_toolchain.sema_scdg.application.procedures.linux.custom_package.gen_simproc3","title":"gen_simproc3","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/linux/custom_package/gen_simproc3v.html","title":"gen_simproc3v","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/linux/custom_package/gen_simproc3v.html#sema_toolchain.sema_scdg.application.procedures.linux.custom_package.gen_simproc3v","title":"gen_simproc3v","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/linux/custom_package/gen_simproc4.html","title":"gen_simproc4","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/linux/custom_package/gen_simproc4.html#sema_toolchain.sema_scdg.application.procedures.linux.custom_package.gen_simproc4","title":"gen_simproc4","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/linux/custom_package/gen_simproc4v.html","title":"gen_simproc4v","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/linux/custom_package/gen_simproc4v.html#sema_toolchain.sema_scdg.application.procedures.linux.custom_package.gen_simproc4v","title":"gen_simproc4v","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/linux/custom_package/gen_simproc5.html","title":"gen_simproc5","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/linux/custom_package/gen_simproc5.html#sema_toolchain.sema_scdg.application.procedures.linux.custom_package.gen_simproc5","title":"gen_simproc5","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/linux/custom_package/gen_simproc5v.html","title":"gen_simproc5v","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/linux/custom_package/gen_simproc5v.html#sema_toolchain.sema_scdg.application.procedures.linux.custom_package.gen_simproc5v","title":"gen_simproc5v","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/linux/custom_package/gen_simproc6.html","title":"gen_simproc6","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/linux/custom_package/gen_simproc6.html#sema_toolchain.sema_scdg.application.procedures.linux.custom_package.gen_simproc6","title":"gen_simproc6","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/linux/custom_package/gen_simproc6v.html","title":"gen_simproc6v","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/linux/custom_package/gen_simproc6v.html#sema_toolchain.sema_scdg.application.procedures.linux.custom_package.gen_simproc6v","title":"gen_simproc6v","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/linux/custom_package/gen_simproc7.html","title":"gen_simproc7","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/linux/custom_package/gen_simproc7.html#sema_toolchain.sema_scdg.application.procedures.linux.custom_package.gen_simproc7","title":"gen_simproc7","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/linux/custom_package/getgid.html","title":"getgid","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/linux/custom_package/getgid.html#sema_toolchain.sema_scdg.application.procedures.linux.custom_package.getgid","title":"getgid","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/linux/custom_package/getpwuid.html","title":"getpwuid","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/linux/custom_package/getpwuid.html#sema_toolchain.sema_scdg.application.procedures.linux.custom_package.getpwuid","title":"getpwuid","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/linux/custom_package/getsockname.html","title":"getsockname","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/linux/custom_package/getsockname.html#sema_toolchain.sema_scdg.application.procedures.linux.custom_package.getsockname","title":"getsockname","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/linux/custom_package/gettimeofday.html","title":"gettimeofday","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/linux/custom_package/gettimeofday.html#sema_toolchain.sema_scdg.application.procedures.linux.custom_package.gettimeofday","title":"gettimeofday","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/linux/custom_package/getuid.html","title":"getuid","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/linux/custom_package/getuid.html#sema_toolchain.sema_scdg.application.procedures.linux.custom_package.getuid","title":"getuid","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/linux/custom_package/nanosleep.html","title":"nanosleep","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/linux/custom_package/nanosleep.html#sema_toolchain.sema_scdg.application.procedures.linux.custom_package.nanosleep","title":"nanosleep","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/linux/custom_package/open.html","title":"open","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/linux/custom_package/open.html#sema_toolchain.sema_scdg.application.procedures.linux.custom_package.open","title":"open","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/linux/custom_package/openat.html","title":"openat","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/linux/custom_package/openat.html#sema_toolchain.sema_scdg.application.procedures.linux.custom_package.openat","title":"openat","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/linux/custom_package/prctl.html","title":"prctl","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/linux/custom_package/prctl.html#sema_toolchain.sema_scdg.application.procedures.linux.custom_package.prctl","title":"prctl","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/linux/custom_package/read.html","title":"read","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/linux/custom_package/read.html#sema_toolchain.sema_scdg.application.procedures.linux.custom_package.read","title":"read","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/linux/custom_package/readdir.html","title":"readdir","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/linux/custom_package/readdir.html#sema_toolchain.sema_scdg.application.procedures.linux.custom_package.readdir","title":"readdir","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/linux/custom_package/readlink.html","title":"readlink","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/linux/custom_package/readlink.html#sema_toolchain.sema_scdg.application.procedures.linux.custom_package.readlink","title":"readlink","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/linux/custom_package/readv.html","title":"readv","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/linux/custom_package/readv.html#sema_toolchain.sema_scdg.application.procedures.linux.custom_package.readv","title":"readv","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/linux/custom_package/rt_sigaction.html","title":"rt_sigaction","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/linux/custom_package/rt_sigaction.html#sema_toolchain.sema_scdg.application.procedures.linux.custom_package.rt_sigaction","title":"rt_sigaction","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/linux/custom_package/rt_sigprocmask.html","title":"rt_sigprocmask","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/linux/custom_package/rt_sigprocmask.html#sema_toolchain.sema_scdg.application.procedures.linux.custom_package.rt_sigprocmask","title":"rt_sigprocmask","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/linux/custom_package/select.html","title":"select","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/linux/custom_package/select.html#sema_toolchain.sema_scdg.application.procedures.linux.custom_package.select","title":"select","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/linux/custom_package/sendto.html","title":"sendto","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/linux/custom_package/sendto.html#sema_toolchain.sema_scdg.application.procedures.linux.custom_package.sendto","title":"sendto","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/linux/custom_package/set_thread_area.html","title":"set_thread_area","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/linux/custom_package/set_thread_area.html#sema_toolchain.sema_scdg.application.procedures.linux.custom_package.set_thread_area","title":"set_thread_area","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/linux/custom_package/setsid.html","title":"setsid","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/linux/custom_package/setsid.html#sema_toolchain.sema_scdg.application.procedures.linux.custom_package.setsid","title":"setsid","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/linux/custom_package/setsid.html#sema_toolchain.sema_scdg.application.procedures.linux.custom_package.setsid.setsid","title":"setsid","text":"<p>               Bases: <code>SimProcedure</code></p>"},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/linux/custom_package/setsid.html#sema_toolchain.sema_scdg.application.procedures.linux.custom_package.setsid.setsid.run","title":"run","text":"<pre><code>run()\n</code></pre> <p>if self.state.globals['is_leader_group'] :     return -1 else :     self.state.globals['is_leader_group'] = True     return self.state.posix.pid</p> Source code in <code>sema_toolchain/sema_scdg/application/procedures/linux/custom_package/setsid.py</code> <pre><code>def run(self):\n    \"\"\"\n    if self.state.globals['is_leader_group'] :\n        return -1\n    else :\n        self.state.globals['is_leader_group'] = True\n        return self.state.posix.pid\n    \"\"\"\n    return self.state.solver.Unconstrained(\n        \"unconstrained_ret_%s\" % self.display_name,\n        self.state.arch.bits,\n        key=(\"api\", \"?\", self.display_name),\n    )\n</code></pre>"},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/linux/custom_package/sigprocmask.html","title":"sigprocmask","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/linux/custom_package/sigprocmask.html#sema_toolchain.sema_scdg.application.procedures.linux.custom_package.sigprocmask","title":"sigprocmask","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/linux/custom_package/socket.html","title":"socket","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/linux/custom_package/socket.html#sema_toolchain.sema_scdg.application.procedures.linux.custom_package.socket","title":"socket","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/linux/custom_package/socketcall.html","title":"socketcall","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/linux/custom_package/socketcall.html#sema_toolchain.sema_scdg.application.procedures.linux.custom_package.socketcall","title":"socketcall","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/linux/custom_package/socketpair.html","title":"socketpair","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/linux/custom_package/socketpair.html#sema_toolchain.sema_scdg.application.procedures.linux.custom_package.socketpair","title":"socketpair","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/linux/custom_package/stat.html","title":"stat","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/linux/custom_package/stat.html#sema_toolchain.sema_scdg.application.procedures.linux.custom_package.stat","title":"stat","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/linux/custom_package/time.html","title":"time","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/linux/custom_package/time.html#sema_toolchain.sema_scdg.application.procedures.linux.custom_package.time","title":"time","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/linux/custom_package/times.html","title":"times","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/linux/custom_package/times.html#sema_toolchain.sema_scdg.application.procedures.linux.custom_package.times","title":"times","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/linux/custom_package/unlink.html","title":"unlink","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/linux/custom_package/unlink.html#sema_toolchain.sema_scdg.application.procedures.linux.custom_package.unlink","title":"unlink","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/linux/custom_package/write.html","title":"write","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/linux/custom_package/write.html#sema_toolchain.sema_scdg.application.procedures.linux.custom_package.write","title":"write","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/linux/custom_package/writev.html","title":"writev","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/linux/custom_package/writev.html#sema_toolchain.sema_scdg.application.procedures.linux.custom_package.writev","title":"writev","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/index.html","title":"Index","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/index.html#sema_toolchain.sema_scdg.application.procedures.windows","title":"windows","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_hook/index.html","title":"Index","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_hook/index.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_hook","title":"custom_hook","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_hook/AddAtomA.html","title":"AddAtomA","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_hook/AddAtomA.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_hook.AddAtomA","title":"AddAtomA","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_hook/CPUIDHook.html","title":"CPUIDHook","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_hook/CPUIDHook.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_hook.CPUIDHook","title":"CPUIDHook","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_hook/CldHook.html","title":"CldHook","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_hook/CldHook.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_hook.CldHook","title":"CldHook","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_hook/ClearStackHook.html","title":"ClearStackHook","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_hook/ClearStackHook.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_hook.ClearStackHook","title":"ClearStackHook","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_hook/Copy3Hook.html","title":"Copy3Hook","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_hook/Copy3Hook.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_hook.Copy3Hook","title":"Copy3Hook","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_hook/CopyHook.html","title":"CopyHook","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_hook/CopyHook.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_hook.CopyHook","title":"CopyHook","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_hook/Crc32Hook.html","title":"Crc32Hook","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_hook/Crc32Hook.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_hook.Crc32Hook","title":"Crc32Hook","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_hook/Crc32Hook2.html","title":"Crc32Hook2","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_hook/Crc32Hook2.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_hook.Crc32Hook2","title":"Crc32Hook2","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_hook/FindAtomA.html","title":"FindAtomA","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_hook/FindAtomA.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_hook.FindAtomA","title":"FindAtomA","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_hook/FindStartHook.html","title":"FindStartHook","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_hook/FindStartHook.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_hook.FindStartHook","title":"FindStartHook","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_hook/LAB_00cafb11.html","title":"LAB_00cafb11","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_hook/LAB_00cafb11.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_hook.LAB_00cafb11","title":"LAB_00cafb11","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_hook/MagicRATForceHook.html","title":"MagicRATForceHook","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_hook/MagicRATForceHook.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_hook.MagicRATForceHook","title":"MagicRATForceHook","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_hook/MagicRATSSE3Hook.html","title":"MagicRATSSE3Hook","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_hook/MagicRATSSE3Hook.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_hook.MagicRATSSE3Hook","title":"MagicRATSSE3Hook","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_hook/MagicRATTrapHook.html","title":"MagicRATTrapHook","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_hook/MagicRATTrapHook.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_hook.MagicRATTrapHook","title":"MagicRATTrapHook","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_hook/MagicRATTrapHook2.html","title":"MagicRATTrapHook2","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_hook/MagicRATTrapHook2.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_hook.MagicRATTrapHook2","title":"MagicRATTrapHook2","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_hook/MagicRATTrapHook3.html","title":"MagicRATTrapHook3","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_hook/MagicRATTrapHook3.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_hook.MagicRATTrapHook3","title":"MagicRATTrapHook3","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_hook/MagicRATTrapHook4.html","title":"MagicRATTrapHook4","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_hook/MagicRATTrapHook4.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_hook.MagicRATTrapHook4","title":"MagicRATTrapHook4","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_hook/MurmurHash2Hook.html","title":"MurmurHash2Hook","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_hook/MurmurHash2Hook.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_hook.MurmurHash2Hook","title":"MurmurHash2Hook","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_hook/MurmurHashHook.html","title":"MurmurHashHook","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_hook/MurmurHashHook.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_hook.MurmurHashHook","title":"MurmurHashHook","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_hook/RepMovsbHook.html","title":"RepMovsbHook","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_hook/RepMovsbHook.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_hook.RepMovsbHook","title":"RepMovsbHook","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_hook/RepMovsdHook.html","title":"RepMovsdHook","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_hook/RepMovsdHook.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_hook.RepMovsdHook","title":"RepMovsdHook","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_hook/RepStosdHook.html","title":"RepStosdHook","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_hook/RepStosdHook.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_hook.RepStosdHook","title":"RepStosdHook","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_hook/RewritingHook.html","title":"RewritingHook","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_hook/RewritingHook.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_hook.RewritingHook","title":"RewritingHook","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_hook/StdHook.html","title":"StdHook","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_hook/StdHook.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_hook.StdHook","title":"StdHook","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_hook/WeedLeaf2Hook.html","title":"WeedLeaf2Hook","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_hook/WeedLeaf2Hook.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_hook.WeedLeaf2Hook","title":"WeedLeaf2Hook","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_hook/WeedLeaf3Hook.html","title":"WeedLeaf3Hook","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_hook/WeedLeaf3Hook.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_hook.WeedLeaf3Hook","title":"WeedLeaf3Hook","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_hook/WeedLeafHook.html","title":"WeedLeafHook","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_hook/WeedLeafHook.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_hook.WeedLeafHook","title":"WeedLeafHook","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_hook/memcpy.html","title":"memcpy","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_hook/memcpy.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_hook.memcpy","title":"memcpy","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/index.html","title":"Index","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/index.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package","title":"custom_package","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/%3F%3F2%40YAPAXI%40Z.html","title":"??2@YAPAXI@Z","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/%3F%3F2%40YAPAXI%40Z.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.??2@YAPAXI@Z","title":"??2@YAPAXI@Z","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/AddVectoredExceptionHandler.html","title":"AddVectoredExceptionHandler","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/AddVectoredExceptionHandler.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.AddVectoredExceptionHandler","title":"AddVectoredExceptionHandler","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/AdjustTokenPrivileges.html","title":"AdjustTokenPrivileges","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/AdjustTokenPrivileges.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.AdjustTokenPrivileges","title":"AdjustTokenPrivileges","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/AfxWinMain.html","title":"AfxWinMain","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/AfxWinMain.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.AfxWinMain","title":"AfxWinMain","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/BlockInput.html","title":"BlockInput","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/BlockInput.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.BlockInput","title":"BlockInput","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/CheckRemoteDebuggerPresent.html","title":"CheckRemoteDebuggerPresent","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/CheckRemoteDebuggerPresent.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.CheckRemoteDebuggerPresent","title":"CheckRemoteDebuggerPresent","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/CloseHandle.html","title":"CloseHandle","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/CloseHandle.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.CloseHandle","title":"CloseHandle","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/CoCreateInstance.html","title":"CoCreateInstance","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/CoCreateInstance.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.CoCreateInstance","title":"CoCreateInstance","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/CommandLineToArgvW.html","title":"CommandLineToArgvW","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/CommandLineToArgvW.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.CommandLineToArgvW","title":"CommandLineToArgvW","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/CopyFileA.html","title":"CopyFileA","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/CopyFileA.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.CopyFileA","title":"CopyFileA","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/CreateEventA.html","title":"CreateEventA","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/CreateEventA.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.CreateEventA","title":"CreateEventA","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/CreateEventW.html","title":"CreateEventW","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/CreateEventW.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.CreateEventW","title":"CreateEventW","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/CreateFileA.html","title":"CreateFileA","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/CreateFileA.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.CreateFileA","title":"CreateFileA","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/CreateFileMappingW.html","title":"CreateFileMappingW","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/CreateFileMappingW.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.CreateFileMappingW","title":"CreateFileMappingW","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/CreateFileW.html","title":"CreateFileW","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/CreateFileW.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.CreateFileW","title":"CreateFileW","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/CreateMutexA.html","title":"CreateMutexA","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/CreateMutexA.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.CreateMutexA","title":"CreateMutexA","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/CreateProcessA.html","title":"CreateProcessA","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/CreateProcessA.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.CreateProcessA","title":"CreateProcessA","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/CreateProcessW.html","title":"CreateProcessW","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/CreateProcessW.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.CreateProcessW","title":"CreateProcessW","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/CreateRemoteThread.html","title":"CreateRemoteThread","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/CreateRemoteThread.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.CreateRemoteThread","title":"CreateRemoteThread","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/CreateSemaphoreA.html","title":"CreateSemaphoreA","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/CreateSemaphoreA.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.CreateSemaphoreA","title":"CreateSemaphoreA","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/CreateSemaphoreW.html","title":"CreateSemaphoreW","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/CreateSemaphoreW.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.CreateSemaphoreW","title":"CreateSemaphoreW","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/CreateServiceA.html","title":"CreateServiceA","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/CreateServiceA.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.CreateServiceA","title":"CreateServiceA","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/CreateThread.html","title":"CreateThread","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/CreateThread.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.CreateThread","title":"CreateThread","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/CreateToolhelp32Snapshot.html","title":"CreateToolhelp32Snapshot","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/CreateToolhelp32Snapshot.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.CreateToolhelp32Snapshot","title":"CreateToolhelp32Snapshot","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/CreateWindowExA.html","title":"CreateWindowExA","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/CreateWindowExA.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.CreateWindowExA","title":"CreateWindowExA","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/CryptAcquireContextW.html","title":"CryptAcquireContextW","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/CryptAcquireContextW.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.CryptAcquireContextW","title":"CryptAcquireContextW","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/CryptCreateHash.html","title":"CryptCreateHash","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/CryptCreateHash.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.CryptCreateHash","title":"CryptCreateHash","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/CryptDestroyHash.html","title":"CryptDestroyHash","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/CryptDestroyHash.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.CryptDestroyHash","title":"CryptDestroyHash","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/CryptGetHashParam.html","title":"CryptGetHashParam","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/CryptGetHashParam.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.CryptGetHashParam","title":"CryptGetHashParam","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/CryptHashData.html","title":"CryptHashData","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/CryptHashData.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.CryptHashData","title":"CryptHashData","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/DecodePointer.html","title":"DecodePointer","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/DecodePointer.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.DecodePointer","title":"DecodePointer","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/DeleteFileW.html","title":"DeleteFileW","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/DeleteFileW.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.DeleteFileW","title":"DeleteFileW","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/DispatchMessageA.html","title":"DispatchMessageA","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/DispatchMessageA.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.DispatchMessageA","title":"DispatchMessageA","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/DuplicateHandle.html","title":"DuplicateHandle","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/DuplicateHandle.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.DuplicateHandle","title":"DuplicateHandle","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/EncodePointer.html","title":"EncodePointer","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/EncodePointer.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.EncodePointer","title":"EncodePointer","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/EnumCalendarInfoW.html","title":"EnumCalendarInfoW","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/EnumCalendarInfoW.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.EnumCalendarInfoW","title":"EnumCalendarInfoW","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/ExpandEnvironmentStringsW.html","title":"ExpandEnvironmentStringsW","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/ExpandEnvironmentStringsW.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.ExpandEnvironmentStringsW","title":"ExpandEnvironmentStringsW","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/FileTimeToSystemTime.html","title":"FileTimeToSystemTime","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/FileTimeToSystemTime.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.FileTimeToSystemTime","title":"FileTimeToSystemTime","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/FindClose.html","title":"FindClose","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/FindClose.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.FindClose","title":"FindClose","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/FindFirstFile.html","title":"FindFirstFile","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/FindFirstFile.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.FindFirstFile","title":"FindFirstFile","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/FindFirstFileA.html","title":"FindFirstFileA","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/FindFirstFileA.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.FindFirstFileA","title":"FindFirstFileA","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/FindFirstFileW.html","title":"FindFirstFileW","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/FindFirstFileW.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.FindFirstFileW","title":"FindFirstFileW","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/FindNextFileA.html","title":"FindNextFileA","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/FindNextFileA.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.FindNextFileA","title":"FindNextFileA","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/FindNextFileW.html","title":"FindNextFileW","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/FindNextFileW.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.FindNextFileW","title":"FindNextFileW","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/FindResourceA.html","title":"FindResourceA","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/FindResourceA.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.FindResourceA","title":"FindResourceA","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/FindResourceW.html","title":"FindResourceW","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/FindResourceW.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.FindResourceW","title":"FindResourceW","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/FindWindowW.html","title":"FindWindowW","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/FindWindowW.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.FindWindowW","title":"FindWindowW","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/FlsAlloc.html","title":"FlsAlloc","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/FlsAlloc.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.FlsAlloc","title":"FlsAlloc","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/FlsFree.html","title":"FlsFree","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/FlsFree.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.FlsFree","title":"FlsFree","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/FlsGetValue.html","title":"FlsGetValue","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/FlsGetValue.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.FlsGetValue","title":"FlsGetValue","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/FlsSetValue.html","title":"FlsSetValue","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/FlsSetValue.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.FlsSetValue","title":"FlsSetValue","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/FlushFileBuffers.html","title":"FlushFileBuffers","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/FlushFileBuffers.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.FlushFileBuffers","title":"FlushFileBuffers","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/FormatMessageA.html","title":"FormatMessageA","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/FormatMessageA.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.FormatMessageA","title":"FormatMessageA","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/FormatMessageW.html","title":"FormatMessageW","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/FormatMessageW.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.FormatMessageW","title":"FormatMessageW","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/FormatMessageW.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.FormatMessageW.FormatMessageW","title":"FormatMessageW","text":"<p>               Bases: <code>SimProcedure</code></p>"},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/FormatMessageW.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.FormatMessageW.FormatMessageW.run","title":"run","text":"<pre><code>run(dwFlags, lpSource, dwMessageId, dwLanguageId, lpBuffer, nSize, Arguments)\n</code></pre> <p>summary Formats a message string. The function requires a message definition as input. The message definition can come from a buffer passed into the function. It can come from a message table resource in an already-loaded module. Or the caller can ask the function to search the system's message table resource(s) for the message definition. The function finds the message definition in a message table resource based on a message identifier and a language identifier. The function copies the formatted message text to an output buffer, processing any embedded insert sequences if requested.</p> Source code in <code>sema_toolchain/sema_scdg/application/procedures/windows/custom_package/FormatMessageW.py</code> <pre><code>def run(self, dwFlags, lpSource, dwMessageId, dwLanguageId, lpBuffer, nSize, Arguments):\n    \"\"\"_summary_\n    Formats a message string. The function requires a message definition as input. The message definition can come from a\n    buffer passed into the function. It can come from a message table resource in an already-loaded module. Or the caller\n    can ask the function to search the system's message table resource(s) for the message definition. The function finds\n    the message definition in a message table resource based on a message identifier and a language identifier. The function\n    copies the formatted message text to an output buffer, processing any embedded insert sequences if requested.\n    \"\"\"\n    ptr=self.state.solver.BVS(\"lpBuffer\",8*self.state.solver.eval(nSize))\n    self.state.memory.store(lpBuffer,ptr)\n\n    addr = self.state.solver.eval(lpSource)\n    buf = self.state.solver.eval(lpBuffer)\n    byte = self.state.solver.eval(self.state.memory.load(addr,1))\n    flag = 0\n    sup_args = []\n    formatcount = 0\n    while(byte != 0x0):\n        if flag == 1:\n            formatcount += 1\n            flag = 0\n            if byte == 0x64 or byte == 0x69: #%d %i\n                arg = str(self.state.mem[self.state.regs.esp + 8 + 4 * formatcount].int.concrete)\n                sup_args.append(arg)\n                self.state.memory.store(buf,self.state.solver.BVV(arg))\n                buf += len(arg)\n            elif byte == 0x73: #s\n                argaddr = self.state.mem[self.state.regs.esp + 8 + 4 * formatcount].int.concrete\n                try:\n                    arg = self.state.mem[argaddr].string.concrete\n                    if hasattr(arg, \"decode\"):\n                        arg = arg.decode(\"utf-8\")\n                except:\n                    arg = self.state.solver.eval(argaddr)\n                    arg = hex(arg) # TODO\n                sup_args.append(arg)\n                self.state.memory.store(buf,self.state.solver.BVV(arg))\n                buf += len(arg)\n            else:\n                self.state.memory.store(buf,self.state.solver.BVV(0x25,8))\n                buf += 1\n                self.state.memory.store(buf,self.state.solver.BVV(byte,8))\n                buf += 1\n        elif byte == 0x25: # %\n            flag = 1\n        else:\n            self.state.memory.store(buf,self.state.solver.BVV(byte,8))\n            buf += 1\n        addr += 1\n        byte = self.state.solver.eval(self.state.memory.load(addr,1))\n    #self.arguments = self.arguments + sup_args\n\n    return self.state.solver.eval(nSize) - 1\n</code></pre>"},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/FreeLibrary.html","title":"FreeLibrary","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/FreeLibrary.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.FreeLibrary","title":"FreeLibrary","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/GetACP.html","title":"GetACP","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/GetACP.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.GetACP","title":"GetACP","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/GetAdaptersInfo.html","title":"GetAdaptersInfo","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/GetAdaptersInfo.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.GetAdaptersInfo","title":"GetAdaptersInfo","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/GetBinaryTypeW.html","title":"GetBinaryTypeW","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/GetBinaryTypeW.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.GetBinaryTypeW","title":"GetBinaryTypeW","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/GetCPInfo.html","title":"GetCPInfo","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/GetCPInfo.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.GetCPInfo","title":"GetCPInfo","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/GetCommandLineA.html","title":"GetCommandLineA","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/GetCommandLineA.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.GetCommandLineA","title":"GetCommandLineA","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/GetCommandLineW.html","title":"GetCommandLineW","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/GetCommandLineW.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.GetCommandLineW","title":"GetCommandLineW","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/GetComputerNameA.html","title":"GetComputerNameA","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/GetComputerNameA.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.GetComputerNameA","title":"GetComputerNameA","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/GetComputerNameW.html","title":"GetComputerNameW","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/GetComputerNameW.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.GetComputerNameW","title":"GetComputerNameW","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/GetConsoleWindow.html","title":"GetConsoleWindow","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/GetConsoleWindow.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.GetConsoleWindow","title":"GetConsoleWindow","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/GetCurrentDirectoryW.html","title":"GetCurrentDirectoryW","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/GetCurrentDirectoryW.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.GetCurrentDirectoryW","title":"GetCurrentDirectoryW","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/GetCurrentProcess.html","title":"GetCurrentProcess","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/GetCurrentProcess.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.GetCurrentProcess","title":"GetCurrentProcess","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/GetCurrentProcessId.html","title":"GetCurrentProcessId","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/GetCurrentProcessId.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.GetCurrentProcessId","title":"GetCurrentProcessId","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/GetCurrentThreadId.html","title":"GetCurrentThreadId","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/GetCurrentThreadId.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.GetCurrentThreadId","title":"GetCurrentThreadId","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/GetDriveTypeA.html","title":"GetDriveTypeA","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/GetDriveTypeA.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.GetDriveTypeA","title":"GetDriveTypeA","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/GetDriveTypeW.html","title":"GetDriveTypeW","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/GetDriveTypeW.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.GetDriveTypeW","title":"GetDriveTypeW","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/GetEnvironmentStrings.html","title":"GetEnvironmentStrings","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/GetEnvironmentStrings.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.GetEnvironmentStrings","title":"GetEnvironmentStrings","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/GetEnvironmentStringsW.html","title":"GetEnvironmentStringsW","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/GetEnvironmentStringsW.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.GetEnvironmentStringsW","title":"GetEnvironmentStringsW","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/GetEnvironmentVariableA.html","title":"GetEnvironmentVariableA","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/GetEnvironmentVariableA.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.GetEnvironmentVariableA","title":"GetEnvironmentVariableA","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/GetEnvironmentVariableA.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.GetEnvironmentVariableA.GetEnvironmentVariableA","title":"GetEnvironmentVariableA","text":"<p>               Bases: <code>SimProcedure</code></p> <p>https://docs.microsoft.com/en-us/windows/win32/api/processenv/nf-processenv-getenvironmentvariablea</p>"},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/GetEnvironmentVariableW.html","title":"GetEnvironmentVariableW","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/GetEnvironmentVariableW.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.GetEnvironmentVariableW","title":"GetEnvironmentVariableW","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/GetFileAttributesA.html","title":"GetFileAttributesA","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/GetFileAttributesA.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.GetFileAttributesA","title":"GetFileAttributesA","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/GetFileAttributesExW.html","title":"GetFileAttributesExW","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/GetFileAttributesExW.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.GetFileAttributesExW","title":"GetFileAttributesExW","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/GetFileInformationByHandle.html","title":"GetFileInformationByHandle","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/GetFileInformationByHandle.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.GetFileInformationByHandle","title":"GetFileInformationByHandle","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/GetFileSize.html","title":"GetFileSize","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/GetFileSize.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.GetFileSize","title":"GetFileSize","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/GetFileType.html","title":"GetFileType","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/GetFileType.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.GetFileType","title":"GetFileType","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/GetFileVersionInfoSizeW.html","title":"GetFileVersionInfoSizeW","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/GetFileVersionInfoSizeW.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.GetFileVersionInfoSizeW","title":"GetFileVersionInfoSizeW","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/GetFileVersionInfoW.html","title":"GetFileVersionInfoW","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/GetFileVersionInfoW.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.GetFileVersionInfoW","title":"GetFileVersionInfoW","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/GetFullPathNameW.html","title":"GetFullPathNameW","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/GetFullPathNameW.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.GetFullPathNameW","title":"GetFullPathNameW","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/GetIfTable.html","title":"GetIfTable","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/GetIfTable.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.GetIfTable","title":"GetIfTable","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/GetKeyboardType.html","title":"GetKeyboardType","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/GetKeyboardType.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.GetKeyboardType","title":"GetKeyboardType","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/GetLastError.html","title":"GetLastError","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/GetLastError.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.GetLastError","title":"GetLastError","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/GetLocaleInfoA.html","title":"GetLocaleInfoA","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/GetLocaleInfoA.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.GetLocaleInfoA","title":"GetLocaleInfoA","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/GetLocaleInfoW.html","title":"GetLocaleInfoW","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/GetLocaleInfoW.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.GetLocaleInfoW","title":"GetLocaleInfoW","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/GetLogicalDrives.html","title":"GetLogicalDrives","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/GetLogicalDrives.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.GetLogicalDrives","title":"GetLogicalDrives","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/GetLongPathNameW.html","title":"GetLongPathNameW","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/GetLongPathNameW.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.GetLongPathNameW","title":"GetLongPathNameW","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/GetMessageA.html","title":"GetMessageA","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/GetMessageA.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.GetMessageA","title":"GetMessageA","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/GetModuleFileNameA.html","title":"GetModuleFileNameA","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/GetModuleFileNameA.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.GetModuleFileNameA","title":"GetModuleFileNameA","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/GetModuleFileNameExA.html","title":"GetModuleFileNameExA","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/GetModuleFileNameExA.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.GetModuleFileNameExA","title":"GetModuleFileNameExA","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/GetModuleFileNameExW.html","title":"GetModuleFileNameExW","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/GetModuleFileNameExW.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.GetModuleFileNameExW","title":"GetModuleFileNameExW","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/GetModuleFileNameW.html","title":"GetModuleFileNameW","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/GetModuleFileNameW.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.GetModuleFileNameW","title":"GetModuleFileNameW","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/GetModuleHandleA.html","title":"GetModuleHandleA","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/GetModuleHandleA.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.GetModuleHandleA","title":"GetModuleHandleA","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/GetModuleHandleExA.html","title":"GetModuleHandleExA","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/GetModuleHandleExA.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.GetModuleHandleExA","title":"GetModuleHandleExA","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/GetModuleHandleExW.html","title":"GetModuleHandleExW","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/GetModuleHandleExW.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.GetModuleHandleExW","title":"GetModuleHandleExW","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/GetModuleHandleW.html","title":"GetModuleHandleW","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/GetModuleHandleW.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.GetModuleHandleW","title":"GetModuleHandleW","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/GetNativeSystemInfo.html","title":"GetNativeSystemInfo","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/GetNativeSystemInfo.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.GetNativeSystemInfo","title":"GetNativeSystemInfo","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/GetProcAddress.html","title":"GetProcAddress","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/GetProcAddress.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.GetProcAddress","title":"GetProcAddress","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/GetSecurityInfo.html","title":"GetSecurityInfo","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/GetSecurityInfo.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.GetSecurityInfo","title":"GetSecurityInfo","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/GetShortPathNameA.html","title":"GetShortPathNameA","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/GetShortPathNameA.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.GetShortPathNameA","title":"GetShortPathNameA","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/GetStartupInfoA.html","title":"GetStartupInfoA","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/GetStartupInfoA.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.GetStartupInfoA","title":"GetStartupInfoA","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/GetStringTypeA.html","title":"GetStringTypeA","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/GetStringTypeA.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.GetStringTypeA","title":"GetStringTypeA","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/GetStringTypeW.html","title":"GetStringTypeW","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/GetStringTypeW.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.GetStringTypeW","title":"GetStringTypeW","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/GetSystemDirectoryA.html","title":"GetSystemDirectoryA","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/GetSystemDirectoryA.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.GetSystemDirectoryA","title":"GetSystemDirectoryA","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/GetSystemDirectoryW.html","title":"GetSystemDirectoryW","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/GetSystemDirectoryW.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.GetSystemDirectoryW","title":"GetSystemDirectoryW","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/GetSystemInfo.html","title":"GetSystemInfo","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/GetSystemInfo.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.GetSystemInfo","title":"GetSystemInfo","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/GetSystemTimeAsFileTime.html","title":"GetSystemTimeAsFileTime","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/GetSystemTimeAsFileTime.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.GetSystemTimeAsFileTime","title":"GetSystemTimeAsFileTime","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/GetTempFileNameA.html","title":"GetTempFileNameA","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/GetTempFileNameA.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.GetTempFileNameA","title":"GetTempFileNameA","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/GetTempFileNameW.html","title":"GetTempFileNameW","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/GetTempFileNameW.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.GetTempFileNameW","title":"GetTempFileNameW","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/GetThreadContext.html","title":"GetThreadContext","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/GetThreadContext.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.GetThreadContext","title":"GetThreadContext","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/GetThreadLocaleW.html","title":"GetThreadLocaleW","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/GetThreadLocaleW.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.GetThreadLocaleW","title":"GetThreadLocaleW","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/GetThreadPriority.html","title":"GetThreadPriority","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/GetThreadPriority.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.GetThreadPriority","title":"GetThreadPriority","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/GetThreadUILanguage.html","title":"GetThreadUILanguage","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/GetThreadUILanguage.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.GetThreadUILanguage","title":"GetThreadUILanguage","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/GetTickCount.html","title":"GetTickCount","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/GetTickCount.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.GetTickCount","title":"GetTickCount","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/GetTickCount64.html","title":"GetTickCount64","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/GetTickCount64.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.GetTickCount64","title":"GetTickCount64","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/GetTokenInformation.html","title":"GetTokenInformation","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/GetTokenInformation.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.GetTokenInformation","title":"GetTokenInformation","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/GetUserDefaultLCID.html","title":"GetUserDefaultLCID","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/GetUserDefaultLCID.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.GetUserDefaultLCID","title":"GetUserDefaultLCID","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/GetUserDefaultUILanguage.html","title":"GetUserDefaultUILanguage","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/GetUserDefaultUILanguage.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.GetUserDefaultUILanguage","title":"GetUserDefaultUILanguage","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/GetUserNameA.html","title":"GetUserNameA","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/GetUserNameA.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.GetUserNameA","title":"GetUserNameA","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/GetUserNameW.html","title":"GetUserNameW","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/GetUserNameW.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.GetUserNameW","title":"GetUserNameW","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/GetVersion.html","title":"GetVersion","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/GetVersion.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.GetVersion","title":"GetVersion","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/GetVersionExA.html","title":"GetVersionExA","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/GetVersionExA.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.GetVersionExA","title":"GetVersionExA","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/GetWindowsDirectoryW.html","title":"GetWindowsDirectoryW","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/GetWindowsDirectoryW.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.GetWindowsDirectoryW","title":"GetWindowsDirectoryW","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/GlobalAddAtomA.html","title":"GlobalAddAtomA","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/GlobalAddAtomA.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.GlobalAddAtomA","title":"GlobalAddAtomA","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/Handler.html","title":"Handler","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/Handler.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.Handler","title":"Handler","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/HeapAlloc.html","title":"HeapAlloc","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/HeapAlloc.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.HeapAlloc","title":"HeapAlloc","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/HeapReAlloc.html","title":"HeapReAlloc","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/HeapReAlloc.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.HeapReAlloc","title":"HeapReAlloc","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/HeapSetInformation.html","title":"HeapSetInformation","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/HeapSetInformation.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.HeapSetInformation","title":"HeapSetInformation","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/HeapSize.html","title":"HeapSize","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/HeapSize.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.HeapSize","title":"HeapSize","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/HttpEndRequestA.html","title":"HttpEndRequestA","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/HttpEndRequestA.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.HttpEndRequestA","title":"HttpEndRequestA","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/HttpOpenRequestA.html","title":"HttpOpenRequestA","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/HttpOpenRequestA.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.HttpOpenRequestA","title":"HttpOpenRequestA","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/HttpOpenRequestW.html","title":"HttpOpenRequestW","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/HttpOpenRequestW.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.HttpOpenRequestW","title":"HttpOpenRequestW","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/HttpQueryInfoW.html","title":"HttpQueryInfoW","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/HttpQueryInfoW.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.HttpQueryInfoW","title":"HttpQueryInfoW","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/HttpSendRequestA.html","title":"HttpSendRequestA","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/HttpSendRequestA.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.HttpSendRequestA","title":"HttpSendRequestA","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/HttpSendRequestW.html","title":"HttpSendRequestW","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/HttpSendRequestW.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.HttpSendRequestW","title":"HttpSendRequestW","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/ImageList_AddMasked.html","title":"ImageList_AddMasked","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/ImageList_AddMasked.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.ImageList_AddMasked","title":"ImageList_AddMasked","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/InitCommonControls.html","title":"InitCommonControls","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/InitCommonControls.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.InitCommonControls","title":"InitCommonControls","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/InitCommonControlsEx.html","title":"InitCommonControlsEx","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/InitCommonControlsEx.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.InitCommonControlsEx","title":"InitCommonControlsEx","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/InitializeCriticalSection.html","title":"InitializeCriticalSection","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/InitializeCriticalSection.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.InitializeCriticalSection","title":"InitializeCriticalSection","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/InitializeCriticalSectionEx.html","title":"InitializeCriticalSectionEx","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/InitializeCriticalSectionEx.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.InitializeCriticalSectionEx","title":"InitializeCriticalSectionEx","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/InterlockedDecrement.html","title":"InterlockedDecrement","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/InterlockedDecrement.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.InterlockedDecrement","title":"InterlockedDecrement","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/InterlockedExchange.html","title":"InterlockedExchange","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/InterlockedExchange.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.InterlockedExchange","title":"InterlockedExchange","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/InterlockedIncrement.html","title":"InterlockedIncrement","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/InterlockedIncrement.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.InterlockedIncrement","title":"InterlockedIncrement","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/InternetCloseHandle.html","title":"InternetCloseHandle","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/InternetCloseHandle.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.InternetCloseHandle","title":"InternetCloseHandle","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/InternetConnectA.html","title":"InternetConnectA","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/InternetConnectA.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.InternetConnectA","title":"InternetConnectA","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/InternetConnectW.html","title":"InternetConnectW","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/InternetConnectW.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.InternetConnectW","title":"InternetConnectW","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/InternetOpenA.html","title":"InternetOpenA","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/InternetOpenA.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.InternetOpenA","title":"InternetOpenA","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/InternetOpenUrlA.html","title":"InternetOpenUrlA","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/InternetOpenUrlA.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.InternetOpenUrlA","title":"InternetOpenUrlA","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/InternetQueryOptionW.html","title":"InternetQueryOptionW","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/InternetQueryOptionW.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.InternetQueryOptionW","title":"InternetQueryOptionW","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/InternetReadFile.html","title":"InternetReadFile","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/InternetReadFile.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.InternetReadFile","title":"InternetReadFile","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/InternetSetOptionW.html","title":"InternetSetOptionW","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/InternetSetOptionW.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.InternetSetOptionW","title":"InternetSetOptionW","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/IsDebuggerPresent.html","title":"IsDebuggerPresent","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/IsDebuggerPresent.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.IsDebuggerPresent","title":"IsDebuggerPresent","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/IsValidLocale.html","title":"IsValidLocale","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/IsValidLocale.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.IsValidLocale","title":"IsValidLocale","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/IsWow64Process.html","title":"IsWow64Process","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/IsWow64Process.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.IsWow64Process","title":"IsWow64Process","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/KiUserExceptionDispatcher.html","title":"KiUserExceptionDispatcher","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/KiUserExceptionDispatcher.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.KiUserExceptionDispatcher","title":"KiUserExceptionDispatcher","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/LCMapStringA.html","title":"LCMapStringA","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/LCMapStringA.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.LCMapStringA","title":"LCMapStringA","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/LCMapStringW.html","title":"LCMapStringW","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/LCMapStringW.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.LCMapStringW","title":"LCMapStringW","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/LoadLibraryA.html","title":"LoadLibraryA","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/LoadLibraryA.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.LoadLibraryA","title":"LoadLibraryA","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/LoadLibraryExA.html","title":"LoadLibraryExA","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/LoadLibraryExA.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.LoadLibraryExA","title":"LoadLibraryExA","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/LoadLibraryExW.html","title":"LoadLibraryExW","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/LoadLibraryExW.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.LoadLibraryExW","title":"LoadLibraryExW","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/LoadLibraryW.html","title":"LoadLibraryW","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/LoadLibraryW.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.LoadLibraryW","title":"LoadLibraryW","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/LoadResource.html","title":"LoadResource","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/LoadResource.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.LoadResource","title":"LoadResource","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/LoadStringA.html","title":"LoadStringA","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/LoadStringA.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.LoadStringA","title":"LoadStringA","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/LoadStringW.html","title":"LoadStringW","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/LoadStringW.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.LoadStringW","title":"LoadStringW","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/LockResource.html","title":"LockResource","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/LockResource.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.LockResource","title":"LockResource","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/LookupPrivilegeValueA.html","title":"LookupPrivilegeValueA","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/LookupPrivilegeValueA.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.LookupPrivilegeValueA","title":"LookupPrivilegeValueA","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/MapViewOfFile.html","title":"MapViewOfFile","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/MapViewOfFile.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.MapViewOfFile","title":"MapViewOfFile","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/MapViewOfFile.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.MapViewOfFile.convert_prot","title":"convert_prot","text":"<pre><code>convert_prot(prot)\n</code></pre> <p>Convert from a windows memory protection constant to an angr bitmask</p> Source code in <code>sema_toolchain/sema_scdg/application/procedures/windows/custom_package/MapViewOfFile.py</code> <pre><code>def convert_prot(prot):\n    \"\"\"\n    Convert from a windows memory protection constant to an angr bitmask\n    \"\"\"\n    # https://msdn.microsoft.com/en-us/library/windows/desktop/aa366786(v=vs.85).aspx\n    if prot &amp; 0x10:\n        return 4\n    if prot &amp; 0x20:\n        return 5\n    if prot &amp; 0x40:\n        return 7\n    if prot &amp; 0x80:\n        return 7\n    if prot &amp; 0x01:\n        return 0\n    if prot &amp; 0x02:\n        return 1\n    if prot &amp; 0x04:\n        return 3\n    if prot &amp; 0x08:\n        return 3\n    raise angr.errors.SimValueError(\"Unknown windows memory protection constant: %#x\" % prot)\n</code></pre>"},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/MapViewOfFile.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.MapViewOfFile.deconvert_prot","title":"deconvert_prot","text":"<pre><code>deconvert_prot(prot)\n</code></pre> <p>Convert from a angr bitmask to a windows memory protection constant</p> Source code in <code>sema_toolchain/sema_scdg/application/procedures/windows/custom_package/MapViewOfFile.py</code> <pre><code>def deconvert_prot(prot):\n    \"\"\"\n    Convert from a angr bitmask to a windows memory protection constant\n    \"\"\"\n    if prot in (2, 6):\n        raise angr.errors.SimValueError(\"Invalid memory protection for windows process\")\n    return [0x01, 0x02, None, 0x04, 0x10, 0x20, None, 0x40][prot]\n</code></pre>"},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/MoveFileExW.html","title":"MoveFileExW","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/MoveFileExW.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.MoveFileExW","title":"MoveFileExW","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/MultiByteToWideChar.html","title":"MultiByteToWideChar","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/MultiByteToWideChar.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.MultiByteToWideChar","title":"MultiByteToWideChar","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/Netbios.html","title":"Netbios","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/Netbios.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.Netbios","title":"Netbios","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/NtGetContextThread.html","title":"NtGetContextThread","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/NtGetContextThread.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.NtGetContextThread","title":"NtGetContextThread","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/NtQueryInformationProcess.html","title":"NtQueryInformationProcess","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/NtQueryInformationProcess.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.NtQueryInformationProcess","title":"NtQueryInformationProcess","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/NtQuerySystemInformation.html","title":"NtQuerySystemInformation","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/NtQuerySystemInformation.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.NtQuerySystemInformation","title":"NtQuerySystemInformation","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/NtReadVirtualMemory.html","title":"NtReadVirtualMemory","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/NtReadVirtualMemory.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.NtReadVirtualMemory","title":"NtReadVirtualMemory","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/NtResumeThread.html","title":"NtResumeThread","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/NtResumeThread.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.NtResumeThread","title":"NtResumeThread","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/NtSetContextThread.html","title":"NtSetContextThread","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/NtSetContextThread.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.NtSetContextThread","title":"NtSetContextThread","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/NtTerminateProcess.html","title":"NtTerminateProcess","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/NtTerminateProcess.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.NtTerminateProcess","title":"NtTerminateProcess","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/NtUnmapViewOfSection.html","title":"NtUnmapViewOfSection","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/NtUnmapViewOfSection.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.NtUnmapViewOfSection","title":"NtUnmapViewOfSection","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/NtWriteVirtualMemory.html","title":"NtWriteVirtualMemory","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/NtWriteVirtualMemory.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.NtWriteVirtualMemory","title":"NtWriteVirtualMemory","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/OleInitialize.html","title":"OleInitialize","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/OleInitialize.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.OleInitialize","title":"OleInitialize","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/OpenProcess.html","title":"OpenProcess","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/OpenProcess.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.OpenProcess","title":"OpenProcess","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/OpenProcessToken.html","title":"OpenProcessToken","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/OpenProcessToken.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.OpenProcessToken","title":"OpenProcessToken","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/OpenSCManagerA.html","title":"OpenSCManagerA","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/OpenSCManagerA.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.OpenSCManagerA","title":"OpenSCManagerA","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/OpenServiceA.html","title":"OpenServiceA","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/OpenServiceA.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.OpenServiceA","title":"OpenServiceA","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/OutputDebugStringW.html","title":"OutputDebugStringW","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/OutputDebugStringW.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.OutputDebugStringW","title":"OutputDebugStringW","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/PathFileExistsA.html","title":"PathFileExistsA","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/PathFileExistsA.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.PathFileExistsA","title":"PathFileExistsA","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/Process32First.html","title":"Process32First","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/Process32First.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.Process32First","title":"Process32First","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/Process32FirstW.html","title":"Process32FirstW","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/Process32FirstW.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.Process32FirstW","title":"Process32FirstW","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/Process32Next.html","title":"Process32Next","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/Process32Next.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.Process32Next","title":"Process32Next","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/Process32NextW.html","title":"Process32NextW","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/Process32NextW.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.Process32NextW","title":"Process32NextW","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/QueryPerformanceCounter.html","title":"QueryPerformanceCounter","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/QueryPerformanceCounter.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.QueryPerformanceCounter","title":"QueryPerformanceCounter","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/QueryPerformanceFrequency.html","title":"QueryPerformanceFrequency","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/QueryPerformanceFrequency.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.QueryPerformanceFrequency","title":"QueryPerformanceFrequency","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/RaiseException.html","title":"RaiseException","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/RaiseException.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.RaiseException","title":"RaiseException","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/ReadFile.html","title":"ReadFile","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/ReadFile.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.ReadFile","title":"ReadFile","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/RegCloseKey.html","title":"RegCloseKey","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/RegCloseKey.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.RegCloseKey","title":"RegCloseKey","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/RegCreateKeyExA.html","title":"RegCreateKeyExA","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/RegCreateKeyExA.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.RegCreateKeyExA","title":"RegCreateKeyExA","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/RegCreateKeyExW.html","title":"RegCreateKeyExW","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/RegCreateKeyExW.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.RegCreateKeyExW","title":"RegCreateKeyExW","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/RegOpenKeyExA.html","title":"RegOpenKeyExA","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/RegOpenKeyExA.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.RegOpenKeyExA","title":"RegOpenKeyExA","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/RegOpenKeyExW.html","title":"RegOpenKeyExW","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/RegOpenKeyExW.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.RegOpenKeyExW","title":"RegOpenKeyExW","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/RegQueryValueExA.html","title":"RegQueryValueExA","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/RegQueryValueExA.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.RegQueryValueExA","title":"RegQueryValueExA","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/RegQueryValueExW.html","title":"RegQueryValueExW","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/RegQueryValueExW.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.RegQueryValueExW","title":"RegQueryValueExW","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/RegSetKeyValueW.html","title":"RegSetKeyValueW","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/RegSetKeyValueW.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.RegSetKeyValueW","title":"RegSetKeyValueW","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/RegSetValueExA.html","title":"RegSetValueExA","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/RegSetValueExA.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.RegSetValueExA","title":"RegSetValueExA","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/RegSetValueExW.html","title":"RegSetValueExW","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/RegSetValueExW.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.RegSetValueExW","title":"RegSetValueExW","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/RegisterClassA.html","title":"RegisterClassA","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/RegisterClassA.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.RegisterClassA","title":"RegisterClassA","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/RegisterClassExA.html","title":"RegisterClassExA","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/RegisterClassExA.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.RegisterClassExA","title":"RegisterClassExA","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/RegisterClassW.html","title":"RegisterClassW","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/RegisterClassW.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.RegisterClassW","title":"RegisterClassW","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/ReleaseSemaphore.html","title":"ReleaseSemaphore","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/ReleaseSemaphore.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.ReleaseSemaphore","title":"ReleaseSemaphore","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/ResumeThread.html","title":"ResumeThread","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/ResumeThread.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.ResumeThread","title":"ResumeThread","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/RtlAddFunctionTable.html","title":"RtlAddFunctionTable","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/RtlAddFunctionTable.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.RtlAddFunctionTable","title":"RtlAddFunctionTable","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/RtlCompareUnicodeString.html","title":"RtlCompareUnicodeString","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/RtlCompareUnicodeString.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.RtlCompareUnicodeString","title":"RtlCompareUnicodeString","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/RtlGetNtVersionNumbers.html","title":"RtlGetNtVersionNumbers","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/RtlGetNtVersionNumbers.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.RtlGetNtVersionNumbers","title":"RtlGetNtVersionNumbers","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/RtlGetVersion.html","title":"RtlGetVersion","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/RtlGetVersion.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.RtlGetVersion","title":"RtlGetVersion","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/RtlMoveMemory.html","title":"RtlMoveMemory","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/RtlMoveMemory.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.RtlMoveMemory","title":"RtlMoveMemory","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/SHBrowseForFolder.html","title":"SHBrowseForFolder","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/SHBrowseForFolder.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.SHBrowseForFolder","title":"SHBrowseForFolder","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/SHGetFolderPathW.html","title":"SHGetFolderPathW","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/SHGetFolderPathW.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.SHGetFolderPathW","title":"SHGetFolderPathW","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/SHGetPathFromIDList.html","title":"SHGetPathFromIDList","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/SHGetPathFromIDList.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.SHGetPathFromIDList","title":"SHGetPathFromIDList","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/SHGetSpecialFolderPathA.html","title":"SHGetSpecialFolderPathA","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/SHGetSpecialFolderPathA.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.SHGetSpecialFolderPathA","title":"SHGetSpecialFolderPathA","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/SHGetSpecialFolderPathW.html","title":"SHGetSpecialFolderPathW","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/SHGetSpecialFolderPathW.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.SHGetSpecialFolderPathW","title":"SHGetSpecialFolderPathW","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/SetEndOfFile.html","title":"SetEndOfFile","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/SetEndOfFile.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.SetEndOfFile","title":"SetEndOfFile","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/SetErrorMode.html","title":"SetErrorMode","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/SetErrorMode.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.SetErrorMode","title":"SetErrorMode","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/SetEvent.html","title":"SetEvent","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/SetEvent.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.SetEvent","title":"SetEvent","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/SetFilePointer.html","title":"SetFilePointer","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/SetFilePointer.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.SetFilePointer","title":"SetFilePointer","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/SetFilePointerEx.html","title":"SetFilePointerEx","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/SetFilePointerEx.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.SetFilePointerEx","title":"SetFilePointerEx","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/SetLastError.html","title":"SetLastError","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/SetLastError.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.SetLastError","title":"SetLastError","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/SetLocaleInfoW.html","title":"SetLocaleInfoW","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/SetLocaleInfoW.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.SetLocaleInfoW","title":"SetLocaleInfoW","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/SetSecurityInfo.html","title":"SetSecurityInfo","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/SetSecurityInfo.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.SetSecurityInfo","title":"SetSecurityInfo","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/SetThreadLocale.html","title":"SetThreadLocale","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/SetThreadLocale.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.SetThreadLocale","title":"SetThreadLocale","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/SetThreadPriority.html","title":"SetThreadPriority","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/SetThreadPriority.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.SetThreadPriority","title":"SetThreadPriority","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/SetUnhandledExceptionFilter.html","title":"SetUnhandledExceptionFilter","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/SetUnhandledExceptionFilter.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.SetUnhandledExceptionFilter","title":"SetUnhandledExceptionFilter","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/ShellExecuteExW.html","title":"ShellExecuteExW","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/ShellExecuteExW.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.ShellExecuteExW","title":"ShellExecuteExW","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/ShellExecuteW.html","title":"ShellExecuteW","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/ShellExecuteW.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.ShellExecuteW","title":"ShellExecuteW","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/ShellMessageBoxA.html","title":"ShellMessageBoxA","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/ShellMessageBoxA.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.ShellMessageBoxA","title":"ShellMessageBoxA","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/ShellMessageBoxW.html","title":"ShellMessageBoxW","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/ShellMessageBoxW.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.ShellMessageBoxW","title":"ShellMessageBoxW","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/SizeofResource.html","title":"SizeofResource","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/SizeofResource.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.SizeofResource","title":"SizeofResource","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/StartServiceA.html","title":"StartServiceA","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/StartServiceA.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.StartServiceA","title":"StartServiceA","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/StartServiceCtrlDispatcherA.html","title":"StartServiceCtrlDispatcherA","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/StartServiceCtrlDispatcherA.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.StartServiceCtrlDispatcherA","title":"StartServiceCtrlDispatcherA","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/SysAllocString.html","title":"SysAllocString","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/SysAllocString.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.SysAllocString","title":"SysAllocString","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/SysAllocStringLen.html","title":"SysAllocStringLen","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/SysAllocStringLen.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.SysAllocStringLen","title":"SysAllocStringLen","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/SysFreeString.html","title":"SysFreeString","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/SysFreeString.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.SysFreeString","title":"SysFreeString","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/TerminateProcess.html","title":"TerminateProcess","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/TerminateProcess.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.TerminateProcess","title":"TerminateProcess","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/ThunRTMain.html","title":"ThunRTMain","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/ThunRTMain.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.ThunRTMain","title":"ThunRTMain","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/TlsAlloc.html","title":"TlsAlloc","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/TlsAlloc.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.TlsAlloc","title":"TlsAlloc","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/TlsFree.html","title":"TlsFree","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/TlsFree.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.TlsFree","title":"TlsFree","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/TlsGetValue.html","title":"TlsGetValue","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/TlsGetValue.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.TlsGetValue","title":"TlsGetValue","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/TlsSetValue.html","title":"TlsSetValue","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/TlsSetValue.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.TlsSetValue","title":"TlsSetValue","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/URLDownloadToFileA.html","title":"URLDownloadToFileA","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/URLDownloadToFileA.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.URLDownloadToFileA","title":"URLDownloadToFileA","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/URLDownloadToFileW.html","title":"URLDownloadToFileW","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/URLDownloadToFileW.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.URLDownloadToFileW","title":"URLDownloadToFileW","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/VarBoolFromStr.html","title":"VarBoolFromStr","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/VarBoolFromStr.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.VarBoolFromStr","title":"VarBoolFromStr","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/VarBstrFromBool.html","title":"VarBstrFromBool","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/VarBstrFromBool.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.VarBstrFromBool","title":"VarBstrFromBool","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/VarBstrFromCy.html","title":"VarBstrFromCy","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/VarBstrFromCy.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.VarBstrFromCy","title":"VarBstrFromCy","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/VarBstrFromDate.html","title":"VarBstrFromDate","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/VarBstrFromDate.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.VarBstrFromDate","title":"VarBstrFromDate","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/VerQueryValueW.html","title":"VerQueryValueW","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/VerQueryValueW.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.VerQueryValueW","title":"VerQueryValueW","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/VirtualAlloc.html","title":"VirtualAlloc","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/VirtualAlloc.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.VirtualAlloc","title":"VirtualAlloc","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/VirtualAlloc.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.VirtualAlloc.convert_prot","title":"convert_prot","text":"<pre><code>convert_prot(prot)\n</code></pre> <p>Convert from a windows memory protection constant to an angr bitmask</p> Source code in <code>sema_toolchain/sema_scdg/application/procedures/windows/custom_package/VirtualAlloc.py</code> <pre><code>def convert_prot(prot):\n    \"\"\"\n    Convert from a windows memory protection constant to an angr bitmask\n    \"\"\"\n    # https://msdn.microsoft.com/en-us/library/windows/desktop/aa366786(v=vs.85).aspx\n    if prot &amp; 0x10:\n        return 4\n    if prot &amp; 0x20:\n        return 5\n    if prot &amp; 0x40:\n        return 7\n    if prot &amp; 0x80:\n        return 7\n    if prot &amp; 0x01:\n        return 0\n    if prot &amp; 0x02:\n        return 1\n    if prot &amp; 0x04:\n        return 3\n    if prot &amp; 0x08:\n        return 3\n    raise angr.errors.SimValueError(\"Unknown windows memory protection constant: %#x\" % prot)\n</code></pre>"},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/VirtualAlloc.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.VirtualAlloc.deconvert_prot","title":"deconvert_prot","text":"<pre><code>deconvert_prot(prot)\n</code></pre> <p>Convert from a angr bitmask to a windows memory protection constant</p> Source code in <code>sema_toolchain/sema_scdg/application/procedures/windows/custom_package/VirtualAlloc.py</code> <pre><code>def deconvert_prot(prot):\n    \"\"\"\n    Convert from a angr bitmask to a windows memory protection constant\n    \"\"\"\n    if prot in (2, 6):\n        raise angr.errors.SimValueError(\"Invalid memory protection for windows process\")\n    return [0x01, 0x02, None, 0x04, 0x10, 0x20, None, 0x40][prot]\n</code></pre>"},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/VirtualAllocEx.html","title":"VirtualAllocEx","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/VirtualAllocEx.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.VirtualAllocEx","title":"VirtualAllocEx","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/VirtualAllocEx.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.VirtualAllocEx.deconvert_prot","title":"deconvert_prot","text":"<pre><code>deconvert_prot(prot)\n</code></pre> <p>Convert from a angr bitmask to a windows memory protection constant</p> Source code in <code>sema_toolchain/sema_scdg/application/procedures/windows/custom_package/VirtualAllocEx.py</code> <pre><code>def deconvert_prot(prot):\n    \"\"\"\n    Convert from a angr bitmask to a windows memory protection constant\n    \"\"\"\n    if prot in (2, 6):\n        raise angr.errors.SimValueError(\"Invalid memory protection for windows process\")\n    return [0x01, 0x02, None, 0x04, 0x10, 0x20, None, 0x40][prot]\n</code></pre>"},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/VirtualFree.html","title":"VirtualFree","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/VirtualFree.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.VirtualFree","title":"VirtualFree","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/VirtualProtect.html","title":"VirtualProtect","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/VirtualProtect.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.VirtualProtect","title":"VirtualProtect","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/VirtualQuery.html","title":"VirtualQuery","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/VirtualQuery.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.VirtualQuery","title":"VirtualQuery","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/WNetGetConnectionA.html","title":"WNetGetConnectionA","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/WNetGetConnectionA.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.WNetGetConnectionA","title":"WNetGetConnectionA","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/WNetGetConnectionW.html","title":"WNetGetConnectionW","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/WNetGetConnectionW.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.WNetGetConnectionW","title":"WNetGetConnectionW","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/WSAConnect.html","title":"WSAConnect","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/WSAConnect.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.WSAConnect","title":"WSAConnect","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/WaitForMultipleObjects.html","title":"WaitForMultipleObjects","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/WaitForMultipleObjects.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.WaitForMultipleObjects","title":"WaitForMultipleObjects","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/WaitForSingleObject.html","title":"WaitForSingleObject","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/WaitForSingleObject.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.WaitForSingleObject","title":"WaitForSingleObject","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/WaitForSingleObjectEx.html","title":"WaitForSingleObjectEx","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/WaitForSingleObjectEx.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.WaitForSingleObjectEx","title":"WaitForSingleObjectEx","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/WideCharToMultiByte.html","title":"WideCharToMultiByte","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/WideCharToMultiByte.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.WideCharToMultiByte","title":"WideCharToMultiByte","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/WinExec.html","title":"WinExec","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/WinExec.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.WinExec","title":"WinExec","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/WinHttpAddRequestHeaders.html","title":"WinHttpAddRequestHeaders","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/WinHttpAddRequestHeaders.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.WinHttpAddRequestHeaders","title":"WinHttpAddRequestHeaders","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/WriteFile.html","title":"WriteFile","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/WriteFile.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.WriteFile","title":"WriteFile","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/WritePrivateProfileStringA.html","title":"WritePrivateProfileStringA","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/WritePrivateProfileStringA.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.WritePrivateProfileStringA","title":"WritePrivateProfileStringA","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/WriteProcessMemory.html","title":"WriteProcessMemory","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/WriteProcessMemory.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.WriteProcessMemory","title":"WriteProcessMemory","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/__getmainargs.html","title":"__getmainargs","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/__getmainargs.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.__getmainargs","title":"__getmainargs","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/__iob_func.html","title":"__iob_func","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/__iob_func.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.__iob_func","title":"__iob_func","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/__set_app_type.html","title":"__set_app_type","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/__set_app_type.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.__set_app_type","title":"__set_app_type","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/_endthreadex.html","title":"_endthreadex","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/_endthreadex.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package._endthreadex","title":"_endthreadex","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/_get_output_format.html","title":"_get_output_format","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/_get_output_format.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package._get_output_format","title":"_get_output_format","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/_getenv_s.html","title":"_getenv_s","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/_getenv_s.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package._getenv_s","title":"_getenv_s","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/_initterm.html","title":"_initterm","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/_initterm.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package._initterm","title":"_initterm","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/_ismbblead.html","title":"_ismbblead","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/_ismbblead.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package._ismbblead","title":"_ismbblead","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/_strdup.html","title":"_strdup","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/_strdup.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package._strdup","title":"_strdup","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/_waccess.html","title":"_waccess","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/_waccess.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package._waccess","title":"_waccess","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/_wchmod.html","title":"_wchmod","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/_wchmod.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package._wchmod","title":"_wchmod","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/_wgetenv_s.html","title":"_wgetenv_s","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/_wgetenv_s.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package._wgetenv_s","title":"_wgetenv_s","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/atoi.html","title":"atoi","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/atoi.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.atoi","title":"atoi","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/free.html","title":"free","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/free.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.free","title":"free","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/ftell.html","title":"ftell","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/ftell.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.ftell","title":"ftell","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/getaddrinfo.html","title":"getaddrinfo","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/getaddrinfo.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.getaddrinfo","title":"getaddrinfo","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/getenv.html","title":"getenv","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/getenv.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.getenv","title":"getenv","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/getenv.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.getenv.getenv","title":"getenv","text":"<p>               Bases: <code>SimProcedure</code></p> <p>https://docs.microsoft.com/en-us/windows/win32/api/processenv/nf-processenv-getenvironmentvariablea</p>"},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/gethostbyname.html","title":"gethostbyname","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/gethostbyname.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.gethostbyname","title":"gethostbyname","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/getsockname.html","title":"getsockname","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/getsockname.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.getsockname","title":"getsockname","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/htonl.html","title":"htonl","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/htonl.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.htonl","title":"htonl","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/htons.html","title":"htons","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/htons.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.htons","title":"htons","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/inet_addr.html","title":"inet_addr","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/inet_addr.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.inet_addr","title":"inet_addr","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/inet_ntoa.html","title":"inet_ntoa","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/inet_ntoa.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.inet_ntoa","title":"inet_ntoa","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/lstrcatA.html","title":"lstrcatA","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/lstrcatA.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.lstrcatA","title":"lstrcatA","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/lstrcatW.html","title":"lstrcatW","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/lstrcatW.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.lstrcatW","title":"lstrcatW","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/lstrcmpA.html","title":"lstrcmpA","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/lstrcmpA.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.lstrcmpA","title":"lstrcmpA","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/lstrcmpW.html","title":"lstrcmpW","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/lstrcmpW.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.lstrcmpW","title":"lstrcmpW","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/lstrcpyA.html","title":"lstrcpyA","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/lstrcpyA.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.lstrcpyA","title":"lstrcpyA","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/lstrcpyW.html","title":"lstrcpyW","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/lstrcpyW.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.lstrcpyW","title":"lstrcpyW","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/lstrcpynA.html","title":"lstrcpynA","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/lstrcpynA.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.lstrcpynA","title":"lstrcpynA","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/lstrcpynW.html","title":"lstrcpynW","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/lstrcpynW.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.lstrcpynW","title":"lstrcpynW","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/lstrlenA.html","title":"lstrlenA","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/lstrlenA.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.lstrlenA","title":"lstrlenA","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/lstrlenW.html","title":"lstrlenW","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/lstrlenW.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.lstrlenW","title":"lstrlenW","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/malloc.html","title":"malloc","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/malloc.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.malloc","title":"malloc","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/memcmp.html","title":"memcmp","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/memcmp.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.memcmp","title":"memcmp","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/memcpy.html","title":"memcpy","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/memcpy.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.memcpy","title":"memcpy","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/memmove.html","title":"memmove","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/memmove.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.memmove","title":"memmove","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/memset.html","title":"memset","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/memset.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.memset","title":"memset","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/memset.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.memset.memset","title":"memset","text":"<p>               Bases: <code>SimProcedure</code></p>"},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/ntohs.html","title":"ntohs","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/ntohs.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.ntohs","title":"ntohs","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/rand.html","title":"rand","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/rand.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.rand","title":"rand","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/realloc.html","title":"realloc","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/realloc.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.realloc","title":"realloc","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/recv.html","title":"recv","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/recv.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.recv","title":"recv","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/recvcc.html","title":"recvcc","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/recvcc.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.recvcc","title":"recvcc","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/select.html","title":"select","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/select.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.select","title":"select","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/send.html","title":"send","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/send.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.send","title":"send","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/sendcc.html","title":"sendcc","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/sendcc.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.sendcc","title":"sendcc","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/setsockopt.html","title":"setsockopt","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/setsockopt.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.setsockopt","title":"setsockopt","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/socket.html","title":"socket","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/socket.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.socket","title":"socket","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/sprintf.html","title":"sprintf","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/sprintf.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.sprintf","title":"sprintf","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/srand.html","title":"srand","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/srand.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.srand","title":"srand","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/strcat.html","title":"strcat","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/strcat.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.strcat","title":"strcat","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/strchr.html","title":"strchr","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/strchr.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.strchr","title":"strchr","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/strncmp.html","title":"strncmp","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/strncmp.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.strncmp","title":"strncmp","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/strrchr.html","title":"strrchr","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/strrchr.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.strrchr","title":"strrchr","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/strstr.html","title":"strstr","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/strstr.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.strstr","title":"strstr","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/test.html","title":"test","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/test.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.test","title":"test","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/wcslen.html","title":"wcslen","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/wcslen.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.wcslen","title":"wcslen","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/wsprintfA.html","title":"wsprintfA","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/wsprintfA.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.wsprintfA","title":"wsprintfA","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/wsprintfW.html","title":"wsprintfW","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/procedures/windows/custom_package/wsprintfW.html#sema_toolchain.sema_scdg.application.procedures.windows.custom_package.wsprintfW","title":"wsprintfW","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/sandboxes/index.html","title":"Index","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/sandboxes/index.html#sema_toolchain.sema_scdg.application.sandboxes","title":"sandboxes","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/sandboxes/CuckooInterface.html","title":"CuckooInterface","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/sandboxes/CuckooInterface.html#sema_toolchain.sema_scdg.application.sandboxes.CuckooInterface","title":"CuckooInterface","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/sandboxes/CuckooInterface.html#sema_toolchain.sema_scdg.application.sandboxes.CuckooInterface.CuckooInterface","title":"CuckooInterface","text":"<pre><code>CuckooInterface(name: str, ossys='linux', guestos='windows', create_vm=True)\n</code></pre> <p>               Bases: <code>SandBoxInterface</code></p> <p>sources: inspired from https://github.com/keithjjones/cuckoo-api/blob/master/CuckooAPI/__init__.py</p> Source code in <code>sema_toolchain/sema_scdg/application/sandboxes/CuckooInterface.py</code> <pre><code>def __init__(self, name:str, ossys=\"linux\", guestos=\"windows\", create_vm=True):\n    self.vm = None\n    self.name = name\n    self.guestos = guestos\n    self.guest_ip = \"\"\n    self.gdb_port = 0\n    self.home_dir = \"\"\n    self.win_name = \"\"\n    self.init_vm(name, ossys, guestos, create_vm)\n</code></pre>"},{"location":"reference/sema_toolchain/sema_scdg/application/sandboxes/SandBoxInterface.html","title":"SandBoxInterface","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/sandboxes/SandBoxInterface.html#sema_toolchain.sema_scdg.application.sandboxes.SandBoxInterface","title":"SandBoxInterface","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/sandboxes/main.html","title":"main","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/sandboxes/main.html#sema_toolchain.sema_scdg.application.sandboxes.main","title":"main","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/sandboxes/main.html#sema_toolchain.sema_scdg.application.sandboxes.main.main","title":"main","text":"<pre><code>main() -&gt; int\n</code></pre> <p>Echo the input arguments to standard output</p> Source code in <code>sema_toolchain/sema_scdg/application/sandboxes/main.py</code> <pre><code>def main() -&gt; int:\n    \"\"\"Echo the input arguments to standard output\"\"\"\n    # python3 main.py win7 /home/crochetch/Documents/toolchain_malware_analysis/src/res/malware-inputs/Sample_paper/lamer/00b6b682fe26b3b0dac16f60869dd753\n    # python3 main.py cuckoo_ubuntu18.04 /home/crochetch/Documents/toolchain_malware_analysis/src/res/malware-inputs/Sample_paper/lamer/00b6b682fe26b3b0dac16f60869dd753\n    filename = sys.argv[1]\n    analysis = sys.argv[2]\n    cuckoo = CuckooInterface(name=filename, ossys=\"linux\", guestos=\"linux\", create_vm=False)\n    cuckoo.start_sandbox()\n    cuckoo.load_analysis(analysis)\n    #cuckoo.start_analysis()\n    #cuckoo.stop_sandbox()\n\n    return 0\n</code></pre>"},{"location":"reference/sema_toolchain/sema_scdg/application/sandboxes/vm/index.html","title":"Index","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/sandboxes/vm/index.html#sema_toolchain.sema_scdg.application.sandboxes.vm","title":"vm","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/sandboxes/vm/VMInterface.html","title":"VMInterface","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/sandboxes/vm/VMInterface.html#sema_toolchain.sema_scdg.application.sandboxes.vm.VMInterface","title":"VMInterface","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/sandboxes/vm/kvm/index.html","title":"Index","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/sandboxes/vm/kvm/index.html#sema_toolchain.sema_scdg.application.sandboxes.vm.kvm","title":"kvm","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/sandboxes/vm/kvm/KVMInterface.html","title":"KVMInterface","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/sandboxes/vm/kvm/KVMInterface.html#sema_toolchain.sema_scdg.application.sandboxes.vm.kvm.KVMInterface","title":"KVMInterface","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/sandboxes/vm/kvm/main.html","title":"main","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/sandboxes/vm/kvm/main.html#sema_toolchain.sema_scdg.application.sandboxes.vm.kvm.main","title":"main","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/sandboxes/vm/kvm/main.html#sema_toolchain.sema_scdg.application.sandboxes.vm.kvm.main.main","title":"main","text":"<pre><code>main() -&gt; int\n</code></pre> <p>Echo the input arguments to standard output</p> Source code in <code>sema_toolchain/sema_scdg/application/sandboxes/vm/kvm/main.py</code> <pre><code>def main() -&gt; int:\n    \"\"\"Echo the input arguments to standard output\"\"\"\n    # python3 main.py win7\n    filename = sys.argv[1]\n    kvm = KVMInterface(filename, filename+\"_file\", config_vol=\"config/vol.xml\", config_pool=\"config/pool.xml\",\n                       config=\"config/win7.xml\", create_vm=False, image=\"/var/lib/libvirt/images/en_windows_7_ultimate_x64_dvd.iso\")\n    kvm.start_vm()\n    time.sleep(10)\n    kvm.stop_vm()\n    return 0\n</code></pre>"},{"location":"reference/sema_toolchain/sema_scdg/application/sandboxes/vm/virtualbox/index.html","title":"Index","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/sandboxes/vm/virtualbox/index.html#sema_toolchain.sema_scdg.application.sandboxes.vm.virtualbox","title":"virtualbox","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/sandboxes/vm/virtualbox/VirtualBoxInterface.html","title":"VirtualBoxInterface","text":""},{"location":"reference/sema_toolchain/sema_scdg/application/sandboxes/vm/virtualbox/VirtualBoxInterface.html#sema_toolchain.sema_scdg.application.sandboxes.vm.virtualbox.VirtualBoxInterface","title":"VirtualBoxInterface","text":""},{"location":"reference/sema_toolchain/sema_web_app/index.html","title":"Index","text":""},{"location":"reference/sema_toolchain/sema_web_app/index.html#sema_toolchain.sema_web_app","title":"sema_web_app","text":""},{"location":"reference/sema_toolchain/sema_web_app/application/index.html","title":"Index","text":""},{"location":"reference/sema_toolchain/sema_web_app/application/index.html#sema_toolchain.sema_web_app.application","title":"application","text":""},{"location":"reference/sema_toolchain/sema_web_app/application/SemaServer.html","title":"SemaServer","text":""},{"location":"reference/sema_toolchain/sema_web_app/application/SemaServer.html#sema_toolchain.sema_web_app.application.SemaServer","title":"SemaServer","text":""},{"location":"reference/sema_toolchain/sema_web_app/application/SemaServer.html#sema_toolchain.sema_web_app.application.SemaServer.SemaServer","title":"SemaServer","text":"<pre><code>SemaServer()\n</code></pre> Source code in <code>sema_toolchain/sema_web_app/application/SemaServer.py</code> <pre><code>def __init__(self):\n    self.log = SemaServer.app.logger\n\n    # List that contains a dictionary containing all the arguments, it is then used\n    # to generate dynamically the UI\n    # Each element of the list is a HTML row that contains as element the associated dictionary\n\n    # Init actions_scdg with current arguments available in ArgParser\n    SemaServer.actions_scdg = self.init_scdg_args()\n    self.log.info(\"SCDG arguments retreived\")\n\n    # Init actions_classifier with current arguments available in ArgParser\n    SemaServer.actions_classifier = self.init_classifier_args()\n    self.log.info(\"Classifier arguments retreived\")\n\n    SemaServer.exps = []\n    SemaServer.download_thread = None\n    SemaServer.malware_to_download = 0\n    SemaServer.malware_to_downloaded = 0\n    SemaServer.sema_res_dir = \"database/runs/\" # TODO dynamic\n    SemaServer.current_exp = 0\n</code></pre>"},{"location":"reference/sema_toolchain/sema_web_app/application/SemaServer.html#sema_toolchain.sema_web_app.application.SemaServer.SemaServer.add_header","title":"add_header","text":"<pre><code>add_header(r)\n</code></pre> <p>It sets the cache control headers to prevent caching</p> <p>:param r: The response object :return: the response object with the headers added.</p> Source code in <code>sema_toolchain/sema_web_app/application/SemaServer.py</code> <pre><code>@app.after_request\ndef add_header(r):\n    \"\"\"\n    It sets the cache control headers to prevent caching\n\n    :param r: The response object\n    :return: the response object with the headers added.\n    \"\"\"\n    r.headers[\"Cache-Control\"] =  \"no-cache, no-store, must-revalidate\"\n    r.headers[\"Pragma\"] = \"no-cache\"\n    r.headers[\"Expires\"] = \"0\"\n    r.headers['Cache-Control'] = 'public, max-age=0'\n    r.headers.add(\"Access-Control-Allow-Headers\", \"authorization,content-type\")\n    r.headers.add(\"Access-Control-Allow-Methods\", \"DELETE, GET, HEAD, OPTIONS, PATCH, POST, PUT\")\n    r.headers.add(\"Access-Control-Allow-Origin\", \"*\")\n    return r\n</code></pre>"},{"location":"reference/sema_toolchain/sema_web_app/application/SemaServer.html#sema_toolchain.sema_web_app.application.SemaServer.SemaServer.init_classifier_args","title":"init_classifier_args","text":"<pre><code>init_classifier_args()\n</code></pre> <p>Do an API call to the sema-classifier container to get the arguments to put on the index page</p> Source code in <code>sema_toolchain/sema_web_app/application/SemaServer.py</code> <pre><code>def init_classifier_args(self):\n    \"\"\"Do an API call to the sema-classifier container to get the arguments to put on the index page\"\"\"\n    response = requests.get('http://sema-classifier:5002/classifier_args')\n    return response.json()\n</code></pre>"},{"location":"reference/sema_toolchain/sema_web_app/application/SemaServer.html#sema_toolchain.sema_web_app.application.SemaServer.SemaServer.init_scdg_args","title":"init_scdg_args","text":"<pre><code>init_scdg_args()\n</code></pre> <p>Do an API call to the sema-scdg container to get the arguments to put on the index page</p> Source code in <code>sema_toolchain/sema_web_app/application/SemaServer.py</code> <pre><code>def init_scdg_args(self):\n    \"\"\"Do an API call to the sema-scdg container to get the arguments to put on the index page\"\"\"\n    response = requests.get('http://sema-scdg:5001/scdg_args')\n    return response.json()\n</code></pre>"},{"location":"reference/sema_toolchain/sema_web_app/application/SemaServer.html#sema_toolchain.sema_web_app.application.SemaServer.SemaServer.redirection","title":"redirection","text":"<pre><code>redirection()\n</code></pre> <p>It redirects the user to the index.html page :return: a redirect to the index.html page.</p> Source code in <code>sema_toolchain/sema_web_app/application/SemaServer.py</code> <pre><code>@app.route('/')\ndef redirection():\n    \"\"\"\n    It redirects the user to the index.html page\n    :return: a redirect to the index.html page.\n    \"\"\"\n    return redirect('index.html', code =302)\n</code></pre>"},{"location":"reference/sema_toolchain/sema_web_app/application/SemaServer.html#sema_toolchain.sema_web_app.application.SemaServer.SemaServer.serve_index","title":"serve_index","text":"<pre><code>serve_index()\n</code></pre> <p>It creates a folder for the project, and then calls the upload function :return: the upload function.</p> Source code in <code>sema_toolchain/sema_web_app/application/SemaServer.py</code> <pre><code>@app.route('/index.html', methods = ['GET', 'POST'])\ndef serve_index():\n    \"\"\"\n    It creates a folder for the project, and then calls the upload function\n    :return: the upload function.\n    \"\"\"\n\n    if request.method == 'POST':\n        scdg_args = {}\n        class_args = {}\n        fl_args = {}\n\n        #Separate the different arguments of the different part of the toolchain\n        exp_number = 1\n        arguments = dict(request.form)\n        for key,value in arguments.items():\n            if (key,value) == ('boundary', 'experiment separation'):\n                exp_number += 1\n            elif exp_number == 1:\n                scdg_args[key] = value\n            elif exp_number == 2:\n                class_args[key] = value\n\n        ##\n        # Here we start the experiments\n        ##\n        if \"scdg_enable\" in request.form:\n            #Send request to SCDG microservices to start an SCDG with the parameters specified in scdg_args\n            response = requests.post('http://sema-scdg:5001/run_scdg', json=scdg_args)\n            SemaServer.app.logger.info(str(response.content))\n\n        if \"class_enable\" in request.form:\n            response = requests.post('http://sema-classifier:5002/run_classifier', json=class_args)\n            SemaServer.app.logger.info(str(response.content))\n\n    return render_template('index.html',\n                        actions_scdg=SemaServer.actions_scdg,\n                        actions_classifier=SemaServer.actions_classifier,\n                        progress=0)\n</code></pre>"},{"location":"sema_toolchain/sema_classifier/application/classifier/Classifier.html","title":"Classifier","text":""},{"location":"sema_toolchain/sema_classifier/application/classifier/Classifier.html#classifier","title":"Classifier","text":"<p>source <pre><code>Classifier(\n   path, name, threshold\n)\n</code></pre></p> <p>Methods:</p>"},{"location":"sema_toolchain/sema_classifier/application/classifier/Classifier.html#classify","title":".classify","text":"<p>source <pre><code>.classify(\n   path = None\n)\n</code></pre></p> <p>Sort by familly</p>"},{"location":"sema_toolchain/sema_classifier/application/classifier/Classifier.html#detection","title":".detection","text":"<p>source <pre><code>.detection(\n   path = None\n)\n</code></pre></p> <p>Malware vs cleanware</p>"},{"location":"sema_toolchain/sema_classifier/application/classifier/Classifier.html#train","title":".train","text":"<p>source <pre><code>.train(\n   path\n)\n</code></pre></p>"},{"location":"sema_toolchain/sema_classifier/application/classifier/Classifier.html#read_mapping","title":".read_mapping","text":"<p>source <pre><code>.read_mapping(\n   path\n)\n</code></pre></p>"},{"location":"sema_toolchain/sema_classifier/application/classifier/Classifier.html#manual_kernel","title":".manual_kernel","text":"<p>source <pre><code>.manual_kernel(\n   g1, g2\n)\n</code></pre></p>"},{"location":"sema_toolchain/sema_classifier/application/classifier/Classifier.html#manual_kernel_gram_matrix","title":".manual_kernel_gram_matrix","text":"<p>source <pre><code>.manual_kernel_gram_matrix(\n   G1, G2\n)\n</code></pre></p>"},{"location":"sema_toolchain/sema_classifier/application/classifier/Classifier.html#read_mapping_inverse","title":".read_mapping_inverse","text":"<p>source <pre><code>.read_mapping_inverse(\n   path\n)\n</code></pre></p>"},{"location":"sema_toolchain/sema_classifier/application/classifier/Classifier.html#read_gs","title":".read_gs","text":"<p>source <pre><code>.read_gs(\n   path, mapping, lonely = True\n)\n</code></pre></p>"},{"location":"sema_toolchain/sema_classifier/application/classifier/Classifier.html#merge_in_gs","title":".merge_in_gs","text":"<p>source <pre><code>.merge_in_gs(\n   g1, g2, filename\n)\n</code></pre></p>"},{"location":"sema_toolchain/sema_classifier/application/classifier/DL/DLClassifier.html","title":"DLClassifier","text":""},{"location":"sema_toolchain/sema_classifier/application/classifier/DL/DLClassifier.html#encoder","title":"Encoder","text":"<p>source <pre><code>Encoder(\n   n_features, embedding_dim = 64\n)\n</code></pre></p> <p>Methods:</p>"},{"location":"sema_toolchain/sema_classifier/application/classifier/DL/DLClassifier.html#forward","title":".forward","text":"<p>source <pre><code>.forward(\n   x\n)\n</code></pre></p>"},{"location":"sema_toolchain/sema_classifier/application/classifier/DL/DLClassifier.html#decoder","title":"Decoder","text":"<p>source <pre><code>Decoder(\n   input_dim = 64, n_features = 1\n)\n</code></pre></p> <p>Methods:</p>"},{"location":"sema_toolchain/sema_classifier/application/classifier/DL/DLClassifier.html#forward_1","title":".forward","text":"<p>source <pre><code>.forward(\n   x, seq_len\n)\n</code></pre></p>"},{"location":"sema_toolchain/sema_classifier/application/classifier/DL/DLClassifier.html#recurrentautoencoder","title":"RecurrentAutoencoder","text":"<p>source <pre><code>RecurrentAutoencoder(\n   n_features, embedding_dim = 64\n)\n</code></pre></p> <p>Methods:</p>"},{"location":"sema_toolchain/sema_classifier/application/classifier/DL/DLClassifier.html#forward_2","title":".forward","text":"<p>source <pre><code>.forward(\n   x\n)\n</code></pre></p>"},{"location":"sema_toolchain/sema_classifier/application/classifier/DL/DLClassifier.html#encode","title":".encode","text":"<p>source <pre><code>.encode(\n   x\n)\n</code></pre></p>"},{"location":"sema_toolchain/sema_classifier/application/classifier/DL/DLClassifier.html#decode","title":".decode","text":"<p>source <pre><code>.decode(\n   x, seq_len\n)\n</code></pre></p>"},{"location":"sema_toolchain/sema_classifier/application/classifier/DL/DLClassifier.html#mclassifier","title":"mClassifier","text":"<p>source <pre><code>mClassifier(\n   n_features\n)\n</code></pre></p> <p>Methods:</p>"},{"location":"sema_toolchain/sema_classifier/application/classifier/DL/DLClassifier.html#forward_3","title":".forward","text":"<p>source <pre><code>.forward(\n   x\n)\n</code></pre></p>"},{"location":"sema_toolchain/sema_classifier/application/classifier/DL/DLClassifier.html#predict","title":".predict","text":"<p>source <pre><code>.predict(\n   x\n)\n</code></pre></p>"},{"location":"sema_toolchain/sema_classifier/application/classifier/DL/DLClassifier.html#dlclassifier","title":"DLClassifier","text":"<p>source <pre><code>DLClassifier(\n   n_features, embedding_dim, classes\n)\n</code></pre></p> <p>Methods:</p>"},{"location":"sema_toolchain/sema_classifier/application/classifier/DL/DLClassifier.html#forward_4","title":".forward","text":"<p>source <pre><code>.forward(\n   x\n)\n</code></pre></p>"},{"location":"sema_toolchain/sema_classifier/application/classifier/DL/DLClassifier.html#predict_1","title":".predict","text":"<p>source <pre><code>.predict(\n   x\n)\n</code></pre></p>"},{"location":"sema_toolchain/sema_classifier/application/classifier/DL/DLClassifier.html#update","title":".update","text":"<p>source <pre><code>.update(\n   classes\n)\n</code></pre></p>"},{"location":"sema_toolchain/sema_classifier/application/classifier/DL/DLClassifier.html#get_class_id","title":".get_class_id","text":"<p>source <pre><code>.get_class_id(\n   label\n)\n</code></pre></p>"},{"location":"sema_toolchain/sema_classifier/application/classifier/GM/GSpanClassifier.html","title":"GSpanClassifier","text":""},{"location":"sema_toolchain/sema_classifier/application/classifier/GM/GSpanClassifier.html#gspanclassifier","title":"GSpanClassifier","text":"<p>source <pre><code>GSpanClassifier(\n   path, threshold = 0.45, support = 0.75, biggest_subgraphs = 5, thread = 5, timeout = 3\n)\n</code></pre></p> <p>Methods:</p>"},{"location":"sema_toolchain/sema_classifier/application/classifier/GM/GSpanClassifier.html#add_clean","title":".add_clean","text":"<p>source <pre><code>.add_clean(\n   path\n)\n</code></pre></p>"},{"location":"sema_toolchain/sema_classifier/application/classifier/GM/GSpanClassifier.html#train","title":".train","text":"<p>source <pre><code>.train(\n   path\n)\n</code></pre></p>"},{"location":"sema_toolchain/sema_classifier/application/classifier/GM/GSpanClassifier.html#classify","title":".classify","text":"<p>source <pre><code>.classify(\n   path = None, custom_sig_path = None\n)\n</code></pre></p>"},{"location":"sema_toolchain/sema_classifier/application/classifier/GM/GSpanClassifier.html#detection","title":".detection","text":"<p>source <pre><code>.detection(\n   path = None, custom_sig_path = None\n)\n</code></pre></p>"},{"location":"sema_toolchain/sema_classifier/application/classifier/GM/GSpanClassifier.html#get_stat_classifier","title":".get_stat_classifier","text":"<p>source <pre><code>.get_stat_classifier(\n   target = 'classification'\n)\n</code></pre></p>"},{"location":"sema_toolchain/sema_classifier/application/classifier/SVM/SVMClassifier.html","title":"SVMClassifier","text":""},{"location":"sema_toolchain/sema_classifier/application/classifier/SVM/SVMClassifier.html#svmclassifier","title":"SVMClassifier","text":"<p>source <pre><code>SVMClassifier(\n   path, name, threshold = 0.45, families = ['bancteian', 'delf', 'FeakerStealer',\n   'gandcrab', 'ircbot', 'lamer', 'nitol', 'RedLineStealer', 'sfone',\n   'sillyp2p', 'simbot', 'Sodinokibi', 'sytro', 'upatre', 'wabot', 'RemcosRAT']\n)\n</code></pre></p> <p>Methods:</p>"},{"location":"sema_toolchain/sema_classifier/application/classifier/SVM/SVMClassifier.html#init_dataset","title":".init_dataset","text":"<p>source <pre><code>.init_dataset(\n   path\n)\n</code></pre></p>"},{"location":"sema_toolchain/sema_classifier/application/classifier/SVM/SVMClassifier.html#split_dataset","title":".split_dataset","text":"<p>source <pre><code>.split_dataset()\n</code></pre></p>"},{"location":"sema_toolchain/sema_classifier/application/classifier/SVM/SVMClassifier.html#get_stat_classifier","title":".get_stat_classifier","text":"<p>source <pre><code>.get_stat_classifier()\n</code></pre></p>"},{"location":"sema_toolchain/sema_classifier/application/classifier/SVM/SVMInriaClassifier.html","title":"SVMInriaClassifier","text":""},{"location":"sema_toolchain/sema_classifier/application/classifier/SVM/SVMInriaClassifier.html#svminriaclassifier","title":"SVMInriaClassifier","text":"<p>source <pre><code>SVMInriaClassifier(\n   path, threshold = 0.45, families = ['bancteian', 'delf', 'FeakerStealer',\n   'gandcrab', 'ircbot', 'lamer', 'nitol', 'RedLineStealer', 'sfone',\n   'sillyp2p', 'simbot', 'Sodinokibi', 'sytro', 'upatre', 'wabot', 'RemcosRAT']\n)\n</code></pre></p> <p>Methods:</p>"},{"location":"sema_toolchain/sema_classifier/application/classifier/SVM/SVMInriaClassifier.html#classify","title":".classify","text":"<p>source <pre><code>.classify(\n   path = None\n)\n</code></pre></p>"},{"location":"sema_toolchain/sema_classifier/application/classifier/SVM/SVMInriaClassifier.html#detection","title":".detection","text":"<p>source <pre><code>.detection(\n   path = None\n)\n</code></pre></p>"},{"location":"sema_toolchain/sema_classifier/application/classifier/SVM/SVMInriaClassifier.html#train","title":".train","text":"<p>source <pre><code>.train(\n   path\n)\n</code></pre></p>"},{"location":"sema_toolchain/sema_classifier/application/classifier/SVM/SVMWLClassifier.html","title":"SVMWLClassifier","text":""},{"location":"sema_toolchain/sema_classifier/application/classifier/SVM/SVMWLClassifier.html#svmwlclassifier","title":"SVMWLClassifier","text":"<p>source <pre><code>SVMWLClassifier(\n   path, threshold = 0.45, families = ['bancteian', 'delf', 'FeakerStealer',\n   'gandcrab', 'ircbot', 'lamer', 'nitol', 'RedLineStealer', 'sfone',\n   'sillyp2p', 'simbot', 'Sodinokibi', 'sytro', 'upatre', 'wabot', 'RemcosRAT']\n)\n</code></pre></p> <p>Methods:</p>"},{"location":"sema_toolchain/sema_classifier/application/classifier/SVM/SVMWLClassifier.html#classify","title":".classify","text":"<p>source <pre><code>.classify(\n   path = None\n)\n</code></pre></p>"},{"location":"sema_toolchain/sema_classifier/application/classifier/SVM/SVMWLClassifier.html#detection","title":".detection","text":"<p>source <pre><code>.detection(\n   path = None\n)\n</code></pre></p>"},{"location":"sema_toolchain/sema_classifier/application/classifier/SVM/SVMWLClassifier.html#train","title":".train","text":"<p>source <pre><code>.train(\n   path\n)\n</code></pre></p>"},{"location":"sema_toolchain/sema_classifier/application/classifier/saved_model/PluginAtom.html","title":"PluginAtom","text":""},{"location":"sema_toolchain/sema_classifier/application/classifier/saved_model/PluginAtom.html#pluginatom","title":"PluginAtom","text":"<p>source </p> <p>Methods:</p>"},{"location":"sema_toolchain/sema_classifier/application/classifier/saved_model/PluginAtom.html#update_dic","title":".update_dic","text":"<p>source <pre><code>.update_dic(\n   call_name\n)\n</code></pre></p>"},{"location":"sema_toolchain/sema_classifier/application/classifier/saved_model/PluginAtom.html#merge","title":".merge","text":"<p>source <pre><code>.merge()\n</code></pre></p>"},{"location":"sema_toolchain/sema_classifier/application/clogging/CustomFormatter.html","title":"CustomFormatter","text":""},{"location":"sema_toolchain/sema_classifier/application/clogging/CustomFormatter.html#customformatter","title":"CustomFormatter","text":"<p>source <pre><code>CustomFormatter()\n</code></pre></p> <p>Methods:</p>"},{"location":"sema_toolchain/sema_classifier/application/clogging/CustomFormatter.html#format","title":".format","text":"<p>source <pre><code>.format(\n   record\n)\n</code></pre></p>"},{"location":"sema_toolchain/sema_classifier/application/clogging/LogBookFormatter.html","title":"LogBookFormatter","text":""},{"location":"sema_toolchain/sema_classifier/application/clogging/LogBookFormatter.html#log_type","title":"log_type","text":"<p>source <pre><code>.log_type(\n   record, handler\n)\n</code></pre></p>"},{"location":"sema_toolchain/sema_classifier/application/clogging/LogBookFormatter.html#init_logger","title":"init_logger","text":"<p>source <pre><code>.init_logger()\n</code></pre></p>"},{"location":"sema_toolchain/sema_classifier/application/helper/ArgumentParserClassifier.html","title":"ArgumentParserClassifier","text":""},{"location":"sema_toolchain/sema_classifier/application/helper/ArgumentParserClassifier.html#argumentparserclassifier","title":"ArgumentParserClassifier","text":"<p>source </p> <p>Methods:</p>"},{"location":"sema_toolchain/sema_classifier/application/helper/ArgumentParserClassifier.html#update_tool","title":".update_tool","text":"<p>source <pre><code>.update_tool(\n   tcw, args\n)\n</code></pre></p>"},{"location":"sema_toolchain/sema_classifier/application/helper/ArgumentParserClassifier.html#parse_arguments","title":".parse_arguments","text":"<p>source <pre><code>.parse_arguments(\n   allow_unk = False, args_list = None\n)\n</code></pre></p>"},{"location":"sema_toolchain/sema_scdg/application/clogging/CustomFormatter.html","title":"CustomFormatter","text":""},{"location":"sema_toolchain/sema_scdg/application/clogging/CustomFormatter.html#customformatter","title":"CustomFormatter","text":"<p>source <pre><code>CustomFormatter()\n</code></pre></p> <p>Methods:</p>"},{"location":"sema_toolchain/sema_scdg/application/clogging/CustomFormatter.html#format","title":".format","text":"<p>source <pre><code>.format(\n   record\n)\n</code></pre></p>"},{"location":"sema_toolchain/sema_scdg/application/clogging/DataManager.html","title":"DataManager","text":""},{"location":"sema_toolchain/sema_scdg/application/clogging/DataManager.html#datamanager","title":"DataManager","text":"<p>source </p> <p>Methods:</p>"},{"location":"sema_toolchain/sema_scdg/application/clogging/DataManager.html#setup_csv","title":".setup_csv","text":"<p>source <pre><code>.setup_csv(\n   csv_file_path\n)\n</code></pre></p>"},{"location":"sema_toolchain/sema_scdg/application/clogging/DataManager.html#save_to_csv","title":".save_to_csv","text":"<p>source <pre><code>.save_to_csv(\n   proj, family, call_sim, csv_file_path\n)\n</code></pre></p>"},{"location":"sema_toolchain/sema_scdg/application/clogging/DataManager.html#count_block","title":".count_block","text":"<p>source <pre><code>.count_block(\n   proj, main_obj\n)\n</code></pre></p>"},{"location":"sema_toolchain/sema_scdg/application/clogging/DataManager.html#print_state_address","title":".print_state_address","text":"<p>source <pre><code>.print_state_address(\n   state\n)\n</code></pre></p>"},{"location":"sema_toolchain/sema_scdg/application/clogging/DataManager.html#add_instr_addr","title":".add_instr_addr","text":"<p>source <pre><code>.add_instr_addr(\n   state\n)\n</code></pre></p>"},{"location":"sema_toolchain/sema_scdg/application/clogging/DataManager.html#add_block_addr","title":".add_block_addr","text":"<p>source <pre><code>.add_block_addr(\n   state\n)\n</code></pre></p>"},{"location":"sema_toolchain/sema_scdg/application/clogging/DataManager.html#get_plugin_data","title":".get_plugin_data","text":"<p>source <pre><code>.get_plugin_data(\n   state, simgr, to_store = False\n)\n</code></pre></p>"},{"location":"sema_toolchain/sema_scdg/application/clogging/DataManager.html#print_block_info","title":".print_block_info","text":"<p>source <pre><code>.print_block_info()\n</code></pre></p>"},{"location":"sema_toolchain/sema_scdg/application/clogging/DataManager.html#clear","title":".clear","text":"<p>source <pre><code>.clear()\n</code></pre></p>"},{"location":"sema_toolchain/sema_scdg/application/clogging/LogBookFormatter.html","title":"LogBookFormatter","text":""},{"location":"sema_toolchain/sema_scdg/application/clogging/LogBookFormatter.html#log_type","title":"log_type","text":"<p>source <pre><code>.log_type(\n   record, handler\n)\n</code></pre></p>"},{"location":"sema_toolchain/sema_scdg/application/clogging/LogBookFormatter.html#init_logger","title":"init_logger","text":"<p>source <pre><code>.init_logger()\n</code></pre></p>"},{"location":"sema_toolchain/sema_scdg/application/helper/ArgumentParserSCDG.html","title":"ArgumentParserSCDG","text":""},{"location":"sema_toolchain/sema_scdg/application/helper/ArgumentParserSCDG.html#argumentparserscdg","title":"ArgumentParserSCDG","text":"<p>source </p> <p>Methods:</p>"},{"location":"sema_toolchain/sema_scdg/application/helper/ArgumentParserSCDG.html#parse_arguments","title":".parse_arguments","text":"<p>source <pre><code>.parse_arguments(\n   allow_unk = False, args_list = None\n)\n</code></pre></p>"},{"location":"sema_toolchain/sema_scdg/application/helper/Debugger.html","title":"Debugger","text":""},{"location":"sema_toolchain/sema_scdg/application/helper/Debugger.html#debugger","title":"Debugger","text":"<p>source </p> <p>Methods:</p>"},{"location":"sema_toolchain/sema_scdg/application/helper/Debugger.html#debug_instr","title":".debug_instr","text":"<p>source <pre><code>.debug_instr(\n   state\n)\n</code></pre></p>"},{"location":"sema_toolchain/sema_scdg/application/helper/Debugger.html#debug_read","title":".debug_read","text":"<p>source <pre><code>.debug_read(\n   state\n)\n</code></pre></p>"},{"location":"sema_toolchain/sema_scdg/application/helper/Debugger.html#debug_write","title":".debug_write","text":"<p>source <pre><code>.debug_write(\n   state\n)\n</code></pre></p>"},{"location":"sema_toolchain/sema_scdg/application/helper/Graph.html","title":"Graph","text":""},{"location":"sema_toolchain/sema_scdg/application/helper/Graph.html#graph","title":"Graph","text":"<p>source </p> <p>Methods:</p>"},{"location":"sema_toolchain/sema_scdg/application/helper/Graph.html#run","title":".run","text":"<p>source <pre><code>.run()\n</code></pre></p>"},{"location":"sema_toolchain/sema_scdg/application/helper/PlotResults.html","title":"PlotResults","text":""},{"location":"sema_toolchain/sema_scdg/application/helper/PlotResults.html#plotresults","title":"PlotResults","text":"<p>source </p> <p>Methods:</p>"},{"location":"sema_toolchain/sema_scdg/application/helper/PlotResults.html#run","title":".run","text":"<p>source <pre><code>.run()\n</code></pre></p>"},{"location":"sema_toolchain/sema_scdg/application/plugin/PluginAtom.html","title":"PluginAtom","text":""},{"location":"sema_toolchain/sema_scdg/application/plugin/PluginAtom.html#pluginatom","title":"PluginAtom","text":"<p>source </p> <p>Methods:</p>"},{"location":"sema_toolchain/sema_scdg/application/plugin/PluginAtom.html#update_dic","title":".update_dic","text":"<p>source <pre><code>.update_dic(\n   call_name\n)\n</code></pre></p>"},{"location":"sema_toolchain/sema_scdg/application/plugin/PluginAtom.html#merge","title":".merge","text":"<p>source <pre><code>.merge()\n</code></pre></p>"},{"location":"sema_toolchain/sema_scdg/application/plugin/PluginCommands.html","title":"PluginCommands","text":""},{"location":"sema_toolchain/sema_scdg/application/plugin/PluginCommands.html#plugincommands","title":"PluginCommands","text":"<p>source </p> <p>Methods:</p>"},{"location":"sema_toolchain/sema_scdg/application/plugin/PluginCommands.html#merge","title":".merge","text":"<p>source <pre><code>.merge(\n   calls, new_calls\n)\n</code></pre></p>"},{"location":"sema_toolchain/sema_scdg/application/plugin/PluginCommands.html#track","title":".track","text":"<p>source <pre><code>.track(\n   simgr, scdg, exp_dir\n)\n</code></pre></p>"},{"location":"sema_toolchain/sema_scdg/application/plugin/PluginEnvVar.html","title":"PluginEnvVar","text":""},{"location":"sema_toolchain/sema_scdg/application/plugin/PluginEnvVar.html#pluginenvvar","title":"PluginEnvVar","text":"<p>source </p> <p>Methods:</p>"},{"location":"sema_toolchain/sema_scdg/application/plugin/PluginEnvVar.html#setup_plugin","title":".setup_plugin","text":"<p>source <pre><code>.setup_plugin()\n</code></pre></p>"},{"location":"sema_toolchain/sema_scdg/application/plugin/PluginEnvVar.html#update_dic","title":".update_dic","text":"<p>source <pre><code>.update_dic(\n   call_name\n)\n</code></pre></p>"},{"location":"sema_toolchain/sema_scdg/application/plugin/PluginEnvVar.html#ending_state","title":".ending_state","text":"<p>source <pre><code>.ending_state(\n   simgr\n)\n</code></pre></p>"},{"location":"sema_toolchain/sema_scdg/application/plugin/PluginEnvVar.html#merge","title":".merge","text":"<p>source <pre><code>.merge()\n</code></pre></p>"},{"location":"sema_toolchain/sema_scdg/application/plugin/PluginEvasion.html","title":"PluginEvasion","text":""},{"location":"sema_toolchain/sema_scdg/application/plugin/PluginEvasion.html#pluginevasion","title":"PluginEvasion","text":"<p>source </p>"},{"location":"sema_toolchain/sema_scdg/application/plugin/PluginIoC.html","title":"PluginIoC","text":""},{"location":"sema_toolchain/sema_scdg/application/plugin/PluginIoC.html#pluginioc","title":"PluginIoC","text":"<p>source </p> <p>Methods:</p>"},{"location":"sema_toolchain/sema_scdg/application/plugin/PluginIoC.html#build_ioc","title":".build_ioc","text":"<p>source <pre><code>.build_ioc(\n   scdg, exp_dir\n)\n</code></pre></p>"},{"location":"sema_toolchain/sema_scdg/application/plugin/PluginLocaleInfo.html","title":"PluginLocaleInfo","text":""},{"location":"sema_toolchain/sema_scdg/application/plugin/PluginLocaleInfo.html#pluginlocaleinfo","title":"PluginLocaleInfo","text":"<p>source </p> <p>Methods:</p>"},{"location":"sema_toolchain/sema_scdg/application/plugin/PluginLocaleInfo.html#setup_plugin","title":".setup_plugin","text":"<p>source <pre><code>.setup_plugin()\n</code></pre></p>"},{"location":"sema_toolchain/sema_scdg/application/plugin/PluginLocaleInfo.html#ending_state","title":".ending_state","text":"<p>source <pre><code>.ending_state(\n   simgr\n)\n</code></pre></p>"},{"location":"sema_toolchain/sema_scdg/application/plugin/PluginRegistry.html","title":"PluginRegistry","text":""},{"location":"sema_toolchain/sema_scdg/application/plugin/PluginRegistry.html#pluginregistry","title":"PluginRegistry","text":"<p>source </p> <p>Methods:</p>"},{"location":"sema_toolchain/sema_scdg/application/plugin/PluginRegistry.html#setup_plugin","title":".setup_plugin","text":"<p>source <pre><code>.setup_plugin()\n</code></pre></p>"},{"location":"sema_toolchain/sema_scdg/application/plugin/PluginRegistry.html#ending_state","title":".ending_state","text":"<p>source <pre><code>.ending_state(\n   simgr\n)\n</code></pre></p>"},{"location":"sema_toolchain/sema_scdg/application/plugin/PluginResources.html","title":"PluginResources","text":""},{"location":"sema_toolchain/sema_scdg/application/plugin/PluginResources.html#pluginresources","title":"PluginResources","text":"<p>source </p> <p>Methods:</p>"},{"location":"sema_toolchain/sema_scdg/application/plugin/PluginResources.html#setup_plugin","title":".setup_plugin","text":"<p>source <pre><code>.setup_plugin()\n</code></pre></p>"},{"location":"sema_toolchain/sema_scdg/application/plugin/PluginResources.html#ending_state","title":".ending_state","text":"<p>source <pre><code>.ending_state(\n   simgr\n)\n</code></pre></p>"},{"location":"sema_toolchain/sema_scdg/application/plugin/PluginWideChar.html","title":"PluginWideChar","text":""},{"location":"sema_toolchain/sema_scdg/application/plugin/PluginWideChar.html#pluginwidechar","title":"PluginWideChar","text":"<p>source </p>"},{"location":"sema_toolchain/sema_scdg/application/procedures/CustomSimProcedure.html","title":"CustomSimProcedure","text":""},{"location":"sema_toolchain/sema_scdg/application/procedures/CustomSimProcedure.html#customsimprocedure","title":"CustomSimProcedure","text":"<p>source <pre><code>CustomSimProcedure(\n   verbose = False\n)\n</code></pre></p> <p>Abstract base class for custom simulation procedures.</p> <p>This class defines various attributes and methods for handling custom simulation procedures, loading libraries, setting calling conventions, and creating simprocedures.</p> <p>Methods:</p>"},{"location":"sema_toolchain/sema_scdg/application/procedures/CustomSimProcedure.html#clear","title":".clear","text":"<p>source <pre><code>.clear()\n</code></pre></p> <p>Clears all data structures within the object.</p> <p>This method empties the dictionaries <code>sim_proc</code>, <code>system_call_table</code>, and <code>syscall_found</code>.</p>"},{"location":"sema_toolchain/sema_scdg/application/procedures/CustomSimProcedure.html#setup","title":".setup","text":"<p>source <pre><code>.setup(\n   os\n)\n</code></pre></p> <p>Sets up the object for system call procedure initialization.</p> <p>If the object is not already set up, this method initializes loaders, configures logging if verbose, and initializes system call procedures based on the provided operating system.</p>"},{"location":"sema_toolchain/sema_scdg/application/procedures/CustomSimProcedure.html#load_syscall_table","title":".load_syscall_table","text":"<p>source <pre><code>.load_syscall_table(\n   proj\n)\n</code></pre></p> <p>Loads the system call table for the given project.</p> <p>This method is abstract and must be implemented in subclasses to define the behavior of loading the system call table for a specific project.</p>"},{"location":"sema_toolchain/sema_scdg/application/procedures/CustomSimProcedure.html#get_gen_simproc","title":".get_gen_simproc","text":"<p>source <pre><code>.get_gen_simproc()\n</code></pre></p> <p>Returns a dictionary containing generic simulation procedures.</p> <p>This method retrieves and returns specific simulation procedures from the <code>custom_package</code> dictionary.</p>"},{"location":"sema_toolchain/sema_scdg/application/procedures/CustomSimProcedure.html#get_custom_sim_proc","title":".get_custom_sim_proc","text":"<p>source <pre><code>.get_custom_sim_proc()\n</code></pre></p> <p>Returns a dictionary containing custom simulation procedures.</p> <p>This method retrieves and returns specific custom simulation procedures from the <code>custom_package</code> dictionary.</p>"},{"location":"sema_toolchain/sema_scdg/application/procedures/CustomSimProcedure.html#generic_sim_procedure","title":".generic_sim_procedure","text":"<p>source <pre><code>.generic_sim_procedure(\n   args, ret\n)\n</code></pre></p> <p>Creates a generic simulation procedure based on arguments and return type.</p> <p>This method dynamically generates a simulation procedure based on the provided arguments and return type.</p>"},{"location":"sema_toolchain/sema_scdg/application/procedures/CustomSimProcedure.html#create_sim_procedure","title":".create_sim_procedure","text":"<p>source <pre><code>.create_sim_procedure(\n   name, args, ret, args_mismatch\n)\n</code></pre></p> <p>Creates a custom simulation procedure based on the provided name, arguments, return type, and arguments mismatch flag.</p> <p>This method dynamically generates a custom simulation procedure with specific characteristics based on the input parameters.</p>"},{"location":"sema_toolchain/sema_scdg/application/procedures/CustomSimProcedure.html#deal_with_alt_names","title":".deal_with_alt_names","text":"<p>source <pre><code>.deal_with_alt_names(\n   pkg_name, proc\n)\n</code></pre></p> <p>Defines the behavior for handling alternative names in simulation procedures.</p> <p>This method is abstract and must be implemented in subclasses to specify how to deal with alternative names in simulation procedures.</p>"},{"location":"sema_toolchain/sema_scdg/application/procedures/CustomSimProcedure.html#init_sim_proc","title":".init_sim_proc","text":"<p>source <pre><code>.init_sim_proc(\n   os_name\n)\n</code></pre></p> <p>Initializes simulation procedures based on the provided operating system name.</p> <p>This method dynamically imports and organizes simulation procedures based on the specified operating system for further analysis.</p>"},{"location":"sema_toolchain/sema_scdg/application/procedures/CustomSimProcedure.html#create_lib_procedures","title":".create_lib_procedures","text":"<p>source <pre><code>.create_lib_procedures(\n   dlldict, libname, angrlib\n)\n</code></pre></p> <p>Creates library procedures based on the provided dictionary, library name, and angr library.</p> <p>This function iterates through the dictionary of procedures, extracts arguments, checks for argument mismatches, and creates custom simulation procedures for each procedure in the library.</p>"},{"location":"sema_toolchain/sema_scdg/application/procedures/CustomSimProcedure.html#set_calling_conventions","title":".set_calling_conventions","text":"<p>source <pre><code>.set_calling_conventions(\n   lib_name, dlls_functions\n)\n</code></pre></p> <p>Sets calling conventions for a given library based on the provided information.</p> <p>This function determines and sets the calling conventions for the library, updating the default calling conventions for X86 and AMD64 architectures accordingly.</p>"},{"location":"sema_toolchain/sema_scdg/application/procedures/CustomSimProcedure.html#loadlibs_proc","title":".loadlibs_proc","text":"<p>source <pre><code>.loadlibs_proc(\n   dlls_functions, project\n)\n</code></pre></p> <p>Loads library procedures and applies hooks to symbols based on the provided information.</p> <p>This function iterates through requested libraries, sets calling conventions, creates procedures, applies hooks to symbols, and updates the simulation procedures accordingly.</p>"},{"location":"sema_toolchain/sema_scdg/application/procedures/CustomSimProcedure.html#std_sim_proc_hook","title":".std_sim_proc_hook","text":"<p>source <pre><code>.std_sim_proc_hook(\n   proj, name, simproc\n)\n</code></pre></p> <p>Applies a standard calling convention hook to a symbol in the project.</p> <p>This function hooks the specified symbol in the project with a standard calling convention based on the project architecture.</p>"},{"location":"sema_toolchain/sema_scdg/application/procedures/CustomSimProcedure.html#exception_sim_proc_hook","title":".exception_sim_proc_hook","text":"<p>source <pre><code>.exception_sim_proc_hook(\n   proj, name, simproc\n)\n</code></pre></p> <p>Applies an exception calling convention hook to a symbol in the project.</p> <p>This function hooks the specified symbol in the project with an exception calling convention based on the project architecture.</p>"},{"location":"sema_toolchain/sema_scdg/application/procedures/CustomSimProcedure.html#amd64_sim_proc_hook","title":".amd64_sim_proc_hook","text":"<p>source <pre><code>.amd64_sim_proc_hook(\n   project, name, sim_proc\n)\n</code></pre></p> <p>Defines an abstract method for applying an AMD64 specific simulation procedure hook to a symbol in the project.</p> <p>This method must be implemented in subclasses to handle the application of AMD64 simulation procedure hooks.</p>"},{"location":"sema_toolchain/sema_scdg/application/procedures/CustomSimProcedure.html#custom_hook_static","title":".custom_hook_static","text":"<p>source <pre><code>.custom_hook_static(\n   proj\n)\n</code></pre></p> <p>Defines an abstract method for applying custom static hooks in the project.</p> <p>This method must be implemented in subclasses to handle the application of custom static hooks in the project.</p>"},{"location":"sema_toolchain/sema_scdg/application/procedures/CustomSimProcedure.html#custom_hook_no_symbols","title":".custom_hook_no_symbols","text":"<p>source <pre><code>.custom_hook_no_symbols(\n   proj\n)\n</code></pre></p> <p>Applies custom simulation procedures to the project's syscall library when no symbols are present.</p> <p>This function adds custom simulation procedures to the syscall library based on predefined custom and generic procedures, ensuring proper handling for functions not implemented.</p>"},{"location":"sema_toolchain/sema_scdg/application/procedures/DDLLoader.html","title":"DDLLoader","text":""},{"location":"sema_toolchain/sema_scdg/application/procedures/DDLLoader.html#ddlloader","title":"DDLLoader","text":"<p>source </p> <p>Methods:</p>"},{"location":"sema_toolchain/sema_scdg/application/procedures/DDLLoader.html#read_call_file","title":".read_call_file","text":"<p>source <pre><code>.read_call_file(\n   filename, dirname\n)\n</code></pre></p>"},{"location":"sema_toolchain/sema_scdg/application/procedures/DDLLoader.html#load","title":".load","text":"<p>source <pre><code>.load(\n   project, force = False, dll = None\n)\n</code></pre></p>"},{"location":"sema_toolchain/sema_scdg/application/procedures/DDLLoader.html#load_more","title":".load_more","text":"<p>source <pre><code>.load_more(\n   new_lib, actual_table\n)\n</code></pre></p>"},{"location":"sema_toolchain/sema_scdg/application/procedures/DDLLoader.html#load_gen","title":".load_gen","text":"<p>source <pre><code>.load_gen(\n   project, force = False, dll = None\n)\n</code></pre></p>"},{"location":"sema_toolchain/sema_scdg/application/procedures/LinuxTableLoader.html","title":"LinuxTableLoader","text":""},{"location":"sema_toolchain/sema_scdg/application/procedures/LinuxTableLoader.html#linuxtableloader","title":"LinuxTableLoader","text":"<p>source <pre><code>LinuxTableLoader(\n   filename = ''\n)\n</code></pre></p> <p>Methods:</p>"},{"location":"sema_toolchain/sema_scdg/application/procedures/LinuxTableLoader.html#read_file","title":".read_file","text":"<p>source <pre><code>.read_file(\n   filename\n)\n</code></pre></p>"},{"location":"sema_toolchain/sema_scdg/application/procedures/LinuxTableLoader.html#load_table","title":".load_table","text":"<p>source <pre><code>.load_table(\n   project\n)\n</code></pre></p>"},{"location":"sema_toolchain/sema_scdg/application/sandboxes/CuckooInterface.html","title":"CuckooInterface","text":""},{"location":"sema_toolchain/sema_scdg/application/sandboxes/CuckooInterface.html#cuckoointerface","title":"CuckooInterface","text":"<p>source <pre><code>CuckooInterface(\n   name: str, ossys = 'linux', guestos = 'windows', create_vm = True\n)\n</code></pre></p> <p>sources: inspired from https://github.com/keithjjones/cuckoo-api/blob/master/CuckooAPI/__init__.py</p> <p>Methods:</p>"},{"location":"sema_toolchain/sema_scdg/application/sandboxes/CuckooInterface.html#init_vm","title":".init_vm","text":"<p>source <pre><code>.init_vm(\n   name, ossys, guestos, create_vm\n)\n</code></pre></p>"},{"location":"sema_toolchain/sema_scdg/application/sandboxes/CuckooInterface.html#udpdate_conf","title":".udpdate_conf","text":"<p>source <pre><code>.udpdate_conf()\n</code></pre></p>"},{"location":"sema_toolchain/sema_scdg/application/sandboxes/CuckooInterface.html#start_sandbox","title":".start_sandbox","text":"<p>source <pre><code>.start_sandbox(\n   gdb_port\n)\n</code></pre></p>"},{"location":"sema_toolchain/sema_scdg/application/sandboxes/CuckooInterface.html#load_analysis","title":".load_analysis","text":"<p>source <pre><code>.load_analysis(\n   file\n)\n</code></pre></p>"},{"location":"sema_toolchain/sema_scdg/application/sandboxes/CuckooInterface.html#start_analysis","title":".start_analysis","text":"<p>source <pre><code>.start_analysis(\n   file\n)\n</code></pre></p>"},{"location":"sema_toolchain/sema_scdg/application/sandboxes/CuckooInterface.html#stop_sandbox","title":".stop_sandbox","text":"<p>source <pre><code>.stop_sandbox()\n</code></pre></p>"},{"location":"sema_toolchain/sema_scdg/application/sandboxes/CuckooInterface.html#get_address","title":".get_address","text":"<p>source <pre><code>.get_address()\n</code></pre></p>"},{"location":"sema_toolchain/sema_scdg/application/sandboxes/SandBoxInterface.html","title":"SandBoxInterface","text":""},{"location":"sema_toolchain/sema_scdg/application/sandboxes/SandBoxInterface.html#sandboxinterface","title":"SandBoxInterface","text":"<p>source <pre><code>SandBoxInterface(\n   host = '127.0.0.1', port = 8000, proto = 'http'\n)\n</code></pre></p>"},{"location":"sema_toolchain/sema_scdg/application/sandboxes/vm/VMInterface.html","title":"VMInterface","text":""},{"location":"sema_toolchain/sema_scdg/application/sandboxes/vm/VMInterface.html#vminterface","title":"VMInterface","text":"<p>source <pre><code>VMInterface(\n   name: str\n)\n</code></pre></p> <p>Methods:</p>"},{"location":"sema_toolchain/sema_scdg/application/sandboxes/vm/VMInterface.html#create_vm","title":".create_vm","text":"<p>source <pre><code>.create_vm()\n</code></pre></p>"},{"location":"sema_toolchain/sema_scdg/application/sandboxes/vm/VMInterface.html#start_vm","title":".start_vm","text":"<p>source <pre><code>.start_vm()\n</code></pre></p>"},{"location":"sema_toolchain/sema_scdg/application/sandboxes/vm/VMInterface.html#stop_vm","title":".stop_vm","text":"<p>source <pre><code>.stop_vm()\n</code></pre></p>"},{"location":"sema_toolchain/sema_scdg/application/sandboxes/vm/VMInterface.html#get_vm_infos","title":".get_vm_infos","text":"<p>source <pre><code>.get_vm_infos()\n</code></pre></p>"},{"location":"sema_toolchain/sema_scdg/application/sandboxes/vm/VMInterface.html#save_vm","title":".save_vm","text":"<p>source <pre><code>.save_vm()\n</code></pre></p>"},{"location":"sema_toolchain/sema_scdg/application/sandboxes/vm/VMInterface.html#pause_vm","title":".pause_vm","text":"<p>source <pre><code>.pause_vm()\n</code></pre></p>"},{"location":"sema_toolchain/sema_scdg/application/sandboxes/vm/VMInterface.html#resume_vm","title":".resume_vm","text":"<p>source <pre><code>.resume_vm()\n</code></pre></p>"},{"location":"sema_toolchain/sema_scdg/application/sandboxes/vm/kvm/KVMInterface.html","title":"KVMInterface","text":""},{"location":"sema_toolchain/sema_scdg/application/sandboxes/vm/kvm/KVMInterface.html#kvminterface","title":"KVMInterface","text":"<p>source <pre><code>KVMInterface(\n   name: str, filename: str, config: str, config_vol: str, config_pool: str,\n   image: str, mem_mb = 4194304, vcpu = 2, capacity = 45, create_vm = False, user = 'user',\n   password = 'user', guestos = 'linux'\n)\n</code></pre></p> <p>Methods:</p>"},{"location":"sema_toolchain/sema_scdg/application/sandboxes/vm/kvm/KVMInterface.html#request_cred","title":".request_cred","text":"<p>source <pre><code>.request_cred(\n   credentials, user_data\n)\n</code></pre></p>"},{"location":"sema_toolchain/sema_scdg/application/sandboxes/vm/kvm/KVMInterface.html#update_volume_config","title":".update_volume_config","text":"<p>source <pre><code>.update_volume_config(\n   config_vol\n)\n</code></pre></p>"},{"location":"sema_toolchain/sema_scdg/application/sandboxes/vm/kvm/KVMInterface.html#update_pool_config","title":".update_pool_config","text":"<p>source <pre><code>.update_pool_config(\n   config_pool\n)\n</code></pre></p>"},{"location":"sema_toolchain/sema_scdg/application/sandboxes/vm/kvm/KVMInterface.html#update_global_config","title":".update_global_config","text":"<p>source <pre><code>.update_global_config(\n   config\n)\n</code></pre></p>"},{"location":"sema_toolchain/sema_scdg/application/sandboxes/vm/kvm/KVMInterface.html#create_vm","title":".create_vm","text":"<p>source <pre><code>.create_vm()\n</code></pre></p>"},{"location":"sema_toolchain/sema_scdg/application/sandboxes/vm/kvm/KVMInterface.html#start_vm","title":".start_vm","text":"<p>source <pre><code>.start_vm()\n</code></pre></p>"},{"location":"sema_toolchain/sema_scdg/application/sandboxes/vm/kvm/KVMInterface.html#stop_vm","title":".stop_vm","text":"<p>source <pre><code>.stop_vm()\n</code></pre></p>"},{"location":"sema_toolchain/sema_scdg/application/sandboxes/vm/kvm/KVMInterface.html#get_vm_infos","title":".get_vm_infos","text":"<p>source <pre><code>.get_vm_infos()\n</code></pre></p>"},{"location":"sema_toolchain/sema_scdg/application/sandboxes/vm/kvm/KVMInterface.html#save_vm","title":".save_vm","text":"<p>source <pre><code>.save_vm()\n</code></pre></p>"},{"location":"sema_toolchain/sema_scdg/application/sandboxes/vm/kvm/KVMInterface.html#pause_vm","title":".pause_vm","text":"<p>source <pre><code>.pause_vm()\n</code></pre></p>"},{"location":"sema_toolchain/sema_scdg/application/sandboxes/vm/kvm/KVMInterface.html#resume_vm","title":".resume_vm","text":"<p>source <pre><code>.resume_vm()\n</code></pre></p>"},{"location":"coverage.html","title":"Coverage","text":""}]}