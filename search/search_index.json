{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"sources/","title":"\u2620\ufe0f SEMA \u2620\ufe0f - ToolChain using Symbolic Execution for Malware Analysis.","text":"<pre><code>  \u2588\u2588\u2588\u2588\u2588\u2588 \u2593\u2588\u2588\u2588\u2588\u2588  \u2588\u2588\u2588\u2584 \u2584\u2588\u2588\u2588\u2593 \u2584\u2584\u2584\n\u2592\u2588\u2588    \u2592 \u2593\u2588   \u2580 \u2593\u2588\u2588\u2592\u2580\u2588\u2580 \u2588\u2588\u2592\u2592\u2588\u2588\u2588\u2588\u2584\n\u2591 \u2593\u2588\u2588\u2584   \u2592\u2588\u2588\u2588   \u2593\u2588\u2588    \u2593\u2588\u2588\u2591\u2592\u2588\u2588  \u2580\u2588\u2584\n  \u2592   \u2588\u2588\u2592\u2592\u2593\u2588  \u2584 \u2592\u2588\u2588    \u2592\u2588\u2588 \u2591\u2588\u2588\u2584\u2584\u2584\u2584\u2588\u2588\n\u2592\u2588\u2588\u2588\u2588\u2588\u2588\u2592\u2592\u2591\u2592\u2588\u2588\u2588\u2588\u2592\u2592\u2588\u2588\u2592   \u2591\u2588\u2588\u2592 \u2593\u2588   \u2593\u2588\u2588\u2592\n\u2592 \u2592\u2593\u2592 \u2592 \u2591\u2591\u2591 \u2592\u2591 \u2591\u2591 \u2592\u2591   \u2591  \u2591 \u2592\u2592   \u2593\u2592\u2588\u2591\n\u2591 \u2591\u2592  \u2591 \u2591 \u2591 \u2591  \u2591\u2591  \u2591      \u2591  \u2592   \u2592\u2592 \u2591\n\u2591  \u2591  \u2591     \u2591   \u2591      \u2591     \u2591   \u2592\n      \u2591     \u2591  \u2591       \u2591         \u2591  \u2591\n\n</code></pre>"},{"location":"sources/#toolchain-architecture","title":"Toolchain architecture","text":"<p>Our toolchain is represented in the following figure and works as follows:</p> <ul> <li>A collection of labelled binaries from different malware families is collected and used as the input of the toolchain.</li> <li>Angr, a framework for symbolic execution, is used to execute binaries symbolically and extract execution traces. For this purpose, different heuristics have been developed to optimize symbolic execution.</li> <li>Several execution traces (i.e., API calls used and their arguments) corresponding to one binary are extracted with Angr and gathered together using several graph heuristics to construct a SCDG.</li> <li>These resulting SCDGs are then used as input to graph mining to extract common graphs between SCDGs of the same family and create a signature.</li> <li>Finally, when a new sample has to be classified, its SCDG is built and compared with SCDGs of known families using a simple similarity metric.</li> </ul> <p></p> <p>This repository contains a first version of a SCDG extractor. During the symbolic analysis of a binary, all system calls and their arguments found are recorded. After some stop conditions for symbolic analysis, a graph is built as follows: Nodes are system calls recorded, edges show that some arguments are shared between calls.</p> <p>When a new sample has to be evaluated, its SCDG is first built as described previously. Then, <code>gspan</code> is applied to extract the biggest common subgraph and a similarity score is evaluated to decide if the graph is considered as part of the family or not. The similarity score <code>S</code> between graph <code>G'</code> and <code>G''</code> is computed as follows: Since <code>G''</code> is a subgraph of <code>G'</code>, this is calculating how much <code>G'</code> appears in <code>G''</code>. Another classifier we use is the Support Vector Machine (<code>SVM</code>) with INRIA graph kernel or the Weisfeiler-Lehman extension graph kernel.</p> <p>A web application is available and is called SemaWebApp. It allows to manage the launch of experiments on SemaSCDG and/or SemaClassifier.</p>"},{"location":"sources/#documentation","title":"Documentation","text":"<ul> <li> <p>Complete README of the entire toolchain : </p> </li> <li> <p>SCDG README : </p> </li> <li> <p>Classifier README : </p> </li> <li> <p>Web app README : </p> </li> <li> <p>A Makefile is provided to ease the usage of the toolchain, run <code>make help</code> for more information about the available commands</p> </li> </ul>"},{"location":"sources/#credentials","title":"Credentials","text":"<p>Main authors of the projects:</p> <ul> <li> <p>Charles-Henry Bertrand Van Ouytsel (UCLouvain)</p> </li> <li> <p>Christophe Crochet (UCLouvain)</p> </li> <li> <p>Khanh Huu The Dam (UCLouvain)</p> </li> <li> <p>Oreins Manon (UCLouvain)</p> </li> </ul> <p>Under the supervision and with the support of Fabrizio Biondi (Avast)</p> <p>Under the supervision and with the support of our professor Axel Legay (UCLouvain) (\u2764\ufe0f)</p>"},{"location":"sources/#linked-papers","title":"Linked papers","text":"<ul> <li> <p>Analysis and classification of malware based on symbolic execution and machine learning</p> </li> <li> <p>Tool Paper - SEMA: Symbolic Execution Toolchain for Malware Analysis</p> </li> <li> <p>On Exploiting Symbolic Execution to Improve the Analysis of RAT Samples with angr</p> </li> </ul>"},{"location":"sources/sema-toolchain/sema_classifier/application/ClassifierApp/","title":"ClassifierApp","text":""},{"location":"sources/sema-toolchain/sema_classifier/application/ClassifierApp/#run_classifier","title":"run_classifier","text":"<pre><code>.run_classifier()\n</code></pre>"},{"location":"sources/sema-toolchain/sema_classifier/application/ClassifierApp/#get_args_request","title":"get_args_request","text":"<pre><code>.get_args_request()\n</code></pre>"},{"location":"sources/sema-toolchain/sema_classifier/application/ClassifierApp/#parse_class_args","title":"parse_class_args","text":"<pre><code>.parse_class_args(\n   user_data, args_parser\n)\n</code></pre>"},{"location":"sources/sema-toolchain/sema_classifier/application/ClassifierApp/#get_args","title":"get_args","text":"<pre><code>.get_args()\n</code></pre>"},{"location":"sources/sema-toolchain/sema_classifier/application/SemaClassifier/","title":"SemaClassifier","text":""},{"location":"sources/sema-toolchain/sema_classifier/application/SemaClassifier/#main","title":"main","text":"<pre><code>.main()\n</code></pre>"},{"location":"sources/sema-toolchain/sema_scdg/application/SCDGApp/","title":"SCDGApp","text":""},{"location":"sources/sema-toolchain/sema_scdg/application/SCDGApp/#run_scdg","title":"run_scdg","text":"<pre><code>.run_scdg()\n</code></pre>"},{"location":"sources/sema-toolchain/sema_scdg/application/SCDGApp/#get_args_request","title":"get_args_request","text":"<pre><code>.get_args_request()\n</code></pre>"},{"location":"sources/sema-toolchain/sema_scdg/application/SCDGApp/#parse_json_request","title":"parse_json_request","text":"<pre><code>.parse_json_request(\n   user_data\n)\n</code></pre>"},{"location":"sources/sema-toolchain/sema_scdg/application/SCDGApp/#get_args","title":"get_args","text":"<pre><code>.get_args()\n</code></pre>"},{"location":"sources/sema-toolchain/sema_scdg/application/SemaSCDG/","title":"SemaSCDG","text":""},{"location":"sources/sema-toolchain/sema_scdg/application/SemaSCDG/#__handle_exception","title":"__handle_exception","text":"<pre><code>.__handle_exception(\n   e, sema_scdg, crashed_samples\n)\n</code></pre> <p>Handles exceptions during the binary analysis process.</p> <p>This function manages different types of exceptions, logs errors, ends the analysis run, and keeps track of crashed samples.</p>"},{"location":"sources/sema-toolchain/sema_scdg/application/SemaSCDG/#__process_folder","title":"__process_folder","text":"<pre><code>.__process_folder(\n   folder, sema_scdg, crashed_samples\n)\n</code></pre> <p>Processes files in a folder for building the System Call Dependency Graph (SCDG).</p> <p>This function iterates through files in a folder, sets up the analysis environment for each file, runs the analysis, handles exceptions, and updates progress.</p>"},{"location":"sources/sema-toolchain/sema_scdg/application/SemaSCDG/#start_scdg","title":"start_scdg","text":"<pre><code>.start_scdg()\n</code></pre> <p>Starts the System Call Dependency Graph (SCDG) analysis process.</p> <p>This function initiates the analysis by determining whether to analyze a single binary or multiple binaries in a folder, running the analysis, handling exceptions, and reporting any crashed samples.</p>"},{"location":"sources/sema-toolchain/sema_scdg/application/scdg_tests/","title":"Scdg tests","text":""},{"location":"sources/sema-toolchain/sema_scdg/application/scdg_tests/#compare_graphs","title":"compare_graphs","text":"<pre><code>.compare_graphs(\n   graph1_path, graph2_path, csv_path1, csv_path2, exploration_timeout,\n   prod = False\n)\n</code></pre>"},{"location":"sources/sema-toolchain/sema_scdg/application/procedures/windows/custom_package/MapViewOfFile/","title":"MapViewOfFile","text":""},{"location":"sources/sema-toolchain/sema_scdg/application/procedures/windows/custom_package/MapViewOfFile/#convert_prot","title":"convert_prot","text":"<pre><code>.convert_prot(\n   prot\n)\n</code></pre> <p>Convert from a windows memory protection constant to an angr bitmask</p>"},{"location":"sources/sema-toolchain/sema_scdg/application/procedures/windows/custom_package/MapViewOfFile/#deconvert_prot","title":"deconvert_prot","text":"<pre><code>.deconvert_prot(\n   prot\n)\n</code></pre> <p>Convert from a angr bitmask to a windows memory protection constant</p>"},{"location":"sources/sema-toolchain/sema_scdg/application/procedures/windows/custom_package/VirtualAlloc/","title":"VirtualAlloc","text":""},{"location":"sources/sema-toolchain/sema_scdg/application/procedures/windows/custom_package/VirtualAlloc/#convert_prot","title":"convert_prot","text":"<pre><code>.convert_prot(\n   prot\n)\n</code></pre> <p>Convert from a windows memory protection constant to an angr bitmask</p>"},{"location":"sources/sema-toolchain/sema_scdg/application/procedures/windows/custom_package/VirtualAlloc/#deconvert_prot","title":"deconvert_prot","text":"<pre><code>.deconvert_prot(\n   prot\n)\n</code></pre> <p>Convert from a angr bitmask to a windows memory protection constant</p>"},{"location":"sources/sema-toolchain/sema_scdg/application/procedures/windows/custom_package/VirtualAllocEx/","title":"VirtualAllocEx","text":""},{"location":"sources/sema-toolchain/sema_scdg/application/procedures/windows/custom_package/VirtualAllocEx/#convert_prot","title":"convert_prot","text":"<pre><code>.convert_prot(\n   prot\n)\n</code></pre>"},{"location":"sources/sema-toolchain/sema_scdg/application/procedures/windows/custom_package/VirtualAllocEx/#deconvert_prot","title":"deconvert_prot","text":"<pre><code>.deconvert_prot(\n   prot\n)\n</code></pre> <p>Convert from a angr bitmask to a windows memory protection constant</p>"},{"location":"sources/sema-toolchain/sema_scdg/application/sandboxes/main/","title":"Main","text":""},{"location":"sources/sema-toolchain/sema_scdg/application/sandboxes/main/#main","title":"main","text":"<pre><code>.main()\n</code></pre> <p>Echo the input arguments to standard output</p>"},{"location":"sources/sema-toolchain/sema_scdg/application/sandboxes/vm/kvm/main/","title":"Main","text":""},{"location":"sources/sema-toolchain/sema_scdg/application/sandboxes/vm/kvm/main/#main","title":"main","text":"<pre><code>.main()\n</code></pre> <p>Echo the input arguments to standard output</p>"},{"location":"sources/sema-toolchain/sema_web_app/application/SemaServer/","title":"SemaServer","text":""},{"location":"sources/sema-toolchain/sema_web_app/application/SemaServer/#main","title":"main","text":"<pre><code>.main()\n</code></pre>"}]}